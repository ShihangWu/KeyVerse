
KeyVerse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000a98c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800aa98  0800aa98  0000ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b310  0800b310  0000d16c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b310  0800b310  0000d16c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b310  0800b310  0000d16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b310  0800b310  0000c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b314  0800b314  0000c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800b318  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000116c  2000016c  0800b484  0000d16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012d8  0800b484  0000d2d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016516  00000000  00000000  0000d195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd1  00000000  00000000  000236ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00027680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd9  00000000  00000000  00028b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7bd  00000000  00000000  00029b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c147  00000000  00000000  000452ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902ef  00000000  00000000  00061415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000f1748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f6bf0  2**0
=======
  1 .text         0000a918  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800aa24  0800aa24  0000ba24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b29c  0800b29c  0000d16c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b29c  0800b29c  0000d16c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b29c  0800b29c  0000d16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b29c  0800b29c  0000c29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2a0  0800b2a0  0000c2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800b2a4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  2000016c  0800b410  0000d16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e0  0800b410  0000d3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165b1  00000000  00000000  0000d195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fed  00000000  00000000  00023746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00027738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdf  00000000  00000000  00028bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7d5  00000000  00000000  00029bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0bd  00000000  00000000  000453ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903c7  00000000  00000000  00061469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  000f1874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f6d38  2**0
>>>>>>> 2814753 (long press added)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	0800aa80 	.word	0x0800aa80
=======
 800012c:	0800aa0c 	.word	0x0800aa0c
>>>>>>> 2814753 (long press added)

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
<<<<<<< HEAD
 8000148:	0800aa80 	.word	0x0800aa80
=======
 8000148:	0800aa0c 	.word	0x0800aa0c
>>>>>>> 2814753 (long press added)

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2010      	movs	r0, #16
<<<<<<< HEAD
 8000170:	f001 fc2d 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f001 fc46 	bl	8001a06 <HAL_NVIC_EnableIRQ>
=======
 8000170:	f001 fbf3 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f001 fc0c 	bl	8001992 <HAL_NVIC_EnableIRQ>
>>>>>>> 2814753 (long press added)

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b3e      	ldr	r3, [pc, #248]	@ (8000298 <MX_GPIO_Init+0x110>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b38      	ldr	r3, [pc, #224]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a37      	ldr	r2, [pc, #220]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b35      	ldr	r3, [pc, #212]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b32      	ldr	r3, [pc, #200]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a31      	ldr	r2, [pc, #196]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000298 <MX_GPIO_Init+0x110>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|ROW3_Pin|ROW2_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	210e      	movs	r1, #14
 80001e8:	482c      	ldr	r0, [pc, #176]	@ (800029c <MX_GPIO_Init+0x114>)
<<<<<<< HEAD
 80001ea:	f002 f828 	bl	800223e <HAL_GPIO_WritePin>
=======
 80001ea:	f001 ffee 	bl	80021ca <HAL_GPIO_WritePin>
>>>>>>> 2814753 (long press added)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW1_Pin|ROW0_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80001f4:	482a      	ldr	r0, [pc, #168]	@ (80002a0 <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 80001f6:	f002 f822 	bl	800223e <HAL_GPIO_WritePin>
=======
 80001f6:	f001 ffe8 	bl	80021ca <HAL_GPIO_WritePin>
>>>>>>> 2814753 (long press added)

  /*Configure GPIO pins : ROW4_Pin ROW3_Pin ROW2_Pin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin;
 80001fa:	230e      	movs	r3, #14
 80001fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	2301      	movs	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000206:	2302      	movs	r3, #2
 8000208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	4822      	ldr	r0, [pc, #136]	@ (800029c <MX_GPIO_Init+0x114>)
<<<<<<< HEAD
 8000212:	f001 fe79 	bl	8001f08 <HAL_GPIO_Init>
=======
 8000212:	f001 fe3f 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

  /*Configure GPIO pin : COL3_Pin */
  GPIO_InitStruct.Pin = COL3_Pin;
 8000216:	2380      	movs	r3, #128	@ 0x80
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COL3_GPIO_Port, &GPIO_InitStruct);
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4619      	mov	r1, r3
 8000228:	481c      	ldr	r0, [pc, #112]	@ (800029c <MX_GPIO_Init+0x114>)
<<<<<<< HEAD
 800022a:	f001 fe6d 	bl	8001f08 <HAL_GPIO_Init>
=======
 800022a:	f001 fe33 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

  /*Configure GPIO pins : ROW1_Pin ROW0_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW0_Pin;
 800022e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2302      	movs	r3, #2
 800023e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	4816      	ldr	r0, [pc, #88]	@ (80002a0 <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 8000248:	f001 fe5e 	bl	8001f08 <HAL_GPIO_Init>
=======
 8000248:	f001 fe24 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 800024c:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
 8000250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	480f      	ldr	r0, [pc, #60]	@ (80002a0 <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 8000262:	f001 fe51 	bl	8001f08 <HAL_GPIO_Init>
=======
 8000262:	f001 fe17 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

  /*Configure GPIO pin : ED_Pin */
  GPIO_InitStruct.Pin = ED_Pin;
 8000266:	2320      	movs	r3, #32
 8000268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <MX_GPIO_Init+0x11c>)
 800026c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ED_GPIO_Port, &GPIO_InitStruct);
 8000272:	f107 0310 	add.w	r3, r7, #16
 8000276:	4619      	mov	r1, r3
 8000278:	4809      	ldr	r0, [pc, #36]	@ (80002a0 <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 800027a:	f001 fe45 	bl	8001f08 <HAL_GPIO_Init>
=======
 800027a:	f001 fe0b 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800027e:	2200      	movs	r2, #0
 8000280:	2100      	movs	r1, #0
 8000282:	2017      	movs	r0, #23
<<<<<<< HEAD
 8000284:	f001 fba3 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000288:	2017      	movs	r0, #23
 800028a:	f001 fbbc 	bl	8001a06 <HAL_NVIC_EnableIRQ>
=======
 8000284:	f001 fb69 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000288:	2017      	movs	r0, #23
 800028a:	f001 fb82 	bl	8001992 <HAL_NVIC_EnableIRQ>
>>>>>>> 2814753 (long press added)

}
 800028e:	bf00      	nop
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	10210000 	.word	0x10210000

080002a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002ae:	4a13      	ldr	r2, [pc, #76]	@ (80002fc <MX_I2C1_Init+0x54>)
 80002b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002b4:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <MX_I2C1_Init+0x58>)
 80002b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_I2C1_Init+0x50>)
<<<<<<< HEAD
 80002e6:	f001 ffe5 	bl	80022b4 <HAL_I2C_Init>
=======
 80002e6:	f001 ffab 	bl	8002240 <HAL_I2C_Init>
>>>>>>> 2814753 (long press added)
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
<<<<<<< HEAD
 80002f0:	f000 fb2c 	bl	800094c <Error_Handler>
=======
 80002f0:	f000 faf2 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000188 	.word	0x20000188
 80002fc:	40005400 	.word	0x40005400
 8000300:	000186a0 	.word	0x000186a0

08000304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a15      	ldr	r2, [pc, #84]	@ (8000374 <HAL_I2C_MspInit+0x70>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d123      	bne.n	800036c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <HAL_I2C_MspInit+0x74>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <HAL_I2C_MspInit+0x74>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <HAL_I2C_MspInit+0x74>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800033c:	23c0      	movs	r3, #192	@ 0xc0
 800033e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000340:	2312      	movs	r3, #18
 8000342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000344:	2303      	movs	r3, #3
 8000346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	480b      	ldr	r0, [pc, #44]	@ (800037c <HAL_I2C_MspInit+0x78>)
<<<<<<< HEAD
 8000350:	f001 fdda 	bl	8001f08 <HAL_GPIO_Init>
=======
 8000350:	f001 fda0 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000354:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <HAL_I2C_MspInit+0x74>)
 8000356:	69db      	ldr	r3, [r3, #28]
 8000358:	4a07      	ldr	r2, [pc, #28]	@ (8000378 <HAL_I2C_MspInit+0x74>)
 800035a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800035e:	61d3      	str	r3, [r2, #28]
 8000360:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <HAL_I2C_MspInit+0x74>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40005400 	.word	0x40005400
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00

08000380 <ScanKeypad>:
<<<<<<< HEAD
    {0x62, 0x63, 0x58, 0x00}   // 第五行
};

uint8_t KeyNum;
=======
    HAL_GPIO_WritePin(GPIOA, ROW2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOA, ROW3_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOA, ROW4_Pin, GPIO_PIN_SET);
}
>>>>>>> 2814753 (long press added)

void ScanKeypad(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
<<<<<<< HEAD
	static uint8_t keyState[5][4] = {0};  // 按键状态缓存
	static uint8_t keyPressed[5][4] = {0}; // 按键是否已经处理过

	for (int row = 0; row < 5; row++) {
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	e1d0      	b.n	800072e <ScanKeypad+0x3ae>
    // 先将所有行设置为高电平
    HAL_GPIO_WritePin(GPIOB, ROW0_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000392:	48a6      	ldr	r0, [pc, #664]	@ (800062c <ScanKeypad+0x2ac>)
 8000394:	f001 ff53 	bl	800223e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, ROW1_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039e:	48a3      	ldr	r0, [pc, #652]	@ (800062c <ScanKeypad+0x2ac>)
 80003a0:	f001 ff4d 	bl	800223e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ROW2_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2108      	movs	r1, #8
 80003a8:	48a1      	ldr	r0, [pc, #644]	@ (8000630 <ScanKeypad+0x2b0>)
 80003aa:	f001 ff48 	bl	800223e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ROW3_Pin, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2104      	movs	r1, #4
 80003b2:	489f      	ldr	r0, [pc, #636]	@ (8000630 <ScanKeypad+0x2b0>)
 80003b4:	f001 ff43 	bl	800223e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ROW4_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2102      	movs	r1, #2
 80003bc:	489c      	ldr	r0, [pc, #624]	@ (8000630 <ScanKeypad+0x2b0>)
 80003be:	f001 ff3e 	bl	800223e <HAL_GPIO_WritePin>

    // 将当前行设置为低电平
    if (row == 0) HAL_GPIO_WritePin(GPIOB, ROW0_Pin, GPIO_PIN_RESET);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d105      	bne.n	80003d4 <ScanKeypad+0x54>
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ce:	4897      	ldr	r0, [pc, #604]	@ (800062c <ScanKeypad+0x2ac>)
 80003d0:	f001 ff35 	bl	800223e <HAL_GPIO_WritePin>
    if (row == 1) HAL_GPIO_WritePin(GPIOB, ROW1_Pin, GPIO_PIN_RESET);
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d105      	bne.n	80003e6 <ScanKeypad+0x66>
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003e0:	4892      	ldr	r0, [pc, #584]	@ (800062c <ScanKeypad+0x2ac>)
 80003e2:	f001 ff2c 	bl	800223e <HAL_GPIO_WritePin>
    if (row == 2) HAL_GPIO_WritePin(GPIOA, ROW2_Pin, GPIO_PIN_RESET);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d104      	bne.n	80003f6 <ScanKeypad+0x76>
 80003ec:	2200      	movs	r2, #0
 80003ee:	2108      	movs	r1, #8
 80003f0:	488f      	ldr	r0, [pc, #572]	@ (8000630 <ScanKeypad+0x2b0>)
 80003f2:	f001 ff24 	bl	800223e <HAL_GPIO_WritePin>
    if (row == 3) HAL_GPIO_WritePin(GPIOA, ROW3_Pin, GPIO_PIN_RESET);
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	d104      	bne.n	8000406 <ScanKeypad+0x86>
 80003fc:	2200      	movs	r2, #0
 80003fe:	2104      	movs	r1, #4
 8000400:	488b      	ldr	r0, [pc, #556]	@ (8000630 <ScanKeypad+0x2b0>)
 8000402:	f001 ff1c 	bl	800223e <HAL_GPIO_WritePin>
    if (row == 4) HAL_GPIO_WritePin(GPIOA, ROW4_Pin, GPIO_PIN_RESET);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b04      	cmp	r3, #4
 800040a:	d104      	bne.n	8000416 <ScanKeypad+0x96>
 800040c:	2200      	movs	r2, #0
 800040e:	2102      	movs	r1, #2
 8000410:	4887      	ldr	r0, [pc, #540]	@ (8000630 <ScanKeypad+0x2b0>)
 8000412:	f001 ff14 	bl	800223e <HAL_GPIO_WritePin>

    // 消抖延迟（10ms），确保按键稳定
    HAL_Delay(10);
 8000416:	200a      	movs	r0, #10
 8000418:	f001 f9de 	bl	80017d8 <HAL_Delay>

    // 扫描列
    for (int col = 0; col < 4; col++) {
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	e0fd      	b.n	800061e <ScanKeypad+0x29e>
        if (col == 0 && HAL_GPIO_ReadPin(GPIOB, COL0_Pin) == GPIO_PIN_RESET && keyState[row][col] == 0) {
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d13b      	bne.n	80004a0 <ScanKeypad+0x120>
 8000428:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800042c:	487f      	ldr	r0, [pc, #508]	@ (800062c <ScanKeypad+0x2ac>)
 800042e:	f001 feef 	bl	8002210 <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d133      	bne.n	80004a0 <ScanKeypad+0x120>
 8000438:	4a7e      	ldr	r2, [pc, #504]	@ (8000634 <ScanKeypad+0x2b4>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	441a      	add	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	4413      	add	r3, r2
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d12a      	bne.n	80004a0 <ScanKeypad+0x120>
            keyState[row][col] = 1;  // 按下了键
 800044a:	4a7a      	ldr	r2, [pc, #488]	@ (8000634 <ScanKeypad+0x2b4>)
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	441a      	add	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	4413      	add	r3, r2
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
            if (keyPressed[row][col] == 0) {
 800045a:	4a77      	ldr	r2, [pc, #476]	@ (8000638 <ScanKeypad+0x2b8>)
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	441a      	add	r2, r3
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	4413      	add	r3, r2
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d119      	bne.n	80004a0 <ScanKeypad+0x120>
                KeyNum = keypad[row][col];  // 设置键码
 800046c:	4a73      	ldr	r2, [pc, #460]	@ (800063c <ScanKeypad+0x2bc>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	441a      	add	r2, r3
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	4413      	add	r3, r2
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b71      	ldr	r3, [pc, #452]	@ (8000640 <ScanKeypad+0x2c0>)
 800047c:	701a      	strb	r2, [r3, #0]
                HIDkeyBoard.KEYCODE1 = KeyNum;
 800047e:	4b70      	ldr	r3, [pc, #448]	@ (8000640 <ScanKeypad+0x2c0>)
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	4b70      	ldr	r3, [pc, #448]	@ (8000644 <ScanKeypad+0x2c4>)
 8000484:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000486:	2208      	movs	r2, #8
 8000488:	496e      	ldr	r1, [pc, #440]	@ (8000644 <ScanKeypad+0x2c4>)
 800048a:	486f      	ldr	r0, [pc, #444]	@ (8000648 <ScanKeypad+0x2c8>)
 800048c:	f008 fe1a 	bl	80090c4 <USBD_HID_SendReport>
                keyPressed[row][col] = 1;  // 标记该按键已经处理过
 8000490:	4a69      	ldr	r2, [pc, #420]	@ (8000638 <ScanKeypad+0x2b8>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	441a      	add	r2, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	4413      	add	r3, r2
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]
            }
        }
        if (col == 1 && HAL_GPIO_ReadPin(GPIOB, COL1_Pin) == GPIO_PIN_RESET && keyState[row][col] == 0) {
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d13b      	bne.n	800051e <ScanKeypad+0x19e>
 80004a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004aa:	4860      	ldr	r0, [pc, #384]	@ (800062c <ScanKeypad+0x2ac>)
 80004ac:	f001 feb0 	bl	8002210 <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d133      	bne.n	800051e <ScanKeypad+0x19e>
 80004b6:	4a5f      	ldr	r2, [pc, #380]	@ (8000634 <ScanKeypad+0x2b4>)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	441a      	add	r2, r3
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d12a      	bne.n	800051e <ScanKeypad+0x19e>
            keyState[row][col] = 1;
 80004c8:	4a5a      	ldr	r2, [pc, #360]	@ (8000634 <ScanKeypad+0x2b4>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	441a      	add	r2, r3
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	4413      	add	r3, r2
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
            if (keyPressed[row][col] == 0) {
 80004d8:	4a57      	ldr	r2, [pc, #348]	@ (8000638 <ScanKeypad+0x2b8>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	441a      	add	r2, r3
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d119      	bne.n	800051e <ScanKeypad+0x19e>
                KeyNum = keypad[row][col];
 80004ea:	4a54      	ldr	r2, [pc, #336]	@ (800063c <ScanKeypad+0x2bc>)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	441a      	add	r2, r3
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4413      	add	r3, r2
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	4b51      	ldr	r3, [pc, #324]	@ (8000640 <ScanKeypad+0x2c0>)
 80004fa:	701a      	strb	r2, [r3, #0]
                HIDkeyBoard.KEYCODE1 = KeyNum;
 80004fc:	4b50      	ldr	r3, [pc, #320]	@ (8000640 <ScanKeypad+0x2c0>)
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4b50      	ldr	r3, [pc, #320]	@ (8000644 <ScanKeypad+0x2c4>)
 8000502:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000504:	2208      	movs	r2, #8
 8000506:	494f      	ldr	r1, [pc, #316]	@ (8000644 <ScanKeypad+0x2c4>)
 8000508:	484f      	ldr	r0, [pc, #316]	@ (8000648 <ScanKeypad+0x2c8>)
 800050a:	f008 fddb 	bl	80090c4 <USBD_HID_SendReport>
                keyPressed[row][col] = 1;
 800050e:	4a4a      	ldr	r2, [pc, #296]	@ (8000638 <ScanKeypad+0x2b8>)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	441a      	add	r2, r3
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4413      	add	r3, r2
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
            }
        }
        if (col == 2 && HAL_GPIO_ReadPin(GPIOB, COL2_Pin) == GPIO_PIN_RESET && keyState[row][col] == 0) {
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d13b      	bne.n	800059c <ScanKeypad+0x21c>
 8000524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000528:	4840      	ldr	r0, [pc, #256]	@ (800062c <ScanKeypad+0x2ac>)
 800052a:	f001 fe71 	bl	8002210 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d133      	bne.n	800059c <ScanKeypad+0x21c>
 8000534:	4a3f      	ldr	r2, [pc, #252]	@ (8000634 <ScanKeypad+0x2b4>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	441a      	add	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d12a      	bne.n	800059c <ScanKeypad+0x21c>
            keyState[row][col] = 1;
 8000546:	4a3b      	ldr	r2, [pc, #236]	@ (8000634 <ScanKeypad+0x2b4>)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	441a      	add	r2, r3
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4413      	add	r3, r2
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
            if (keyPressed[row][col] == 0) {
 8000556:	4a38      	ldr	r2, [pc, #224]	@ (8000638 <ScanKeypad+0x2b8>)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	441a      	add	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d119      	bne.n	800059c <ScanKeypad+0x21c>
                KeyNum = keypad[row][col];
 8000568:	4a34      	ldr	r2, [pc, #208]	@ (800063c <ScanKeypad+0x2bc>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	441a      	add	r2, r3
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	4413      	add	r3, r2
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <ScanKeypad+0x2c0>)
 8000578:	701a      	strb	r2, [r3, #0]
                HIDkeyBoard.KEYCODE1 = KeyNum;
 800057a:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <ScanKeypad+0x2c0>)
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <ScanKeypad+0x2c4>)
 8000580:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000582:	2208      	movs	r2, #8
 8000584:	492f      	ldr	r1, [pc, #188]	@ (8000644 <ScanKeypad+0x2c4>)
 8000586:	4830      	ldr	r0, [pc, #192]	@ (8000648 <ScanKeypad+0x2c8>)
 8000588:	f008 fd9c 	bl	80090c4 <USBD_HID_SendReport>
                keyPressed[row][col] = 1;
 800058c:	4a2a      	ldr	r2, [pc, #168]	@ (8000638 <ScanKeypad+0x2b8>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	441a      	add	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4413      	add	r3, r2
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (col == 3 && HAL_GPIO_ReadPin(GPIOA, COL3_Pin) == GPIO_PIN_RESET && keyState[row][col] == 0) {
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d13a      	bne.n	8000618 <ScanKeypad+0x298>
 80005a2:	2180      	movs	r1, #128	@ 0x80
 80005a4:	4822      	ldr	r0, [pc, #136]	@ (8000630 <ScanKeypad+0x2b0>)
 80005a6:	f001 fe33 	bl	8002210 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d133      	bne.n	8000618 <ScanKeypad+0x298>
 80005b0:	4a20      	ldr	r2, [pc, #128]	@ (8000634 <ScanKeypad+0x2b4>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	441a      	add	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d12a      	bne.n	8000618 <ScanKeypad+0x298>
            keyState[row][col] = 1;
 80005c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <ScanKeypad+0x2b4>)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	441a      	add	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4413      	add	r3, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
            if (keyPressed[row][col] == 0) {
 80005d2:	4a19      	ldr	r2, [pc, #100]	@ (8000638 <ScanKeypad+0x2b8>)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	441a      	add	r2, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d119      	bne.n	8000618 <ScanKeypad+0x298>
                KeyNum = keypad[row][col];
 80005e4:	4a15      	ldr	r2, [pc, #84]	@ (800063c <ScanKeypad+0x2bc>)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	441a      	add	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <ScanKeypad+0x2c0>)
 80005f4:	701a      	strb	r2, [r3, #0]
                HIDkeyBoard.KEYCODE1 = KeyNum;
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <ScanKeypad+0x2c0>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <ScanKeypad+0x2c4>)
 80005fc:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 80005fe:	2208      	movs	r2, #8
 8000600:	4910      	ldr	r1, [pc, #64]	@ (8000644 <ScanKeypad+0x2c4>)
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <ScanKeypad+0x2c8>)
 8000604:	f008 fd5e 	bl	80090c4 <USBD_HID_SendReport>
                keyPressed[row][col] = 1;
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <ScanKeypad+0x2b8>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	441a      	add	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4413      	add	r3, r2
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < 4; col++) {
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b03      	cmp	r3, #3
 8000622:	f77f aefe 	ble.w	8000422 <ScanKeypad+0xa2>
=======
    uint32_t current_time = HAL_GetTick();
 8000386:	f001 f9e3 	bl	8001750 <HAL_GetTick>
 800038a:	6078      	str	r0, [r7, #4]

    // 控制扫描频率
    if (current_time - keypad_state.last_scan_time < SCAN_INTERVAL) {
 800038c:	4bab      	ldr	r3, [pc, #684]	@ (800063c <ScanKeypad+0x2bc>)
 800038e:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	2b01      	cmp	r3, #1
 8000398:	f240 81a1 	bls.w	80006de <ScanKeypad+0x35e>
        return;
    }
    keypad_state.last_scan_time = current_time;
 800039c:	4aa7      	ldr	r2, [pc, #668]	@ (800063c <ScanKeypad+0x2bc>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

    // 1. 先将所有行设置为高电平
    HAL_GPIO_WritePin(GPIOB, ROW0_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003aa:	48a5      	ldr	r0, [pc, #660]	@ (8000640 <ScanKeypad+0x2c0>)
 80003ac:	f001 ff0d 	bl	80021ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, ROW1_Pin, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003b6:	48a2      	ldr	r0, [pc, #648]	@ (8000640 <ScanKeypad+0x2c0>)
 80003b8:	f001 ff07 	bl	80021ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ROW2_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	48a0      	ldr	r0, [pc, #640]	@ (8000644 <ScanKeypad+0x2c4>)
 80003c2:	f001 ff02 	bl	80021ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ROW3_Pin, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2104      	movs	r1, #4
 80003ca:	489e      	ldr	r0, [pc, #632]	@ (8000644 <ScanKeypad+0x2c4>)
 80003cc:	f001 fefd 	bl	80021ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ROW4_Pin, GPIO_PIN_SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2102      	movs	r1, #2
 80003d4:	489b      	ldr	r0, [pc, #620]	@ (8000644 <ScanKeypad+0x2c4>)
 80003d6:	f001 fef8 	bl	80021ca <HAL_GPIO_WritePin>

    // 2. 将当前扫描行设置为低电平
    switch (keypad_state.current_row) {
 80003da:	4b98      	ldr	r3, [pc, #608]	@ (800063c <ScanKeypad+0x2bc>)
 80003dc:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80003e0:	2b04      	cmp	r3, #4
 80003e2:	d82d      	bhi.n	8000440 <ScanKeypad+0xc0>
 80003e4:	a201      	add	r2, pc, #4	@ (adr r2, 80003ec <ScanKeypad+0x6c>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	08000401 	.word	0x08000401
 80003f0:	0800040f 	.word	0x0800040f
 80003f4:	0800041d 	.word	0x0800041d
 80003f8:	08000429 	.word	0x08000429
 80003fc:	08000435 	.word	0x08000435
        case 0: HAL_GPIO_WritePin(GPIOB, ROW0_Pin, GPIO_PIN_RESET); break;
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000406:	488e      	ldr	r0, [pc, #568]	@ (8000640 <ScanKeypad+0x2c0>)
 8000408:	f001 fedf 	bl	80021ca <HAL_GPIO_WritePin>
 800040c:	e018      	b.n	8000440 <ScanKeypad+0xc0>
        case 1: HAL_GPIO_WritePin(GPIOB, ROW1_Pin, GPIO_PIN_RESET); break;
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000414:	488a      	ldr	r0, [pc, #552]	@ (8000640 <ScanKeypad+0x2c0>)
 8000416:	f001 fed8 	bl	80021ca <HAL_GPIO_WritePin>
 800041a:	e011      	b.n	8000440 <ScanKeypad+0xc0>
        case 2: HAL_GPIO_WritePin(GPIOA, ROW2_Pin, GPIO_PIN_RESET); break;
 800041c:	2200      	movs	r2, #0
 800041e:	2108      	movs	r1, #8
 8000420:	4888      	ldr	r0, [pc, #544]	@ (8000644 <ScanKeypad+0x2c4>)
 8000422:	f001 fed2 	bl	80021ca <HAL_GPIO_WritePin>
 8000426:	e00b      	b.n	8000440 <ScanKeypad+0xc0>
        case 3: HAL_GPIO_WritePin(GPIOA, ROW3_Pin, GPIO_PIN_RESET); break;
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	4885      	ldr	r0, [pc, #532]	@ (8000644 <ScanKeypad+0x2c4>)
 800042e:	f001 fecc 	bl	80021ca <HAL_GPIO_WritePin>
 8000432:	e005      	b.n	8000440 <ScanKeypad+0xc0>
        case 4: HAL_GPIO_WritePin(GPIOA, ROW4_Pin, GPIO_PIN_RESET); break;
 8000434:	2200      	movs	r2, #0
 8000436:	2102      	movs	r1, #2
 8000438:	4882      	ldr	r0, [pc, #520]	@ (8000644 <ScanKeypad+0x2c4>)
 800043a:	f001 fec6 	bl	80021ca <HAL_GPIO_WritePin>
 800043e:	bf00      	nop
    }

    // 3. 扫描当前行的所有列
    for (int col = 0; col < 4; col++) {
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	e134      	b.n	80006b0 <ScanKeypad+0x330>
        uint8_t key_detected = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	72fb      	strb	r3, [r7, #11]

        // 读取列状态
        switch(col) {
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2b03      	cmp	r3, #3
 800044e:	d83e      	bhi.n	80004ce <ScanKeypad+0x14e>
 8000450:	a201      	add	r2, pc, #4	@ (adr r2, 8000458 <ScanKeypad+0xd8>)
 8000452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000456:	bf00      	nop
 8000458:	08000469 	.word	0x08000469
 800045c:	08000483 	.word	0x08000483
 8000460:	0800049d 	.word	0x0800049d
 8000464:	080004b7 	.word	0x080004b7
            case 0: key_detected = (HAL_GPIO_ReadPin(GPIOB, COL0_Pin) == GPIO_PIN_RESET); break;
 8000468:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800046c:	4874      	ldr	r0, [pc, #464]	@ (8000640 <ScanKeypad+0x2c0>)
 800046e:	f001 fe95 	bl	800219c <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	bf0c      	ite	eq
 8000478:	2301      	moveq	r3, #1
 800047a:	2300      	movne	r3, #0
 800047c:	b2db      	uxtb	r3, r3
 800047e:	72fb      	strb	r3, [r7, #11]
 8000480:	e025      	b.n	80004ce <ScanKeypad+0x14e>
            case 1: key_detected = (HAL_GPIO_ReadPin(GPIOB, COL1_Pin) == GPIO_PIN_RESET); break;
 8000482:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000486:	486e      	ldr	r0, [pc, #440]	@ (8000640 <ScanKeypad+0x2c0>)
 8000488:	f001 fe88 	bl	800219c <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf0c      	ite	eq
 8000492:	2301      	moveq	r3, #1
 8000494:	2300      	movne	r3, #0
 8000496:	b2db      	uxtb	r3, r3
 8000498:	72fb      	strb	r3, [r7, #11]
 800049a:	e018      	b.n	80004ce <ScanKeypad+0x14e>
            case 2: key_detected = (HAL_GPIO_ReadPin(GPIOB, COL2_Pin) == GPIO_PIN_RESET); break;
 800049c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a0:	4867      	ldr	r0, [pc, #412]	@ (8000640 <ScanKeypad+0x2c0>)
 80004a2:	f001 fe7b 	bl	800219c <HAL_GPIO_ReadPin>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	72fb      	strb	r3, [r7, #11]
 80004b4:	e00b      	b.n	80004ce <ScanKeypad+0x14e>
            case 3: key_detected = (HAL_GPIO_ReadPin(GPIOA, COL3_Pin) == GPIO_PIN_RESET); break;
 80004b6:	2180      	movs	r1, #128	@ 0x80
 80004b8:	4862      	ldr	r0, [pc, #392]	@ (8000644 <ScanKeypad+0x2c4>)
 80004ba:	f001 fe6f 	bl	800219c <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	bf0c      	ite	eq
 80004c4:	2301      	moveq	r3, #1
 80004c6:	2300      	movne	r3, #0
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	72fb      	strb	r3, [r7, #11]
 80004cc:	bf00      	nop
        }

        int row = keypad_state.current_row;
 80004ce:	4b5b      	ldr	r3, [pc, #364]	@ (800063c <ScanKeypad+0x2bc>)
 80004d0:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80004d4:	603b      	str	r3, [r7, #0]

        // 按键按下检测
        if (key_detected) {
 80004d6:	7afb      	ldrb	r3, [r7, #11]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	f000 80bb 	beq.w	8000654 <ScanKeypad+0x2d4>
            if (keypad_state.keyState[row][col] == 0) {
 80004de:	4a57      	ldr	r2, [pc, #348]	@ (800063c <ScanKeypad+0x2bc>)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	441a      	add	r2, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d111      	bne.n	8000514 <ScanKeypad+0x194>
                // 第一次检测到按下，记录时间
                keypad_state.keyState[row][col] = 1;
 80004f0:	4a52      	ldr	r2, [pc, #328]	@ (800063c <ScanKeypad+0x2bc>)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	441a      	add	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
                keypad_state.debounce_time[row][col] = current_time;
 8000500:	494e      	ldr	r1, [pc, #312]	@ (800063c <ScanKeypad+0x2bc>)
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	009a      	lsls	r2, r3, #2
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4413      	add	r3, r2
 800050a:	3336      	adds	r3, #54	@ 0x36
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	605a      	str	r2, [r3, #4]
            }

            // 消抖确认
            if (current_time - keypad_state.debounce_time[row][col] > DEBOUNCE_TIME) {
 8000514:	4949      	ldr	r1, [pc, #292]	@ (800063c <ScanKeypad+0x2bc>)
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	009a      	lsls	r2, r3, #2
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	3336      	adds	r3, #54	@ 0x36
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	2b14      	cmp	r3, #20
 800052c:	f240 80bd 	bls.w	80006aa <ScanKeypad+0x32a>
                if (!keypad_state.keyPressed[row][col]) {
 8000530:	4a42      	ldr	r2, [pc, #264]	@ (800063c <ScanKeypad+0x2bc>)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	441a      	add	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	3314      	adds	r3, #20
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d129      	bne.n	8000598 <ScanKeypad+0x218>
                    // 首次按下
                    keypad_state.keyPressed[row][col] = 1;
 8000544:	4a3d      	ldr	r2, [pc, #244]	@ (800063c <ScanKeypad+0x2bc>)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	441a      	add	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4413      	add	r3, r2
 8000550:	3314      	adds	r3, #20
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
                    keypad_state.press_time[row][col] = current_time;
 8000556:	4939      	ldr	r1, [pc, #228]	@ (800063c <ScanKeypad+0x2bc>)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	009a      	lsls	r2, r3, #2
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4413      	add	r3, r2
 8000560:	330a      	adds	r3, #10
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    keypad_state.long_press_flag[row][col] = 0;
 8000568:	4a34      	ldr	r2, [pc, #208]	@ (800063c <ScanKeypad+0x2bc>)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	441a      	add	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4413      	add	r3, r2
 8000574:	3378      	adds	r3, #120	@ 0x78
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]

                    // 发送按键按下报告
                    HIDkeyBoard.KEYCODE1 = keypad[row][col];
 800057a:	4a33      	ldr	r2, [pc, #204]	@ (8000648 <ScanKeypad+0x2c8>)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	441a      	add	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	4b30      	ldr	r3, [pc, #192]	@ (800064c <ScanKeypad+0x2cc>)
 800058a:	709a      	strb	r2, [r3, #2]
                    USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800058c:	2208      	movs	r2, #8
 800058e:	492f      	ldr	r1, [pc, #188]	@ (800064c <ScanKeypad+0x2cc>)
 8000590:	482f      	ldr	r0, [pc, #188]	@ (8000650 <ScanKeypad+0x2d0>)
 8000592:	f008 fd5d 	bl	8009050 <USBD_HID_SendReport>
 8000596:	e088      	b.n	80006aa <ScanKeypad+0x32a>
                } else {
                    // 按键保持按下，检查长按
                    if (!keypad_state.long_press_flag[row][col]) {
 8000598:	4a28      	ldr	r2, [pc, #160]	@ (800063c <ScanKeypad+0x2bc>)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	441a      	add	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	3378      	adds	r3, #120	@ 0x78
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d120      	bne.n	80005ee <ScanKeypad+0x26e>
                        // 检查是否达到长按时间
                        if ((current_time - keypad_state.press_time[row][col]) > LONG_PRESS_DELAY) {
 80005ac:	4923      	ldr	r1, [pc, #140]	@ (800063c <ScanKeypad+0x2bc>)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	009a      	lsls	r2, r3, #2
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4413      	add	r3, r2
 80005b6:	330a      	adds	r3, #10
 80005b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005c4:	d971      	bls.n	80006aa <ScanKeypad+0x32a>
                            keypad_state.long_press_flag[row][col] = 1;
 80005c6:	4a1d      	ldr	r2, [pc, #116]	@ (800063c <ScanKeypad+0x2bc>)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	441a      	add	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4413      	add	r3, r2
 80005d2:	3378      	adds	r3, #120	@ 0x78
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
                            keypad_state.last_repeat_time[row][col] = current_time;
 80005d8:	4918      	ldr	r1, [pc, #96]	@ (800063c <ScanKeypad+0x2bc>)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	009a      	lsls	r2, r3, #2
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	3322      	adds	r3, #34	@ 0x22
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	440b      	add	r3, r1
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	e05d      	b.n	80006aa <ScanKeypad+0x32a>
                        }
                    } else {
                        // 长按重复发送
                        if ((current_time - keypad_state.last_repeat_time[row][col]) > REPEAT_INTERVAL) {
 80005ee:	4913      	ldr	r1, [pc, #76]	@ (800063c <ScanKeypad+0x2bc>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	009a      	lsls	r2, r3, #2
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	3322      	adds	r3, #34	@ 0x22
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	2b64      	cmp	r3, #100	@ 0x64
 8000606:	d950      	bls.n	80006aa <ScanKeypad+0x32a>
                            keypad_state.last_repeat_time[row][col] = current_time;
 8000608:	490c      	ldr	r1, [pc, #48]	@ (800063c <ScanKeypad+0x2bc>)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	009a      	lsls	r2, r3, #2
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	3322      	adds	r3, #34	@ 0x22
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	605a      	str	r2, [r3, #4]
                            HIDkeyBoard.KEYCODE1 = keypad[row][col];
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <ScanKeypad+0x2c8>)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	441a      	add	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <ScanKeypad+0x2cc>)
 800062c:	709a      	strb	r2, [r3, #2]
                            USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800062e:	2208      	movs	r2, #8
 8000630:	4906      	ldr	r1, [pc, #24]	@ (800064c <ScanKeypad+0x2cc>)
 8000632:	4807      	ldr	r0, [pc, #28]	@ (8000650 <ScanKeypad+0x2d0>)
 8000634:	f008 fd0c 	bl	8009050 <USBD_HID_SendReport>
 8000638:	e037      	b.n	80006aa <ScanKeypad+0x32a>
 800063a:	bf00      	nop
 800063c:	200001e4 	.word	0x200001e4
 8000640:	40010c00 	.word	0x40010c00
 8000644:	40010800 	.word	0x40010800
 8000648:	20000000 	.word	0x20000000
 800064c:	200001dc 	.word	0x200001dc
 8000650:	20000c30 	.word	0x20000c30
                    }
                }
            }
        } else {
            // 按键释放
            if (keypad_state.keyState[row][col] == 1) {
 8000654:	4a24      	ldr	r2, [pc, #144]	@ (80006e8 <ScanKeypad+0x368>)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	441a      	add	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d121      	bne.n	80006aa <ScanKeypad+0x32a>
                keypad_state.keyState[row][col] = 0;
 8000666:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <ScanKeypad+0x368>)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	441a      	add	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
                keypad_state.keyPressed[row][col] = 0;
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <ScanKeypad+0x368>)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	441a      	add	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	3314      	adds	r3, #20
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
                keypad_state.long_press_flag[row][col] = 0;
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <ScanKeypad+0x368>)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	441a      	add	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4413      	add	r3, r2
 8000694:	3378      	adds	r3, #120	@ 0x78
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]

                // 发送释放报告
                HIDkeyBoard.KEYCODE1 = 0x00;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <ScanKeypad+0x36c>)
 800069c:	2200      	movs	r2, #0
 800069e:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 80006a0:	2208      	movs	r2, #8
 80006a2:	4912      	ldr	r1, [pc, #72]	@ (80006ec <ScanKeypad+0x36c>)
 80006a4:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <ScanKeypad+0x370>)
 80006a6:	f008 fcd3 	bl	8009050 <USBD_HID_SendReport>
    for (int col = 0; col < 4; col++) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	f77f aec7 	ble.w	8000446 <ScanKeypad+0xc6>
>>>>>>> 2814753 (long press added)
            }
        }
    }

<<<<<<< HEAD
    // 按键松开后重置状态
    for (int col = 0; col < 4; col++) {
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e07a      	b.n	8000722 <ScanKeypad+0x3a2>
 800062c:	40010c00 	.word	0x40010c00
 8000630:	40010800 	.word	0x40010800
 8000634:	200001e8 	.word	0x200001e8
 8000638:	200001fc 	.word	0x200001fc
 800063c:	20000000 	.word	0x20000000
 8000640:	200001e4 	.word	0x200001e4
 8000644:	200001dc 	.word	0x200001dc
 8000648:	20000b28 	.word	0x20000b28
        if (HAL_GPIO_ReadPin(GPIOB, COL0_Pin) == GPIO_PIN_SET && keyState[row][0] == 1) {
 800064c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000650:	4840      	ldr	r0, [pc, #256]	@ (8000754 <ScanKeypad+0x3d4>)
 8000652:	f001 fddd 	bl	8002210 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d10f      	bne.n	800067c <ScanKeypad+0x2fc>
 800065c:	4a3e      	ldr	r2, [pc, #248]	@ (8000758 <ScanKeypad+0x3d8>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d109      	bne.n	800067c <ScanKeypad+0x2fc>
            keyState[row][0] = 0;
 8000668:	4a3b      	ldr	r2, [pc, #236]	@ (8000758 <ScanKeypad+0x3d8>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2100      	movs	r1, #0
 800066e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
            keyPressed[row][0] = 0;  // 重置已处理标志
 8000672:	4a3a      	ldr	r2, [pc, #232]	@ (800075c <ScanKeypad+0x3dc>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2100      	movs	r1, #0
 8000678:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        }
        if (HAL_GPIO_ReadPin(GPIOB, COL1_Pin) == GPIO_PIN_SET && keyState[row][1] == 1) {
 800067c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000680:	4834      	ldr	r0, [pc, #208]	@ (8000754 <ScanKeypad+0x3d4>)
 8000682:	f001 fdc5 	bl	8002210 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d112      	bne.n	80006b2 <ScanKeypad+0x332>
 800068c:	4a32      	ldr	r2, [pc, #200]	@ (8000758 <ScanKeypad+0x3d8>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10b      	bne.n	80006b2 <ScanKeypad+0x332>
            keyState[row][1] = 0;
 800069a:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <ScanKeypad+0x3d8>)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	705a      	strb	r2, [r3, #1]
            keyPressed[row][1] = 0;
 80006a6:	4a2d      	ldr	r2, [pc, #180]	@ (800075c <ScanKeypad+0x3dc>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	705a      	strb	r2, [r3, #1]
        }
        if (HAL_GPIO_ReadPin(GPIOB, COL2_Pin) == GPIO_PIN_SET && keyState[row][2] == 1) {
 80006b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b6:	4827      	ldr	r0, [pc, #156]	@ (8000754 <ScanKeypad+0x3d4>)
 80006b8:	f001 fdaa 	bl	8002210 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d112      	bne.n	80006e8 <ScanKeypad+0x368>
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <ScanKeypad+0x3d8>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10b      	bne.n	80006e8 <ScanKeypad+0x368>
            keyState[row][2] = 0;
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <ScanKeypad+0x3d8>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]
            keyPressed[row][2] = 0;
 80006dc:	4a1f      	ldr	r2, [pc, #124]	@ (800075c <ScanKeypad+0x3dc>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	2200      	movs	r2, #0
 80006e6:	709a      	strb	r2, [r3, #2]
        }
        if (HAL_GPIO_ReadPin(GPIOA, COL3_Pin) == GPIO_PIN_SET && keyState[row][3] == 1) {
 80006e8:	2180      	movs	r1, #128	@ 0x80
 80006ea:	481d      	ldr	r0, [pc, #116]	@ (8000760 <ScanKeypad+0x3e0>)
 80006ec:	f001 fd90 	bl	8002210 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d112      	bne.n	800071c <ScanKeypad+0x39c>
 80006f6:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <ScanKeypad+0x3d8>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d10b      	bne.n	800071c <ScanKeypad+0x39c>
            keyState[row][3] = 0;
 8000704:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <ScanKeypad+0x3d8>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	70da      	strb	r2, [r3, #3]
            keyPressed[row][3] = 0;
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <ScanKeypad+0x3dc>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	70da      	strb	r2, [r3, #3]
    for (int col = 0; col < 4; col++) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b03      	cmp	r3, #3
 8000726:	dd91      	ble.n	800064c <ScanKeypad+0x2cc>
	for (int row = 0; row < 5; row++) {
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b04      	cmp	r3, #4
 8000732:	f77f ae2b 	ble.w	800038c <ScanKeypad+0xc>
        }
    }
}

	// 按键释放后发送释放报告
	HIDkeyBoard.KEYCODE1 = 0x00;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <ScanKeypad+0x3e4>)
 8000738:	2200      	movs	r2, #0
 800073a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800073c:	2208      	movs	r2, #8
 800073e:	4909      	ldr	r1, [pc, #36]	@ (8000764 <ScanKeypad+0x3e4>)
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <ScanKeypad+0x3e8>)
 8000742:	f008 fcbf 	bl	80090c4 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	@ 0x32
 8000748:	f001 f846 	bl	80017d8 <HAL_Delay>
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40010c00 	.word	0x40010c00
 8000758:	200001e8 	.word	0x200001e8
 800075c:	200001fc 	.word	0x200001fc
 8000760:	40010800 	.word	0x40010800
 8000764:	200001dc 	.word	0x200001dc
 8000768:	20000b28 	.word	0x20000b28

0800076c <main>:
=======
    // 4. 移动到下一行
    keypad_state.current_row = (keypad_state.current_row + 1) % 5;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <ScanKeypad+0x368>)
 80006ba:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <ScanKeypad+0x374>)
 80006c2:	fb83 1302 	smull	r1, r3, r3, r2
 80006c6:	1059      	asrs	r1, r3, #1
 80006c8:	17d3      	asrs	r3, r2, #31
 80006ca:	1ac9      	subs	r1, r1, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	440b      	add	r3, r1
 80006d2:	1ad1      	subs	r1, r2, r3
 80006d4:	b2ca      	uxtb	r2, r1
 80006d6:	4b04      	ldr	r3, [pc, #16]	@ (80006e8 <ScanKeypad+0x368>)
 80006d8:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
 80006dc:	e000      	b.n	80006e0 <ScanKeypad+0x360>
        return;
 80006de:	bf00      	nop
}
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001e4 	.word	0x200001e4
 80006ec:	200001dc 	.word	0x200001dc
 80006f0:	20000c30 	.word	0x20000c30
 80006f4:	66666667 	.word	0x66666667

080006f8 <main>:
>>>>>>> 2814753 (long press added)
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
=======
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000772:	f000 ffcf 	bl	8001714 <HAL_Init>
=======
 80006fe:	f000 ffcf 	bl	80016a0 <HAL_Init>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000776:	f000 f88f 	bl	8000898 <SystemClock_Config>
=======
 8000702:	f000 f88f 	bl	8000824 <SystemClock_Config>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800077a:	f7ff fd05 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 800077e:	f7ff fce5 	bl	800014c <MX_DMA_Init>
  MX_I2C1_Init();
 8000782:	f7ff fd91 	bl	80002a8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000786:	f000 fca5 	bl	80010d4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800078a:	f009 fd87 	bl	800a29c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800078e:	f000 fbef 	bl	8000f70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000792:	f000 fc45 	bl	8001020 <MX_TIM2_Init>
=======
 8000706:	f7ff fd3f 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 800070a:	f7ff fd1f 	bl	800014c <MX_DMA_Init>
  MX_I2C1_Init();
 800070e:	f7ff fdcb 	bl	80002a8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000712:	f000 fca5 	bl	8001060 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000716:	f009 fd87 	bl	800a228 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800071a:	f000 fbef 	bl	8000efc <MX_TIM1_Init>
  MX_TIM2_Init();
 800071e:	f000 fc45 	bl	8000fac <MX_TIM2_Init>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN 2 */

  	  /*Init module*/
  	  OLED_Init();
<<<<<<< HEAD
 8000796:	f000 f907 	bl	80009a8 <OLED_Init>
=======
 8000722:	f000 f907 	bl	8000934 <OLED_Init>
>>>>>>> 2814753 (long press added)
  /*ws2812 module*/
  uint16_t encoder_value; // 您的编码器值
  uint8_t r, g, b;
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
<<<<<<< HEAD
 800079a:	213c      	movs	r1, #60	@ 0x3c
 800079c:	483a      	ldr	r0, [pc, #232]	@ (8000888 <main+0x11c>)
 800079e:	f005 f821 	bl	80057e4 <HAL_TIM_Encoder_Start>

    OLED_NewFrame();
 80007a2:	f000 f95d 	bl	8000a60 <OLED_NewFrame>
    OLED_DrawImage((128 - (OLED_KeyVerseImg.w)) / 2, 0, &OLED_KeyVerseImg, OLED_COLOR_NORMAL);
 80007a6:	4b39      	ldr	r3, [pc, #228]	@ (800088c <main+0x120>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80007ae:	0fda      	lsrs	r2, r3, #31
 80007b0:	4413      	add	r3, r2
 80007b2:	105b      	asrs	r3, r3, #1
 80007b4:	b2d8      	uxtb	r0, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	4a34      	ldr	r2, [pc, #208]	@ (800088c <main+0x120>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	f000 fb1d 	bl	8000dfa <OLED_DrawImage>
    OLED_ShowFrame();
 80007c0:	f000 f95a 	bl	8000a78 <OLED_ShowFrame>

	  encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 80007c4:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <main+0x11c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ca:	80fb      	strh	r3, [r7, #6]
	  getColorFromEncoder(encoder_value, &r, &g, &b);
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2d8      	uxtb	r0, r3
 80007d0:	1cfb      	adds	r3, r7, #3
 80007d2:	1d3a      	adds	r2, r7, #4
 80007d4:	1d79      	adds	r1, r7, #5
 80007d6:	f000 feeb 	bl	80015b0 <getColorFromEncoder>
	  WS2812_SetAll(r, g, b);
 80007da:	797b      	ldrb	r3, [r7, #5]
 80007dc:	7939      	ldrb	r1, [r7, #4]
 80007de:	78fa      	ldrb	r2, [r7, #3]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fe37 	bl	8001454 <WS2812_SetAll>
	  WS2812_Update();
 80007e6:	f000 fe53 	bl	8001490 <WS2812_Update>
	  HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fff4 	bl	80017d8 <HAL_Delay>
=======
 8000726:	213c      	movs	r1, #60	@ 0x3c
 8000728:	483a      	ldr	r0, [pc, #232]	@ (8000814 <main+0x11c>)
 800072a:	f005 f821 	bl	8005770 <HAL_TIM_Encoder_Start>

    OLED_NewFrame();
 800072e:	f000 f95d 	bl	80009ec <OLED_NewFrame>
    OLED_DrawImage((128 - (OLED_KeyVerseImg.w)) / 2, 0, &OLED_KeyVerseImg, OLED_COLOR_NORMAL);
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <main+0x120>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800073a:	0fda      	lsrs	r2, r3, #31
 800073c:	4413      	add	r3, r2
 800073e:	105b      	asrs	r3, r3, #1
 8000740:	b2d8      	uxtb	r0, r3
 8000742:	2300      	movs	r3, #0
 8000744:	4a34      	ldr	r2, [pc, #208]	@ (8000818 <main+0x120>)
 8000746:	2100      	movs	r1, #0
 8000748:	f000 fb1d 	bl	8000d86 <OLED_DrawImage>
    OLED_ShowFrame();
 800074c:	f000 f95a 	bl	8000a04 <OLED_ShowFrame>

	  encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 8000750:	4b30      	ldr	r3, [pc, #192]	@ (8000814 <main+0x11c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000756:	80fb      	strh	r3, [r7, #6]
	  getColorFromEncoder(encoder_value, &r, &g, &b);
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	b2d8      	uxtb	r0, r3
 800075c:	1cfb      	adds	r3, r7, #3
 800075e:	1d3a      	adds	r2, r7, #4
 8000760:	1d79      	adds	r1, r7, #5
 8000762:	f000 feeb 	bl	800153c <getColorFromEncoder>
	  WS2812_SetAll(r, g, b);
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	7939      	ldrb	r1, [r7, #4]
 800076a:	78fa      	ldrb	r2, [r7, #3]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fe37 	bl	80013e0 <WS2812_SetAll>
	  WS2812_Update();
 8000772:	f000 fe53 	bl	800141c <WS2812_Update>
	  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	@ 0x64
 8000778:	f000 fff4 	bl	8001764 <HAL_Delay>
>>>>>>> 2814753 (long press added)
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (status == 0)
<<<<<<< HEAD
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <main+0x124>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <main+0x92>
=======
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <main+0x124>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <main+0x92>
>>>>>>> 2814753 (long press added)
	  {
		  /*status0 module*/
		  	  /* scan keypad module*/
		  	  ScanKeypad();
<<<<<<< HEAD
 80007f8:	f7ff fdc2 	bl	8000380 <ScanKeypad>
 80007fc:	e7f8      	b.n	80007f0 <main+0x84>
	  }
	  else if (status == 1)
 80007fe:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <main+0x124>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d127      	bne.n	8000856 <main+0xea>
=======
 8000784:	f7ff fdfc 	bl	8000380 <ScanKeypad>
 8000788:	e7f8      	b.n	800077c <main+0x84>
	  }
	  else if (status == 1)
 800078a:	4b24      	ldr	r3, [pc, #144]	@ (800081c <main+0x124>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d127      	bne.n	80007e2 <main+0xea>
>>>>>>> 2814753 (long press added)
	  {
		  /*status1 module*/
		  /*status1 ws2812 module*/
		  encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
<<<<<<< HEAD
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <main+0x11c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080c:	80fb      	strh	r3, [r7, #6]
		  getColorFromEncoder(encoder_value, &r, &g, &b);
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	b2d8      	uxtb	r0, r3
 8000812:	1cfb      	adds	r3, r7, #3
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	1d79      	adds	r1, r7, #5
 8000818:	f000 feca 	bl	80015b0 <getColorFromEncoder>
		  WS2812_SetAll(r, g, b);
 800081c:	797b      	ldrb	r3, [r7, #5]
 800081e:	7939      	ldrb	r1, [r7, #4]
 8000820:	78fa      	ldrb	r2, [r7, #3]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fe16 	bl	8001454 <WS2812_SetAll>
		  WS2812_Update();
 8000828:	f000 fe32 	bl	8001490 <WS2812_Update>
		  HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 ffd3 	bl	80017d8 <HAL_Delay>
		  /*status2 OLED module*/
		  OLED_NewFrame();
 8000832:	f000 f915 	bl	8000a60 <OLED_NewFrame>
//	  	  OLED_ShowNum(0, 0, 1, &font16x16, OLED_COLOR_NORMAL); // 中文、英文、符号混合显示
		  OLED_DrawImage((128 - (logoImg.w)) / 2, 0, &logoImg, OLED_COLOR_NORMAL);
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <main+0x128>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800083e:	0fda      	lsrs	r2, r3, #31
 8000840:	4413      	add	r3, r2
 8000842:	105b      	asrs	r3, r3, #1
 8000844:	b2d8      	uxtb	r0, r3
 8000846:	2300      	movs	r3, #0
 8000848:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <main+0x128>)
 800084a:	2100      	movs	r1, #0
 800084c:	f000 fad5 	bl	8000dfa <OLED_DrawImage>
		  OLED_ShowFrame();
 8000850:	f000 f912 	bl	8000a78 <OLED_ShowFrame>
 8000854:	e7cc      	b.n	80007f0 <main+0x84>
	  }
	  else if (status == 2)
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <main+0x124>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d1c8      	bne.n	80007f0 <main+0x84>
	  {
		  OLED_NewFrame();
 800085e:	f000 f8ff 	bl	8000a60 <OLED_NewFrame>
//		  OLED_ShowNum(0, 0, 2, &font16x16, OLED_COLOR_NORMAL); // 中文、英文、符号混合显示
		  OLED_DrawImage((128 - (OLED_KeyVerseImg.w)) / 2, 0, &OLED_KeyVerseImg, OLED_COLOR_NORMAL);
 8000862:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <main+0x120>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800086a:	0fda      	lsrs	r2, r3, #31
 800086c:	4413      	add	r3, r2
 800086e:	105b      	asrs	r3, r3, #1
 8000870:	b2d8      	uxtb	r0, r3
 8000872:	2300      	movs	r3, #0
 8000874:	4a05      	ldr	r2, [pc, #20]	@ (800088c <main+0x120>)
 8000876:	2100      	movs	r1, #0
 8000878:	f000 fabf 	bl	8000dfa <OLED_DrawImage>
		  OLED_ShowFrame();
 800087c:	f000 f8fc 	bl	8000a78 <OLED_ShowFrame>

		  status = 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <main+0x124>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	  if (status == 0)
 8000886:	e7b3      	b.n	80007f0 <main+0x84>
 8000888:	2000069c 	.word	0x2000069c
 800088c:	0800aed4 	.word	0x0800aed4
 8000890:	20000210 	.word	0x20000210
 8000894:	0800b2dc 	.word	0x0800b2dc

08000898 <SystemClock_Config>:
=======
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <main+0x11c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000798:	80fb      	strh	r3, [r7, #6]
		  getColorFromEncoder(encoder_value, &r, &g, &b);
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	b2d8      	uxtb	r0, r3
 800079e:	1cfb      	adds	r3, r7, #3
 80007a0:	1d3a      	adds	r2, r7, #4
 80007a2:	1d79      	adds	r1, r7, #5
 80007a4:	f000 feca 	bl	800153c <getColorFromEncoder>
		  WS2812_SetAll(r, g, b);
 80007a8:	797b      	ldrb	r3, [r7, #5]
 80007aa:	7939      	ldrb	r1, [r7, #4]
 80007ac:	78fa      	ldrb	r2, [r7, #3]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fe16 	bl	80013e0 <WS2812_SetAll>
		  WS2812_Update();
 80007b4:	f000 fe32 	bl	800141c <WS2812_Update>
		  HAL_Delay(100);
 80007b8:	2064      	movs	r0, #100	@ 0x64
 80007ba:	f000 ffd3 	bl	8001764 <HAL_Delay>
		  /*status2 OLED module*/
		  OLED_NewFrame();
 80007be:	f000 f915 	bl	80009ec <OLED_NewFrame>
//	  	  OLED_ShowNum(0, 0, 1, &font16x16, OLED_COLOR_NORMAL); // 中文、英文、符号混合显示
		  OLED_DrawImage((128 - (logoImg.w)) / 2, 0, &logoImg, OLED_COLOR_NORMAL);
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <main+0x128>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80007ca:	0fda      	lsrs	r2, r3, #31
 80007cc:	4413      	add	r3, r2
 80007ce:	105b      	asrs	r3, r3, #1
 80007d0:	b2d8      	uxtb	r0, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <main+0x128>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	f000 fad5 	bl	8000d86 <OLED_DrawImage>
		  OLED_ShowFrame();
 80007dc:	f000 f912 	bl	8000a04 <OLED_ShowFrame>
 80007e0:	e7cc      	b.n	800077c <main+0x84>
	  }
	  else if (status == 2)
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <main+0x124>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d1c8      	bne.n	800077c <main+0x84>
	  {
		  OLED_NewFrame();
 80007ea:	f000 f8ff 	bl	80009ec <OLED_NewFrame>
//		  OLED_ShowNum(0, 0, 2, &font16x16, OLED_COLOR_NORMAL); // 中文、英文、符号混合显示
		  OLED_DrawImage((128 - (OLED_KeyVerseImg.w)) / 2, 0, &OLED_KeyVerseImg, OLED_COLOR_NORMAL);
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <main+0x120>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80007f6:	0fda      	lsrs	r2, r3, #31
 80007f8:	4413      	add	r3, r2
 80007fa:	105b      	asrs	r3, r3, #1
 80007fc:	b2d8      	uxtb	r0, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <main+0x120>)
 8000802:	2100      	movs	r1, #0
 8000804:	f000 fabf 	bl	8000d86 <OLED_DrawImage>
		  OLED_ShowFrame();
 8000808:	f000 f8fc 	bl	8000a04 <OLED_ShowFrame>

		  status = 0;
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <main+0x124>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	  if (status == 0)
 8000812:	e7b3      	b.n	800077c <main+0x84>
 8000814:	200007a4 	.word	0x200007a4
 8000818:	0800ae60 	.word	0x0800ae60
 800081c:	20000318 	.word	0x20000318
 8000820:	0800b268 	.word	0x0800b268

08000824 <SystemClock_Config>:
>>>>>>> 2814753 (long press added)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	@ 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	2228      	movs	r2, #40	@ 0x28
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f00a f8b0 	bl	800aa0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
=======
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082e:	2228      	movs	r2, #40	@ 0x28
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f00a f8b0 	bl	800a998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
>>>>>>> 2814753 (long press added)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fec6 	bl	8004680 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008fa:	f000 f827 	bl	800094c <Error_Handler>
=======
 8000854:	2301      	movs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000870:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fec6 	bl	800460c <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000886:	f000 f827 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80008fe:	230f      	movs	r3, #15
 8000900:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f004 f932 	bl	8004b84 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000926:	f000 f811 	bl	800094c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800092a:	2310      	movs	r3, #16
 800092c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fa9f 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000940:	f000 f804 	bl	800094c <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	@ 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Error_Handler>:
=======
 800088a:	230f      	movs	r3, #15
 800088c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2102      	movs	r1, #2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 f932 	bl	8004b10 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008b2:	f000 f811 	bl	80008d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008b6:	2310      	movs	r3, #16
 80008b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fa9f 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008cc:	f000 f804 	bl	80008d8 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	@ 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Error_Handler>:
>>>>>>> 2814753 (long press added)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
=======
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
=======
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <OLED_Send>:
=======
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <OLED_Send>:
>>>>>>> 2814753 (long press added)
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
<<<<<<< HEAD
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	b29b      	uxth	r3, r3
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	9200      	str	r2, [sp, #0]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	2178      	movs	r1, #120	@ 0x78
 8000972:	4803      	ldr	r0, [pc, #12]	@ (8000980 <OLED_Send+0x28>)
 8000974:	f001 fde2 	bl	800253c <HAL_I2C_Master_Transmit>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000188 	.word	0x20000188

08000984 <OLED_SendCmd>:
=======
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	2178      	movs	r1, #120	@ 0x78
 80008fe:	4803      	ldr	r0, [pc, #12]	@ (800090c <OLED_Send+0x28>)
 8000900:	f001 fde2 	bl	80024c8 <HAL_I2C_Master_Transmit>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000188 	.word	0x20000188

08000910 <OLED_SendCmd>:
>>>>>>> 2814753 (long press added)

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
<<<<<<< HEAD
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <OLED_SendCmd+0x20>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000994:	2102      	movs	r1, #2
 8000996:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <OLED_SendCmd+0x20>)
 8000998:	f7ff ffde 	bl	8000958 <OLED_Send>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000614 	.word	0x20000614

080009a8 <OLED_Init>:
=======
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <OLED_SendCmd+0x20>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000920:	2102      	movs	r1, #2
 8000922:	4803      	ldr	r0, [pc, #12]	@ (8000930 <OLED_SendCmd+0x20>)
 8000924:	f7ff ffde 	bl	80008e4 <OLED_Send>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000071c 	.word	0x2000071c

08000934 <OLED_Init>:
>>>>>>> 2814753 (long press added)
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
<<<<<<< HEAD
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80009ac:	20ae      	movs	r0, #174	@ 0xae
 80009ae:	f7ff ffe9 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 80009b2:	2020      	movs	r0, #32
 80009b4:	f7ff ffe6 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80009b8:	2010      	movs	r0, #16
 80009ba:	f7ff ffe3 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 80009be:	20b0      	movs	r0, #176	@ 0xb0
 80009c0:	f7ff ffe0 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 80009c4:	20c8      	movs	r0, #200	@ 0xc8
 80009c6:	f7ff ffdd 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ffda 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80009d0:	2010      	movs	r0, #16
 80009d2:	f7ff ffd7 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80009d6:	2040      	movs	r0, #64	@ 0x40
 80009d8:	f7ff ffd4 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80009dc:	2081      	movs	r0, #129	@ 0x81
 80009de:	f7ff ffd1 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80009e2:	20df      	movs	r0, #223	@ 0xdf
 80009e4:	f7ff ffce 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80009e8:	20a1      	movs	r0, #161	@ 0xa1
 80009ea:	f7ff ffcb 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80009ee:	20a6      	movs	r0, #166	@ 0xa6
 80009f0:	f7ff ffc8 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80009f4:	20a8      	movs	r0, #168	@ 0xa8
 80009f6:	f7ff ffc5 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80009fa:	203f      	movs	r0, #63	@ 0x3f
 80009fc:	f7ff ffc2 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8000a00:	20a4      	movs	r0, #164	@ 0xa4
 8000a02:	f7ff ffbf 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000a06:	20d3      	movs	r0, #211	@ 0xd3
 8000a08:	f7ff ffbc 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff ffb9 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8000a12:	20d5      	movs	r0, #213	@ 0xd5
 8000a14:	f7ff ffb6 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8000a18:	20f0      	movs	r0, #240	@ 0xf0
 8000a1a:	f7ff ffb3 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8000a1e:	20d9      	movs	r0, #217	@ 0xd9
 8000a20:	f7ff ffb0 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8000a24:	2022      	movs	r0, #34	@ 0x22
 8000a26:	f7ff ffad 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8000a2a:	20da      	movs	r0, #218	@ 0xda
 8000a2c:	f7ff ffaa 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000a30:	2012      	movs	r0, #18
 8000a32:	f7ff ffa7 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000a36:	20db      	movs	r0, #219	@ 0xdb
 8000a38:	f7ff ffa4 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f7ff ffa1 	bl	8000984 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000a42:	208d      	movs	r0, #141	@ 0x8d
 8000a44:	f7ff ff9e 	bl	8000984 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f7ff ff9b 	bl	8000984 <OLED_SendCmd>

  OLED_NewFrame();
 8000a4e:	f000 f807 	bl	8000a60 <OLED_NewFrame>
  OLED_ShowFrame();
 8000a52:	f000 f811 	bl	8000a78 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000a56:	20af      	movs	r0, #175	@ 0xaf
 8000a58:	f7ff ff94 	bl	8000984 <OLED_SendCmd>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <OLED_NewFrame>:
=======
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000938:	20ae      	movs	r0, #174	@ 0xae
 800093a:	f7ff ffe9 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 800093e:	2020      	movs	r0, #32
 8000940:	f7ff ffe6 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000944:	2010      	movs	r0, #16
 8000946:	f7ff ffe3 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800094a:	20b0      	movs	r0, #176	@ 0xb0
 800094c:	f7ff ffe0 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000950:	20c8      	movs	r0, #200	@ 0xc8
 8000952:	f7ff ffdd 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ffda 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800095c:	2010      	movs	r0, #16
 800095e:	f7ff ffd7 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8000962:	2040      	movs	r0, #64	@ 0x40
 8000964:	f7ff ffd4 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8000968:	2081      	movs	r0, #129	@ 0x81
 800096a:	f7ff ffd1 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 800096e:	20df      	movs	r0, #223	@ 0xdf
 8000970:	f7ff ffce 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8000974:	20a1      	movs	r0, #161	@ 0xa1
 8000976:	f7ff ffcb 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 800097a:	20a6      	movs	r0, #166	@ 0xa6
 800097c:	f7ff ffc8 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8000980:	20a8      	movs	r0, #168	@ 0xa8
 8000982:	f7ff ffc5 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8000986:	203f      	movs	r0, #63	@ 0x3f
 8000988:	f7ff ffc2 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 800098c:	20a4      	movs	r0, #164	@ 0xa4
 800098e:	f7ff ffbf 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000992:	20d3      	movs	r0, #211	@ 0xd3
 8000994:	f7ff ffbc 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ffb9 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 800099e:	20d5      	movs	r0, #213	@ 0xd5
 80009a0:	f7ff ffb6 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80009a4:	20f0      	movs	r0, #240	@ 0xf0
 80009a6:	f7ff ffb3 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80009aa:	20d9      	movs	r0, #217	@ 0xd9
 80009ac:	f7ff ffb0 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80009b0:	2022      	movs	r0, #34	@ 0x22
 80009b2:	f7ff ffad 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80009b6:	20da      	movs	r0, #218	@ 0xda
 80009b8:	f7ff ffaa 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80009bc:	2012      	movs	r0, #18
 80009be:	f7ff ffa7 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80009c2:	20db      	movs	r0, #219	@ 0xdb
 80009c4:	f7ff ffa4 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 80009c8:	2020      	movs	r0, #32
 80009ca:	f7ff ffa1 	bl	8000910 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80009ce:	208d      	movs	r0, #141	@ 0x8d
 80009d0:	f7ff ff9e 	bl	8000910 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80009d4:	2014      	movs	r0, #20
 80009d6:	f7ff ff9b 	bl	8000910 <OLED_SendCmd>

  OLED_NewFrame();
 80009da:	f000 f807 	bl	80009ec <OLED_NewFrame>
  OLED_ShowFrame();
 80009de:	f000 f811 	bl	8000a04 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80009e2:	20af      	movs	r0, #175	@ 0xaf
 80009e4:	f7ff ff94 	bl	8000910 <OLED_SendCmd>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <OLED_NewFrame>:
>>>>>>> 2814753 (long press added)

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
<<<<<<< HEAD
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000a64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <OLED_NewFrame+0x14>)
 8000a6c:	f009 ffce 	bl	800aa0c <memset>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000214 	.word	0x20000214

08000a78 <OLED_ShowFrame>:
=======
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80009f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f4:	2100      	movs	r1, #0
 80009f6:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <OLED_NewFrame+0x14>)
 80009f8:	f009 ffce 	bl	800a998 <memset>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000031c 	.word	0x2000031c

08000a04 <OLED_ShowFrame>:
>>>>>>> 2814753 (long press added)
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
<<<<<<< HEAD
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <OLED_ShowFrame+0x5c>)
 8000a80:	2240      	movs	r2, #64	@ 0x40
 8000a82:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	e01b      	b.n	8000ac2 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	3b50      	subs	r3, #80	@ 0x50
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff77 	bl	8000984 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff ff74 	bl	8000984 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f7ff ff71 	bl	8000984 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <OLED_ShowFrame+0x60>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	01db      	lsls	r3, r3, #7
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <OLED_ShowFrame+0x64>)
 8000aaa:	4413      	add	r3, r2
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f009 ffd8 	bl	800aa64 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000ab4:	2181      	movs	r1, #129	@ 0x81
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <OLED_ShowFrame+0x5c>)
 8000ab8:	f7ff ff4e 	bl	8000958 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d9e0      	bls.n	8000a8a <OLED_ShowFrame+0x12>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000618 	.word	0x20000618
 8000ad8:	20000619 	.word	0x20000619
 8000adc:	20000214 	.word	0x20000214

08000ae0 <OLED_SetByte_Fine>:
=======
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <OLED_ShowFrame+0x5c>)
 8000a0c:	2240      	movs	r2, #64	@ 0x40
 8000a0e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	e01b      	b.n	8000a4e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	3b50      	subs	r3, #80	@ 0x50
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff77 	bl	8000910 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff74 	bl	8000910 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000a28:	2010      	movs	r0, #16
 8000a2a:	f7ff ff71 	bl	8000910 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000a2e:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <OLED_ShowFrame+0x60>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4a0c      	ldr	r2, [pc, #48]	@ (8000a68 <OLED_ShowFrame+0x64>)
 8000a36:	4413      	add	r3, r2
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f009 ffd8 	bl	800a9f0 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000a40:	2181      	movs	r1, #129	@ 0x81
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <OLED_ShowFrame+0x5c>)
 8000a44:	f7ff ff4e 	bl	80008e4 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	d9e0      	bls.n	8000a16 <OLED_ShowFrame+0x12>
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000720 	.word	0x20000720
 8000a64:	20000721 	.word	0x20000721
 8000a68:	2000031c 	.word	0x2000031c

08000a6c <OLED_SetByte_Fine>:
>>>>>>> 2814753 (long press added)
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
<<<<<<< HEAD
 8000ae0:	b490      	push	{r4, r7}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	4603      	mov	r3, r0
 8000af4:	71bb      	strb	r3, [r7, #6]
 8000af6:	460b      	mov	r3, r1
 8000af8:	717b      	strb	r3, [r7, #5]
 8000afa:	4613      	mov	r3, r2
 8000afc:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d85f      	bhi.n	8000bc4 <OLED_SetByte_Fine+0xe4>
 8000b04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db5b      	blt.n	8000bc4 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8000b0c:	7d3b      	ldrb	r3, [r7, #20]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8000b12:	797b      	ldrb	r3, [r7, #5]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8000b18:	7c3b      	ldrb	r3, [r7, #16]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	22ff      	movs	r2, #255	@ 0xff
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b25a      	sxtb	r2, r3
 8000b2c:	793b      	ldrb	r3, [r7, #4]
 8000b2e:	f1c3 0308 	rsb	r3, r3, #8
 8000b32:	21ff      	movs	r1, #255	@ 0xff
 8000b34:	fa41 f303 	asr.w	r3, r1, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <OLED_SetByte_Fine+0xf0>)
 8000b42:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	4922      	ldr	r1, [pc, #136]	@ (8000bd4 <OLED_SetByte_Fine+0xf4>)
 8000b4a:	01d2      	lsls	r2, r2, #7
 8000b4c:	440a      	add	r2, r1
 8000b4e:	4413      	add	r3, r2
 8000b50:	7818      	ldrb	r0, [r3, #0]
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <OLED_SetByte_Fine+0xf0>)
 8000b54:	7819      	ldrb	r1, [r3, #0]
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	4001      	ands	r1, r0
 8000b5c:	b2c8      	uxtb	r0, r1
 8000b5e:	491d      	ldr	r1, [pc, #116]	@ (8000bd4 <OLED_SetByte_Fine+0xf4>)
 8000b60:	01d2      	lsls	r2, r2, #7
 8000b62:	440a      	add	r2, r1
 8000b64:	4413      	add	r3, r2
 8000b66:	4602      	mov	r2, r0
 8000b68:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000b6a:	7c3b      	ldrb	r3, [r7, #16]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	22ff      	movs	r2, #255	@ 0xff
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25a      	sxtb	r2, r3
 8000b7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	793b      	ldrb	r3, [r7, #4]
 8000b84:	f1c3 0308 	rsb	r3, r3, #8
 8000b88:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8000b8c:	fa41 f303 	asr.w	r3, r1, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	4013      	ands	r3, r2
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <OLED_SetByte_Fine+0xf0>)
 8000b9a:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <OLED_SetByte_Fine+0xf4>)
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	440a      	add	r2, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7818      	ldrb	r0, [r3, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <OLED_SetByte_Fine+0xf0>)
 8000bac:	7819      	ldrb	r1, [r3, #0]
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	4301      	orrs	r1, r0
 8000bb4:	b2c8      	uxtb	r0, r1
 8000bb6:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <OLED_SetByte_Fine+0xf4>)
 8000bb8:	01d2      	lsls	r2, r2, #7
 8000bba:	440a      	add	r2, r1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e000      	b.n	8000bc6 <OLED_SetByte_Fine+0xe6>
    return;
 8000bc4:	bf00      	nop
=======
 8000a6c:	b490      	push	{r4, r7}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	460b      	mov	r3, r1
 8000a84:	717b      	strb	r3, [r7, #5]
 8000a86:	4613      	mov	r3, r2
 8000a88:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d85f      	bhi.n	8000b50 <OLED_SetByte_Fine+0xe4>
 8000a90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db5b      	blt.n	8000b50 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8000a98:	7d3b      	ldrb	r3, [r7, #20]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8000aa4:	7c3b      	ldrb	r3, [r7, #16]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	22ff      	movs	r2, #255	@ 0xff
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	793b      	ldrb	r3, [r7, #4]
 8000aba:	f1c3 0308 	rsb	r3, r3, #8
 8000abe:	21ff      	movs	r1, #255	@ 0xff
 8000ac0:	fa41 f303 	asr.w	r3, r1, r3
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <OLED_SetByte_Fine+0xf0>)
 8000ace:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	4922      	ldr	r1, [pc, #136]	@ (8000b60 <OLED_SetByte_Fine+0xf4>)
 8000ad6:	01d2      	lsls	r2, r2, #7
 8000ad8:	440a      	add	r2, r1
 8000ada:	4413      	add	r3, r2
 8000adc:	7818      	ldrb	r0, [r3, #0]
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <OLED_SetByte_Fine+0xf0>)
 8000ae0:	7819      	ldrb	r1, [r3, #0]
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	4001      	ands	r1, r0
 8000ae8:	b2c8      	uxtb	r0, r1
 8000aea:	491d      	ldr	r1, [pc, #116]	@ (8000b60 <OLED_SetByte_Fine+0xf4>)
 8000aec:	01d2      	lsls	r2, r2, #7
 8000aee:	440a      	add	r2, r1
 8000af0:	4413      	add	r3, r2
 8000af2:	4602      	mov	r2, r0
 8000af4:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000af6:	7c3b      	ldrb	r3, [r7, #16]
 8000af8:	3301      	adds	r3, #1
 8000afa:	22ff      	movs	r2, #255	@ 0xff
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	b25a      	sxtb	r2, r3
 8000b06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	b25a      	sxtb	r2, r3
 8000b0e:	793b      	ldrb	r3, [r7, #4]
 8000b10:	f1c3 0308 	rsb	r3, r3, #8
 8000b14:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8000b18:	fa41 f303 	asr.w	r3, r1, r3
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <OLED_SetByte_Fine+0xf0>)
 8000b26:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8000b28:	79fa      	ldrb	r2, [r7, #7]
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	490c      	ldr	r1, [pc, #48]	@ (8000b60 <OLED_SetByte_Fine+0xf4>)
 8000b2e:	01d2      	lsls	r2, r2, #7
 8000b30:	440a      	add	r2, r1
 8000b32:	4413      	add	r3, r2
 8000b34:	7818      	ldrb	r0, [r3, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <OLED_SetByte_Fine+0xf0>)
 8000b38:	7819      	ldrb	r1, [r3, #0]
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	4301      	orrs	r1, r0
 8000b40:	b2c8      	uxtb	r0, r1
 8000b42:	4907      	ldr	r1, [pc, #28]	@ (8000b60 <OLED_SetByte_Fine+0xf4>)
 8000b44:	01d2      	lsls	r2, r2, #7
 8000b46:	440a      	add	r2, r1
 8000b48:	4413      	add	r3, r2
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e000      	b.n	8000b52 <OLED_SetByte_Fine+0xe6>
    return;
 8000b50:	bf00      	nop
>>>>>>> 2814753 (long press added)
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
<<<<<<< HEAD
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc90      	pop	{r4, r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000699 	.word	0x20000699
 8000bd4:	20000214 	.word	0x20000214

08000bd8 <OLED_SetBits_Fine>:
=======
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc90      	pop	{r4, r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200007a1 	.word	0x200007a1
 8000b60:	2000031c 	.word	0x2000031c

08000b64 <OLED_SetBits_Fine>:
>>>>>>> 2814753 (long press added)
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
<<<<<<< HEAD
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4604      	mov	r4, r0
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4623      	mov	r3, r4
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	4603      	mov	r3, r0
 8000bec:	71bb      	strb	r3, [r7, #6]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	717b      	strb	r3, [r7, #5]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8000c04:	7bba      	ldrb	r2, [r7, #14]
 8000c06:	793b      	ldrb	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	dd29      	ble.n	8000c62 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000c0e:	797a      	ldrb	r2, [r7, #5]
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	7bbc      	ldrb	r4, [r7, #14]
 8000c1a:	79f9      	ldrb	r1, [r7, #7]
 8000c1c:	7bf8      	ldrb	r0, [r7, #15]
 8000c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2307      	movs	r3, #7
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4623      	mov	r3, r4
 8000c2a:	f7ff ff59 	bl	8000ae0 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2d8      	uxtb	r0, r3
 8000c34:	797a      	ldrb	r2, [r7, #5]
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	f1c3 0308 	rsb	r3, r3, #8
 8000c3c:	fa42 f303 	asr.w	r3, r2, r3
 8000c40:	b2dc      	uxtb	r4, r3
 8000c42:	793a      	ldrb	r2, [r7, #4]
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3b09      	subs	r3, #9
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	79f9      	ldrb	r1, [r7, #7]
 8000c50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4622      	mov	r2, r4
 8000c5c:	f7ff ff40 	bl	8000ae0 <OLED_SetByte_Fine>
=======
 8000b64:	b5b0      	push	{r4, r5, r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4623      	mov	r3, r4
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	4603      	mov	r3, r0
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	717b      	strb	r3, [r7, #5]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	08db      	lsrs	r3, r3, #3
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8000b90:	7bba      	ldrb	r2, [r7, #14]
 8000b92:	793b      	ldrb	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	dd29      	ble.n	8000bee <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000b9a:	797a      	ldrb	r2, [r7, #5]
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	7bbc      	ldrb	r4, [r7, #14]
 8000ba6:	79f9      	ldrb	r1, [r7, #7]
 8000ba8:	7bf8      	ldrb	r0, [r7, #15]
 8000baa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	f7ff ff59 	bl	8000a6c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2d8      	uxtb	r0, r3
 8000bc0:	797a      	ldrb	r2, [r7, #5]
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	f1c3 0308 	rsb	r3, r3, #8
 8000bc8:	fa42 f303 	asr.w	r3, r2, r3
 8000bcc:	b2dc      	uxtb	r4, r3
 8000bce:	793a      	ldrb	r2, [r7, #4]
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	3b09      	subs	r3, #9
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	79f9      	ldrb	r1, [r7, #7]
 8000bdc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	4622      	mov	r2, r4
 8000be8:	f7ff ff40 	bl	8000a6c <OLED_SetByte_Fine>
>>>>>>> 2814753 (long press added)
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
<<<<<<< HEAD
 8000c60:	e015      	b.n	8000c8e <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000c62:	797a      	ldrb	r2, [r7, #5]
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	b2dc      	uxtb	r4, r3
 8000c6c:	7bba      	ldrb	r2, [r7, #14]
 8000c6e:	793b      	ldrb	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	7bbd      	ldrb	r5, [r7, #14]
 8000c7a:	79f9      	ldrb	r1, [r7, #7]
 8000c7c:	7bf8      	ldrb	r0, [r7, #15]
 8000c7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	462b      	mov	r3, r5
 8000c88:	4622      	mov	r2, r4
 8000c8a:	f7ff ff29 	bl	8000ae0 <OLED_SetByte_Fine>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bdb0      	pop	{r4, r5, r7, pc}

08000c96 <OLED_SetBits>:
=======
 8000bec:	e015      	b.n	8000c1a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000bee:	797a      	ldrb	r2, [r7, #5]
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	b2dc      	uxtb	r4, r3
 8000bf8:	7bba      	ldrb	r2, [r7, #14]
 8000bfa:	793b      	ldrb	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3b01      	subs	r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	7bbd      	ldrb	r5, [r7, #14]
 8000c06:	79f9      	ldrb	r1, [r7, #7]
 8000c08:	7bf8      	ldrb	r0, [r7, #15]
 8000c0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	462b      	mov	r3, r5
 8000c14:	4622      	mov	r2, r4
 8000c16:	f7ff ff29 	bl	8000a6c <OLED_SetByte_Fine>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bdb0      	pop	{r4, r5, r7, pc}

08000c22 <OLED_SetBits>:
>>>>>>> 2814753 (long press added)
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
<<<<<<< HEAD
 8000c96:	b590      	push	{r4, r7, lr}
 8000c98:	b087      	sub	sp, #28
 8000c9a:	af02      	add	r7, sp, #8
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71bb      	strb	r3, [r7, #6]
 8000cac:	460b      	mov	r3, r1
 8000cae:	717b      	strb	r3, [r7, #5]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000cc2:	797a      	ldrb	r2, [r7, #5]
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	7bbc      	ldrb	r4, [r7, #14]
 8000cce:	79f9      	ldrb	r1, [r7, #7]
 8000cd0:	7bf8      	ldrb	r0, [r7, #15]
 8000cd2:	793b      	ldrb	r3, [r7, #4]
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	4623      	mov	r3, r4
 8000cdc:	f7ff ff00 	bl	8000ae0 <OLED_SetByte_Fine>
  if (bit)
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d014      	beq.n	8000d10 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2d8      	uxtb	r0, r3
 8000cec:	797a      	ldrb	r2, [r7, #5]
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	f1c3 0308 	rsb	r3, r3, #8
 8000cf4:	fa42 f303 	asr.w	r3, r2, r3
 8000cf8:	b2dc      	uxtb	r4, r3
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	79f9      	ldrb	r1, [r7, #7]
 8000d02:	793a      	ldrb	r2, [r7, #4]
 8000d04:	9201      	str	r2, [sp, #4]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4622      	mov	r2, r4
 8000d0c:	f7ff fee8 	bl	8000ae0 <OLED_SetByte_Fine>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd90      	pop	{r4, r7, pc}

08000d18 <OLED_SetBlock>:
=======
 8000c22:	b590      	push	{r4, r7, lr}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af02      	add	r7, sp, #8
 8000c28:	4604      	mov	r4, r0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4623      	mov	r3, r4
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4603      	mov	r3, r0
 8000c36:	71bb      	strb	r3, [r7, #6]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	717b      	strb	r3, [r7, #5]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000c4e:	797a      	ldrb	r2, [r7, #5]
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	7bbc      	ldrb	r4, [r7, #14]
 8000c5a:	79f9      	ldrb	r1, [r7, #7]
 8000c5c:	7bf8      	ldrb	r0, [r7, #15]
 8000c5e:	793b      	ldrb	r3, [r7, #4]
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2307      	movs	r3, #7
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4623      	mov	r3, r4
 8000c68:	f7ff ff00 	bl	8000a6c <OLED_SetByte_Fine>
  if (bit)
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d014      	beq.n	8000c9c <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2d8      	uxtb	r0, r3
 8000c78:	797a      	ldrb	r2, [r7, #5]
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	f1c3 0308 	rsb	r3, r3, #8
 8000c80:	fa42 f303 	asr.w	r3, r2, r3
 8000c84:	b2dc      	uxtb	r4, r3
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	793a      	ldrb	r2, [r7, #4]
 8000c90:	9201      	str	r2, [sp, #4]
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2300      	movs	r3, #0
 8000c96:	4622      	mov	r2, r4
 8000c98:	f7ff fee8 	bl	8000a6c <OLED_SetByte_Fine>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <OLED_SetBlock>:
>>>>>>> 2814753 (long press added)
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
<<<<<<< HEAD
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	603a      	str	r2, [r7, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000d36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e025      	b.n	8000d92 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
 8000d4a:	e01b      	b.n	8000d84 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	4413      	add	r3, r2
 8000d52:	b2d8      	uxtb	r0, r3
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b2dc      	uxtb	r4, r3
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	7bbb      	ldrb	r3, [r7, #14]
 8000d64:	7979      	ldrb	r1, [r7, #5]
 8000d66:	fb01 f303 	mul.w	r3, r1, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f7ff ff8c 	bl	8000c96 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73bb      	strb	r3, [r7, #14]
 8000d84:	7bba      	ldrb	r2, [r7, #14]
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3df      	bcc.n	8000d4c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3d5      	bcc.n	8000d46 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d028      	beq.n	8000df2 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	7b3a      	ldrb	r2, [r7, #12]
 8000da6:	b292      	uxth	r2, r2
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	737b      	strb	r3, [r7, #13]
 8000db2:	e01a      	b.n	8000dea <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000db4:	79fa      	ldrb	r2, [r7, #7]
 8000db6:	7b7b      	ldrb	r3, [r7, #13]
 8000db8:	4413      	add	r3, r2
 8000dba:	b2d8      	uxtb	r0, r3
 8000dbc:	7b3b      	ldrb	r3, [r7, #12]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2d9      	uxtb	r1, r3
 8000dc8:	893a      	ldrh	r2, [r7, #8]
 8000dca:	7b7b      	ldrb	r3, [r7, #13]
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	7afc      	ldrb	r4, [r7, #11]
 8000dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	4623      	mov	r3, r4
 8000de0:	f7ff fefa 	bl	8000bd8 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	3301      	adds	r3, #1
 8000de8:	737b      	strb	r3, [r7, #13]
 8000dea:	7b7a      	ldrb	r2, [r7, #13]
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d3e0      	bcc.n	8000db4 <OLED_SetBlock+0x9c>
=======
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	603a      	str	r2, [r7, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	71bb      	strb	r3, [r7, #6]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e025      	b.n	8000d1e <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73bb      	strb	r3, [r7, #14]
 8000cd6:	e01b      	b.n	8000d10 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	4413      	add	r3, r2
 8000cde:	b2d8      	uxtb	r0, r3
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2dc      	uxtb	r4, r3
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	7979      	ldrb	r1, [r7, #5]
 8000cf2:	fb01 f303 	mul.w	r3, r1, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d04:	4621      	mov	r1, r4
 8000d06:	f7ff ff8c 	bl	8000c22 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8000d0a:	7bbb      	ldrb	r3, [r7, #14]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	73bb      	strb	r3, [r7, #14]
 8000d10:	7bba      	ldrb	r2, [r7, #14]
 8000d12:	7b3b      	ldrb	r3, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d3df      	bcc.n	8000cd8 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	7bfa      	ldrb	r2, [r7, #15]
 8000d20:	797b      	ldrb	r3, [r7, #5]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3d5      	bcc.n	8000cd2 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8000d26:	7afb      	ldrb	r3, [r7, #11]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d028      	beq.n	8000d7e <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000d2c:	797b      	ldrb	r3, [r7, #5]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	7b3a      	ldrb	r2, [r7, #12]
 8000d32:	b292      	uxth	r2, r2
 8000d34:	fb02 f303 	mul.w	r3, r2, r3
 8000d38:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	737b      	strb	r3, [r7, #13]
 8000d3e:	e01a      	b.n	8000d76 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	4413      	add	r3, r2
 8000d46:	b2d8      	uxtb	r0, r3
 8000d48:	7b3b      	ldrb	r3, [r7, #12]
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	4413      	add	r3, r2
 8000d52:	b2d9      	uxtb	r1, r3
 8000d54:	893a      	ldrh	r2, [r7, #8]
 8000d56:	7b7b      	ldrb	r3, [r7, #13]
 8000d58:	4413      	add	r3, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	7afc      	ldrb	r4, [r7, #11]
 8000d64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	f7ff fefa 	bl	8000b64 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	3301      	adds	r3, #1
 8000d74:	737b      	strb	r3, [r7, #13]
 8000d76:	7b7a      	ldrb	r2, [r7, #13]
 8000d78:	797b      	ldrb	r3, [r7, #5]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3e0      	bcc.n	8000d40 <OLED_SetBlock+0x9c>
>>>>>>> 2814753 (long press added)
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
<<<<<<< HEAD
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}

08000dfa <OLED_DrawImage>:
=======
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}

08000d86 <OLED_DrawImage>:
>>>>>>> 2814753 (long press added)
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
<<<<<<< HEAD
 8000dfa:	b5b0      	push	{r4, r5, r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af02      	add	r7, sp, #8
 8000e00:	603a      	str	r2, [r7, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	71bb      	strb	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685c      	ldr	r4, [r3, #4]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	781d      	ldrb	r5, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	79b9      	ldrb	r1, [r7, #6]
 8000e1e:	79f8      	ldrb	r0, [r7, #7]
 8000e20:	797a      	ldrb	r2, [r7, #5]
 8000e22:	9201      	str	r2, [sp, #4]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	462b      	mov	r3, r5
 8000e28:	4622      	mov	r2, r4
 8000e2a:	f7ff ff75 	bl	8000d18 <OLED_SetBlock>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e38 <HAL_MspInit>:
=======
 8000d86:	b5b0      	push	{r4, r5, r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af02      	add	r7, sp, #8
 8000d8c:	603a      	str	r2, [r7, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	460b      	mov	r3, r1
 8000d96:	71bb      	strb	r3, [r7, #6]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685c      	ldr	r4, [r3, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	781d      	ldrb	r5, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	785b      	ldrb	r3, [r3, #1]
 8000da8:	79b9      	ldrb	r1, [r7, #6]
 8000daa:	79f8      	ldrb	r0, [r7, #7]
 8000dac:	797a      	ldrb	r2, [r7, #5]
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	462b      	mov	r3, r5
 8000db4:	4622      	mov	r2, r4
 8000db6:	f7ff ff75 	bl	8000ca4 <OLED_SetBlock>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000dc4 <HAL_MspInit>:
>>>>>>> 2814753 (long press added)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
=======
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
=======
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
>>>>>>> 2814753 (long press added)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]
=======
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_MspInit+0x60>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_MspInit+0x60>)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6053      	str	r3, [r2, #4]
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <NMI_Handler>:
=======
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000

08000e28 <NMI_Handler>:
>>>>>>> 2814753 (long press added)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
=======
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:
=======
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <NMI_Handler+0x4>

08000e30 <HardFault_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
=======
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:
=======
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
=======
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:
=======
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <MemManage_Handler+0x4>

08000e40 <BusFault_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
=======
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:
=======
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
=======
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec4 <SVC_Handler>:
=======
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e50 <SVC_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
=======
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:
=======
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
=======
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:
=======
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <PendSV_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
=======
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:
=======
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
=======
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000eec:	f000 fc58 	bl	80017a0 <HAL_IncTick>
=======
 8000e78:	f000 fc58 	bl	800172c <HAL_IncTick>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA1_Channel6_IRQHandler>:
=======
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <DMA1_Channel6_IRQHandler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
<<<<<<< HEAD
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
=======
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
<<<<<<< HEAD
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel6_IRQHandler+0x10>)
 8000efa:	f000 fed1 	bl	8001ca0 <HAL_DMA_IRQHandler>
=======
 8000e84:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <DMA1_Channel6_IRQHandler+0x10>)
 8000e86:	f000 fed1 	bl	8001c2c <HAL_DMA_IRQHandler>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
<<<<<<< HEAD
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000774 	.word	0x20000774

08000f08 <USB_LP_CAN1_RX0_IRQHandler>:
=======
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000087c 	.word	0x2000087c

08000e94 <USB_LP_CAN1_RX0_IRQHandler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
=======
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< HEAD
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f0e:	f001 ff89 	bl	8002e24 <HAL_PCD_IRQHandler>
=======
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e9a:	f001 ff89 	bl	8002db0 <HAL_PCD_IRQHandler>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000fec 	.word	0x20000fec

08000f1c <EXTI9_5_IRQHandler>:
=======
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200010f4 	.word	0x200010f4

08000ea8 <EXTI9_5_IRQHandler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
<<<<<<< HEAD
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	status = (status + 1) % 3;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <EXTI9_5_IRQHandler+0x2c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <EXTI9_5_IRQHandler+0x30>)
 8000f28:	fb83 3102 	smull	r3, r1, r3, r2
 8000f2c:	17d3      	asrs	r3, r2, #31
 8000f2e:	1ac9      	subs	r1, r1, r3
 8000f30:	460b      	mov	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	440b      	add	r3, r1
 8000f36:	1ad1      	subs	r1, r2, r3
 8000f38:	b2ca      	uxtb	r2, r1
 8000f3a:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <EXTI9_5_IRQHandler+0x2c>)
 8000f3c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ED_Pin);
 8000f3e:	2020      	movs	r0, #32
 8000f40:	f001 f996 	bl	8002270 <HAL_GPIO_EXTI_IRQHandler>
=======
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	status = (status + 1) % 3;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <EXTI9_5_IRQHandler+0x2c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <EXTI9_5_IRQHandler+0x30>)
 8000eb4:	fb83 3102 	smull	r3, r1, r3, r2
 8000eb8:	17d3      	asrs	r3, r2, #31
 8000eba:	1ac9      	subs	r1, r1, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	440b      	add	r3, r1
 8000ec2:	1ad1      	subs	r1, r2, r3
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <EXTI9_5_IRQHandler+0x2c>)
 8000ec8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ED_Pin);
 8000eca:	2020      	movs	r0, #32
 8000ecc:	f001 f996 	bl	80021fc <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
<<<<<<< HEAD
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000210 	.word	0x20000210
 8000f4c:	55555556 	.word	0x55555556

08000f50 <TIM2_IRQHandler>:
=======
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000318 	.word	0x20000318
 8000ed8:	55555556 	.word	0x55555556

08000edc <TIM2_IRQHandler>:
>>>>>>> 2814753 (long press added)

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
=======
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <TIM2_IRQHandler+0x10>)
 8000f56:	f004 fcd3 	bl	8005900 <HAL_TIM_IRQHandler>
=======
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <TIM2_IRQHandler+0x10>)
 8000ee2:	f004 fcd3 	bl	800588c <HAL_TIM_IRQHandler>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200006e4 	.word	0x200006e4

08000f64 <SystemInit>:
=======
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200007ec 	.word	0x200007ec

08000ef0 <SystemInit>:
>>>>>>> 2814753 (long press added)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
=======
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <MX_TIM1_Init>:
=======
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <MX_TIM1_Init>:
>>>>>>> 2814753 (long press added)
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	@ 0x30
 8000f74:	af00      	add	r7, sp, #0
=======
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2224      	movs	r2, #36	@ 0x24
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f009 fd44 	bl	800aa0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
=======
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2224      	movs	r2, #36	@ 0x24
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f009 fd44 	bl	800a998 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000f8e:	4a23      	ldr	r2, [pc, #140]	@ (800101c <MX_TIM1_Init+0xac>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8000fe4:	f004 fb5c 	bl	80056a0 <HAL_TIM_Encoder_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000fee:	f7ff fcad 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <MX_TIM1_Init+0xa8>)
 8001000:	f005 fb14 	bl	800662c <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800100a:	f7ff fc9f 	bl	800094c <Error_Handler>
=======
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <MX_TIM1_Init+0xac>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f70:	f004 fb5c 	bl	800562c <HAL_TIM_Encoder_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f7a:	f7ff fcad 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <MX_TIM1_Init+0xa8>)
 8000f8c:	f005 fb14 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f96:	f7ff fc9f 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< HEAD
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	@ 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000069c 	.word	0x2000069c
 800101c:	40012c00 	.word	0x40012c00

08001020 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
=======
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	@ 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200007a4 	.word	0x200007a4
 8000fa8:	40012c00 	.word	0x40012c00

08000fac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]
=======
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	619a      	str	r2, [r3, #24]
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8001042:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 8001044:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001048:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 800104c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 800105a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800105e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800106c:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 800106e:	f004 f808 	bl	8005082 <HAL_TIM_OC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001078:	f7ff fc68 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4619      	mov	r1, r3
 800108a:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 800108c:	f005 face 	bl	800662c <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001096:	f7ff fc59 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2204      	movs	r2, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 80010b2:	f004 fd15 	bl	8005ae0 <HAL_TIM_OC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010bc:	f7ff fc46 	bl	800094c <Error_Handler>
=======
 8000fce:	4b23      	ldr	r3, [pc, #140]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000fd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000fd8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000fe6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ff8:	4818      	ldr	r0, [pc, #96]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000ffa:	f004 f808 	bl	800500e <HAL_TIM_OC_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001004:	f7ff fc68 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4619      	mov	r1, r3
 8001016:	4811      	ldr	r0, [pc, #68]	@ (800105c <MX_TIM2_Init+0xb0>)
 8001018:	f005 face 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001022:	f7ff fc59 	bl	80008d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2204      	movs	r2, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4807      	ldr	r0, [pc, #28]	@ (800105c <MX_TIM2_Init+0xb0>)
 800103e:	f004 fd15 	bl	8005a6c <HAL_TIM_OC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001048:	f7ff fc46 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 80010c0:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <MX_TIM2_Init+0xb0>)
 80010c2:	f000 f931 	bl	8001328 <HAL_TIM_MspPostInit>

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	@ 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200006e4 	.word	0x200006e4

080010d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	@ 0x38
 80010d8:	af00      	add	r7, sp, #0
=======
 800104c:	4803      	ldr	r0, [pc, #12]	@ (800105c <MX_TIM2_Init+0xb0>)
 800104e:	f000 f931 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	@ 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200007ec 	.word	0x200007ec

08001060 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80010da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]
=======
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8001104:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001106:	4a2d      	ldr	r2, [pc, #180]	@ (80011bc <MX_TIM3_Init+0xe8>)
 8001108:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800110a:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b29      	ldr	r3, [pc, #164]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8001116:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001118:	2259      	movs	r2, #89	@ 0x59
 800111a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001128:	4823      	ldr	r0, [pc, #140]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 800112a:	f003 ff5b 	bl	8004fe4 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001134:	f7ff fc0a 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001142:	4619      	mov	r1, r3
 8001144:	481c      	ldr	r0, [pc, #112]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001146:	f004 fde9 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001150:	f7ff fbfc 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001154:	4818      	ldr	r0, [pc, #96]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001156:	f003 ffe3 	bl	8005120 <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001160:	f7ff fbf4 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4619      	mov	r1, r3
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 8001174:	f005 fa5a 	bl	800662c <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800117e:	f7ff fbe5 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001182:	2360      	movs	r3, #96	@ 0x60
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 800119a:	f004 fcfd 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80011a4:	f7ff fbd2 	bl	800094c <Error_Handler>
=======
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <MX_TIM3_Init+0xe4>)
 8001092:	4a2d      	ldr	r2, [pc, #180]	@ (8001148 <MX_TIM3_Init+0xe8>)
 8001094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001096:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <MX_TIM3_Init+0xe4>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <MX_TIM3_Init+0xe4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <MX_TIM3_Init+0xe4>)
 80010a4:	2259      	movs	r2, #89	@ 0x59
 80010a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <MX_TIM3_Init+0xe4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <MX_TIM3_Init+0xe4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b4:	4823      	ldr	r0, [pc, #140]	@ (8001144 <MX_TIM3_Init+0xe4>)
 80010b6:	f003 ff5b 	bl	8004f70 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010c0:	f7ff fc0a 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ce:	4619      	mov	r1, r3
 80010d0:	481c      	ldr	r0, [pc, #112]	@ (8001144 <MX_TIM3_Init+0xe4>)
 80010d2:	f004 fde9 	bl	8005ca8 <HAL_TIM_ConfigClockSource>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010dc:	f7ff fbfc 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010e0:	4818      	ldr	r0, [pc, #96]	@ (8001144 <MX_TIM3_Init+0xe4>)
 80010e2:	f003 ffe3 	bl	80050ac <HAL_TIM_PWM_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80010ec:	f7ff fbf4 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	@ (8001144 <MX_TIM3_Init+0xe4>)
 8001100:	f005 fa5a 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800110a:	f7ff fbe5 	bl	80008d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	@ 0x60
 8001110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <MX_TIM3_Init+0xe4>)
 8001126:	f004 fcfd 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001130:	f7ff fbd2 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <MX_TIM3_Init+0xe4>)
 80011aa:	f000 f8bd 	bl	8001328 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	@ 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000072c 	.word	0x2000072c
 80011bc:	40000400 	.word	0x40000400

080011c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <HAL_TIM_Encoder_MspInit+0x74>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d124      	bne.n	800122a <HAL_TIM_Encoder_MspInit+0x6a>
=======
 8001134:	4803      	ldr	r0, [pc, #12]	@ (8001144 <MX_TIM3_Init+0xe4>)
 8001136:	f000 f8bd 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	@ 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000834 	.word	0x20000834
 8001148:	40000400 	.word	0x40000400

0800114c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a16      	ldr	r2, [pc, #88]	@ (80011c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d124      	bne.n	80011b6 <HAL_TIM_Encoder_MspInit+0x6a>
>>>>>>> 2814753 (long press added)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_TIM_Encoder_MspInit+0x78>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <HAL_TIM_Encoder_MspInit+0x78>)
 80011e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_TIM_Encoder_MspInit+0x78>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_TIM_Encoder_MspInit+0x78>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_TIM_Encoder_MspInit+0x78>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_TIM_Encoder_MspInit+0x78>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
=======
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a14      	ldr	r2, [pc, #80]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001172:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 2814753 (long press added)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EA_Pin|EB_Pin;
<<<<<<< HEAD
 8001210:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001226:	f000 fe6f 	bl	8001f08 <HAL_GPIO_Init>
=======
 800119c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80011b2:	f000 fe6f 	bl	8001e94 <HAL_GPIO_Init>
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
<<<<<<< HEAD
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40012c00 	.word	0x40012c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800

08001240 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001250:	d113      	bne.n	800127a <HAL_TIM_OC_MspInit+0x3a>
=======
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800

080011cc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011dc:	d113      	bne.n	8001206 <HAL_TIM_OC_MspInit+0x3a>
>>>>>>> 2814753 (long press added)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_TIM_OC_MspInit+0x44>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_TIM_OC_MspInit+0x44>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_TIM_OC_MspInit+0x44>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	201c      	movs	r0, #28
 8001270:	f000 fbad 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001274:	201c      	movs	r0, #28
 8001276:	f000 fbc6 	bl	8001a06 <HAL_NVIC_EnableIRQ>
=======
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <HAL_TIM_OC_MspInit+0x44>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <HAL_TIM_OC_MspInit+0x44>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_TIM_OC_MspInit+0x44>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	201c      	movs	r0, #28
 80011fc:	f000 fbad 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001200:	201c      	movs	r0, #28
 8001202:	f000 fbc6 	bl	8001992 <HAL_NVIC_EnableIRQ>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
<<<<<<< HEAD
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <HAL_TIM_Base_MspInit+0x90>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d139      	bne.n	800130e <HAL_TIM_Base_MspInit+0x86>
=======
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a20      	ldr	r2, [pc, #128]	@ (80012a4 <HAL_TIM_Base_MspInit+0x90>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d139      	bne.n	800129a <HAL_TIM_Base_MspInit+0x86>
>>>>>>> 2814753 (long press added)
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_TIM_Base_MspInit+0x94>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <HAL_TIM_Base_MspInit+0x94>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_TIM_Base_MspInit+0x94>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
=======
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_TIM_Base_MspInit+0x94>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <HAL_TIM_Base_MspInit+0x94>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_TIM_Base_MspInit+0x94>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 2814753 (long press added)

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
<<<<<<< HEAD
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <HAL_TIM_Base_MspInit+0x9c>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80012e6:	480e      	ldr	r0, [pc, #56]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012e8:	f000 fba8 	bl	8001a3c <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80012f2:	f7ff fb2b 	bl	800094c <Error_Handler>
=======
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001246:	2210      	movs	r2, #16
 8001248:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001260:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001264:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001274:	f000 fba8 	bl	80019c8 <HAL_DMA_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800127e:	f7ff fb2b 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
<<<<<<< HEAD
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80012fc:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_TIM_Base_MspInit+0x98>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6253      	str	r3, [r2, #36]	@ 0x24
=======
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001292:	639a      	str	r2, [r3, #56]	@ 0x38
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <HAL_TIM_Base_MspInit+0x98>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6253      	str	r3, [r2, #36]	@ 0x24
>>>>>>> 2814753 (long press added)

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
<<<<<<< HEAD
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40000400 	.word	0x40000400
 800131c:	40021000 	.word	0x40021000
 8001320:	20000774 	.word	0x20000774
 8001324:	4002006c 	.word	0x4002006c

08001328 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001346:	d12a      	bne.n	800139e <HAL_TIM_MspPostInit+0x76>
=======
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40021000 	.word	0x40021000
 80012ac:	2000087c 	.word	0x2000087c
 80012b0:	4002006c 	.word	0x4002006c

080012b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d2:	d12a      	bne.n	800132a <HAL_TIM_MspPostInit+0x76>
>>>>>>> 2814753 (long press added)
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
=======
 80012d4:	4b25      	ldr	r3, [pc, #148]	@ (800136c <HAL_TIM_MspPostInit+0xb8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a24      	ldr	r2, [pc, #144]	@ (800136c <HAL_TIM_MspPostInit+0xb8>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b22      	ldr	r3, [pc, #136]	@ (800136c <HAL_TIM_MspPostInit+0xb8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
>>>>>>> 2814753 (long press added)
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
<<<<<<< HEAD
 8001360:	2308      	movs	r3, #8
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <HAL_TIM_MspPostInit+0xbc>)
 8001374:	f000 fdc8 	bl	8001f08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_TIM_MspPostInit+0xc0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
 8001396:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <HAL_TIM_MspPostInit+0xc0>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	6053      	str	r3, [r2, #4]
=======
 80012ec:	2308      	movs	r3, #8
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	481c      	ldr	r0, [pc, #112]	@ (8001370 <HAL_TIM_MspPostInit+0xbc>)
 8001300:	f000 fdc8 	bl	8001e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_TIM_MspPostInit+0xc0>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
 8001322:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <HAL_TIM_MspPostInit+0xc0>)
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	6053      	str	r3, [r2, #4]
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 800139c:	e01c      	b.n	80013d8 <HAL_TIM_MspPostInit+0xb0>
  else if(timHandle->Instance==TIM3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <HAL_TIM_MspPostInit+0xc4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d117      	bne.n	80013d8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a0c      	ldr	r2, [pc, #48]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RGB_Pin;
 80013c0:	2340      	movs	r3, #64	@ 0x40
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <HAL_TIM_MspPostInit+0xc8>)
 80013d4:	f000 fd98 	bl	8001f08 <HAL_GPIO_Init>
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40000400 	.word	0x40000400
 80013f0:	40010800 	.word	0x40010800

080013f4 <WS2812_Set>:
=======
 8001328:	e01c      	b.n	8001364 <HAL_TIM_MspPostInit+0xb0>
  else if(timHandle->Instance==TIM3)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_TIM_MspPostInit+0xc4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d117      	bne.n	8001364 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_TIM_MspPostInit+0xb8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_TIM_MspPostInit+0xb8>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_TIM_MspPostInit+0xb8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RGB_Pin;
 800134c:	2340      	movs	r3, #64	@ 0x40
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <HAL_TIM_MspPostInit+0xc8>)
 8001360:	f000 fd98 	bl	8001e94 <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	@ 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40010000 	.word	0x40010000
 8001378:	40000400 	.word	0x40000400
 800137c:	40010800 	.word	0x40010800

08001380 <WS2812_Set>:
>>>>>>> 2814753 (long press added)
#define Code1			60
#define CodeReset		0

uint8_t color[LED_COUNT][3];

void WS2812_Set(uint8_t index, uint8_t r, uint8_t g, uint8_t b){
<<<<<<< HEAD
 80013f4:	b490      	push	{r4, r7}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	4623      	mov	r3, r4
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	4603      	mov	r3, r0
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	460b      	mov	r3, r1
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	4613      	mov	r3, r2
 8001410:	713b      	strb	r3, [r7, #4]
	color[index][0] = r;
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	490e      	ldr	r1, [pc, #56]	@ (8001450 <WS2812_Set+0x5c>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	440b      	add	r3, r1
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	701a      	strb	r2, [r3, #0]
	color[index][1] = g;
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	490a      	ldr	r1, [pc, #40]	@ (8001450 <WS2812_Set+0x5c>)
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	440b      	add	r3, r1
 800142e:	3301      	adds	r3, #1
 8001430:	797a      	ldrb	r2, [r7, #5]
 8001432:	701a      	strb	r2, [r3, #0]
	color[index][2] = b;
 8001434:	79fa      	ldrb	r2, [r7, #7]
 8001436:	4906      	ldr	r1, [pc, #24]	@ (8001450 <WS2812_Set+0x5c>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	440b      	add	r3, r1
 8001440:	3302      	adds	r3, #2
 8001442:	793a      	ldrb	r2, [r7, #4]
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bc90      	pop	{r4, r7}
 800144e:	4770      	bx	lr
 8001450:	200007b8 	.word	0x200007b8

08001454 <WS2812_SetAll>:

void WS2812_SetAll(uint8_t r, uint8_t g, uint8_t b){
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	460b      	mov	r3, r1
 8001460:	71bb      	strb	r3, [r7, #6]
 8001462:	4613      	mov	r3, r2
 8001464:	717b      	strb	r3, [r7, #5]
	for  (uint8_t i = 0; i < LED_COUNT; i++){
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e008      	b.n	800147e <WS2812_SetAll+0x2a>
		WS2812_Set(i, r, g, b);
 800146c:	797b      	ldrb	r3, [r7, #5]
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	79f9      	ldrb	r1, [r7, #7]
 8001472:	7bf8      	ldrb	r0, [r7, #15]
 8001474:	f7ff ffbe 	bl	80013f4 <WS2812_Set>
	for  (uint8_t i = 0; i < LED_COUNT; i++){
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3301      	adds	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b10      	cmp	r3, #16
 8001482:	d9f3      	bls.n	800146c <WS2812_SetAll+0x18>
	}
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <WS2812_Update>:

void WS2812_Update(){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	static uint16_t data[LED_COUNT * 3 * 8  +  1];

	for (int i = 0; i  < LED_COUNT; i++){
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e069      	b.n	8001570 <WS2812_Update+0xe0>
		uint8_t r = color[i][0];
 800149c:	4941      	ldr	r1, [pc, #260]	@ (80015a4 <WS2812_Update+0x114>)
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
		uint8_t g = color[i][1];
 80014ac:	493d      	ldr	r1, [pc, #244]	@ (80015a4 <WS2812_Update+0x114>)
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	3301      	adds	r3, #1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	71bb      	strb	r3, [r7, #6]
		uint8_t b = color[i][2];
 80014be:	4939      	ldr	r1, [pc, #228]	@ (80015a4 <WS2812_Update+0x114>)
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	3302      	adds	r3, #2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	717b      	strb	r3, [r7, #5]

		for (int j = 0; j < 8; j++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	e046      	b.n	8001564 <WS2812_Update+0xd4>
			data[24 * i + j] = (g & (0x80 >> j)) ? Code1 : Code0;
 80014d6:	79ba      	ldrb	r2, [r7, #6]
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	fa41 f303 	asr.w	r3, r1, r3
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <WS2812_Update+0x5a>
 80014e6:	213c      	movs	r1, #60	@ 0x3c
 80014e8:	e000      	b.n	80014ec <WS2812_Update+0x5c>
 80014ea:	211e      	movs	r1, #30
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a2a      	ldr	r2, [pc, #168]	@ (80015a8 <WS2812_Update+0x118>)
 80014fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			data[24 * i + 8 + j] = (r & (0x80 >> j)) ? Code1 : Code0;
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	fa41 f303 	asr.w	r3, r1, r3
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <WS2812_Update+0x86>
 8001512:	213c      	movs	r1, #60	@ 0x3c
 8001514:	e000      	b.n	8001518 <WS2812_Update+0x88>
 8001516:	211e      	movs	r1, #30
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	f103 0208 	add.w	r2, r3, #8
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <WS2812_Update+0x118>)
 800152c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			data[24 * i + 16 + j] = (b & (0x80 >> j)) ? Code1 : Code0;
 8001530:	797a      	ldrb	r2, [r7, #5]
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	fa41 f303 	asr.w	r3, r1, r3
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <WS2812_Update+0xb4>
 8001540:	213c      	movs	r1, #60	@ 0x3c
 8001542:	e000      	b.n	8001546 <WS2812_Update+0xb6>
 8001544:	211e      	movs	r1, #30
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	f103 0210 	add.w	r2, r3, #16
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4413      	add	r3, r2
 8001558:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <WS2812_Update+0x118>)
 800155a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int j = 0; j < 8; j++){
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3301      	adds	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b07      	cmp	r3, #7
 8001568:	ddb5      	ble.n	80014d6 <WS2812_Update+0x46>
	for (int i = 0; i  < LED_COUNT; i++){
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b10      	cmp	r3, #16
 8001574:	dd92      	ble.n	800149c <WS2812_Update+0xc>
		}
	}
	data[LED_COUNT * 3] = CodeReset;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <WS2812_Update+0x118>)
 8001578:	2200      	movs	r2, #0
 800157a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800157e:	2100      	movs	r1, #0
 8001580:	480a      	ldr	r0, [pc, #40]	@ (80015ac <WS2812_Update+0x11c>)
 8001582:	f003 ffc7 	bl	8005514 <HAL_TIM_PWM_Stop_DMA>
	__HAL_TIM_SetCounter(&htim3, 0);
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <WS2812_Update+0x11c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)data, sizeof(data)/sizeof(uint16_t));
 800158e:	f240 1399 	movw	r3, #409	@ 0x199
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <WS2812_Update+0x118>)
 8001594:	2100      	movs	r1, #0
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <WS2812_Update+0x11c>)
 8001598:	f003 fe1a 	bl	80051d0 <HAL_TIM_PWM_Start_DMA>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200007b8 	.word	0x200007b8
 80015a8:	200007ec 	.word	0x200007ec
 80015ac:	2000072c 	.word	0x2000072c

080015b0 <getColorFromEncoder>:

/*Selected add test encoder to rgb 3 phrase version 1*/
void getColorFromEncoder(uint8_t step, uint8_t *r, uint8_t *g, uint8_t *b) {
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
    step = step % ENC_STEPS; // 防止越界
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <getColorFromEncoder+0x10c>)
 80015c4:	fba3 1302 	umull	r1, r3, r3, r2
 80015c8:	0959      	lsrs	r1, r3, #5
 80015ca:	460b      	mov	r3, r1
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	73fb      	strb	r3, [r7, #15]

    if (step < 13) {
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d81f      	bhi.n	800161c <getColorFromEncoder+0x6c>
        // 红 -> 绿
        *r = MAX_COLOR - (step * MAX_COLOR / 13);
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	4613      	mov	r3, r2
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	4a36      	ldr	r2, [pc, #216]	@ (80016c0 <getColorFromEncoder+0x110>)
 80015e6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ea:	1092      	asrs	r2, r2, #2
 80015ec:	17db      	asrs	r3, r3, #31
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	701a      	strb	r2, [r3, #0]
        *g = step * MAX_COLOR / 13;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	4613      	mov	r3, r2
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	4a2f      	ldr	r2, [pc, #188]	@ (80016c0 <getColorFromEncoder+0x110>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
=======
 8001380:	b490      	push	{r4, r7}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4604      	mov	r4, r0
 8001388:	4608      	mov	r0, r1
 800138a:	4611      	mov	r1, r2
 800138c:	461a      	mov	r2, r3
 800138e:	4623      	mov	r3, r4
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	4603      	mov	r3, r0
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	460b      	mov	r3, r1
 8001398:	717b      	strb	r3, [r7, #5]
 800139a:	4613      	mov	r3, r2
 800139c:	713b      	strb	r3, [r7, #4]
	color[index][0] = r;
 800139e:	79fa      	ldrb	r2, [r7, #7]
 80013a0:	490e      	ldr	r1, [pc, #56]	@ (80013dc <WS2812_Set+0x5c>)
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	79ba      	ldrb	r2, [r7, #6]
 80013ac:	701a      	strb	r2, [r3, #0]
	color[index][1] = g;
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	490a      	ldr	r1, [pc, #40]	@ (80013dc <WS2812_Set+0x5c>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	3301      	adds	r3, #1
 80013bc:	797a      	ldrb	r2, [r7, #5]
 80013be:	701a      	strb	r2, [r3, #0]
	color[index][2] = b;
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	4906      	ldr	r1, [pc, #24]	@ (80013dc <WS2812_Set+0x5c>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	3302      	adds	r3, #2
 80013ce:	793a      	ldrb	r2, [r7, #4]
 80013d0:	701a      	strb	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc90      	pop	{r4, r7}
 80013da:	4770      	bx	lr
 80013dc:	200008c0 	.word	0x200008c0

080013e0 <WS2812_SetAll>:

void WS2812_SetAll(uint8_t r, uint8_t g, uint8_t b){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	460b      	mov	r3, r1
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	4613      	mov	r3, r2
 80013f0:	717b      	strb	r3, [r7, #5]
	for  (uint8_t i = 0; i < LED_COUNT; i++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e008      	b.n	800140a <WS2812_SetAll+0x2a>
		WS2812_Set(i, r, g, b);
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	79ba      	ldrb	r2, [r7, #6]
 80013fc:	79f9      	ldrb	r1, [r7, #7]
 80013fe:	7bf8      	ldrb	r0, [r7, #15]
 8001400:	f7ff ffbe 	bl	8001380 <WS2812_Set>
	for  (uint8_t i = 0; i < LED_COUNT; i++){
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d9f3      	bls.n	80013f8 <WS2812_SetAll+0x18>
	}
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <WS2812_Update>:

void WS2812_Update(){
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
	static uint16_t data[LED_COUNT * 3 * 8  +  1];

	for (int i = 0; i  < LED_COUNT; i++){
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e069      	b.n	80014fc <WS2812_Update+0xe0>
		uint8_t r = color[i][0];
 8001428:	4941      	ldr	r1, [pc, #260]	@ (8001530 <WS2812_Update+0x114>)
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	440b      	add	r3, r1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
		uint8_t g = color[i][1];
 8001438:	493d      	ldr	r1, [pc, #244]	@ (8001530 <WS2812_Update+0x114>)
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	440b      	add	r3, r1
 8001444:	3301      	adds	r3, #1
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	71bb      	strb	r3, [r7, #6]
		uint8_t b = color[i][2];
 800144a:	4939      	ldr	r1, [pc, #228]	@ (8001530 <WS2812_Update+0x114>)
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	440b      	add	r3, r1
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	717b      	strb	r3, [r7, #5]

		for (int j = 0; j < 8; j++){
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e046      	b.n	80014f0 <WS2812_Update+0xd4>
			data[24 * i + j] = (g & (0x80 >> j)) ? Code1 : Code0;
 8001462:	79ba      	ldrb	r2, [r7, #6]
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	fa41 f303 	asr.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <WS2812_Update+0x5a>
 8001472:	213c      	movs	r1, #60	@ 0x3c
 8001474:	e000      	b.n	8001478 <WS2812_Update+0x5c>
 8001476:	211e      	movs	r1, #30
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	461a      	mov	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	4a2a      	ldr	r2, [pc, #168]	@ (8001534 <WS2812_Update+0x118>)
 800148a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			data[24 * i + 8 + j] = (r & (0x80 >> j)) ? Code1 : Code0;
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	2180      	movs	r1, #128	@ 0x80
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	fa41 f303 	asr.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <WS2812_Update+0x86>
 800149e:	213c      	movs	r1, #60	@ 0x3c
 80014a0:	e000      	b.n	80014a4 <WS2812_Update+0x88>
 80014a2:	211e      	movs	r1, #30
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	f103 0208 	add.w	r2, r3, #8
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <WS2812_Update+0x118>)
 80014b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			data[24 * i + 16 + j] = (b & (0x80 >> j)) ? Code1 : Code0;
 80014bc:	797a      	ldrb	r2, [r7, #5]
 80014be:	2180      	movs	r1, #128	@ 0x80
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	fa41 f303 	asr.w	r3, r1, r3
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <WS2812_Update+0xb4>
 80014cc:	213c      	movs	r1, #60	@ 0x3c
 80014ce:	e000      	b.n	80014d2 <WS2812_Update+0xb6>
 80014d0:	211e      	movs	r1, #30
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	f103 0210 	add.w	r2, r3, #16
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <WS2812_Update+0x118>)
 80014e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int j = 0; j < 8; j++){
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b07      	cmp	r3, #7
 80014f4:	ddb5      	ble.n	8001462 <WS2812_Update+0x46>
	for (int i = 0; i  < LED_COUNT; i++){
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	dd92      	ble.n	8001428 <WS2812_Update+0xc>
		}
	}
	data[LED_COUNT * 3] = CodeReset;
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <WS2812_Update+0x118>)
 8001504:	2200      	movs	r2, #0
 8001506:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800150a:	2100      	movs	r1, #0
 800150c:	480a      	ldr	r0, [pc, #40]	@ (8001538 <WS2812_Update+0x11c>)
 800150e:	f003 ffc7 	bl	80054a0 <HAL_TIM_PWM_Stop_DMA>
	__HAL_TIM_SetCounter(&htim3, 0);
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <WS2812_Update+0x11c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)data, sizeof(data)/sizeof(uint16_t));
 800151a:	f240 1399 	movw	r3, #409	@ 0x199
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <WS2812_Update+0x118>)
 8001520:	2100      	movs	r1, #0
 8001522:	4805      	ldr	r0, [pc, #20]	@ (8001538 <WS2812_Update+0x11c>)
 8001524:	f003 fe1a 	bl	800515c <HAL_TIM_PWM_Start_DMA>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200008c0 	.word	0x200008c0
 8001534:	200008f4 	.word	0x200008f4
 8001538:	20000834 	.word	0x20000834

0800153c <getColorFromEncoder>:

/*Selected add test encoder to rgb 3 phrase version 1*/
void getColorFromEncoder(uint8_t step, uint8_t *r, uint8_t *g, uint8_t *b) {
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
    step = step % ENC_STEPS; // 防止越界
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <getColorFromEncoder+0x10c>)
 8001550:	fba3 1302 	umull	r1, r3, r3, r2
 8001554:	0959      	lsrs	r1, r3, #5
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	73fb      	strb	r3, [r7, #15]

    if (step < 13) {
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d81f      	bhi.n	80015a8 <getColorFromEncoder+0x6c>
        // 红 -> 绿
        *r = MAX_COLOR - (step * MAX_COLOR / 13);
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	4613      	mov	r3, r2
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	4a36      	ldr	r2, [pc, #216]	@ (800164c <getColorFromEncoder+0x110>)
 8001572:	fb82 1203 	smull	r1, r2, r2, r3
 8001576:	1092      	asrs	r2, r2, #2
 8001578:	17db      	asrs	r3, r3, #31
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	701a      	strb	r2, [r3, #0]
        *g = step * MAX_COLOR / 13;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	4613      	mov	r3, r2
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	4a2f      	ldr	r2, [pc, #188]	@ (800164c <getColorFromEncoder+0x110>)
 8001590:	fb82 1203 	smull	r1, r2, r2, r3
 8001594:	1092      	asrs	r2, r2, #2
 8001596:	17db      	asrs	r3, r3, #31
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	701a      	strb	r2, [r3, #0]
        *b = 0;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
        uint8_t s = step - 26;
        *r = s * MAX_COLOR / 14;
        *g = 0;
        *b = MAX_COLOR - (s * MAX_COLOR / 14);
    }
}
<<<<<<< HEAD
 800161a:	e049      	b.n	80016b0 <getColorFromEncoder+0x100>
    } else if (step < 26) {
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b19      	cmp	r3, #25
 8001620:	d822      	bhi.n	8001668 <getColorFromEncoder+0xb8>
        uint8_t s = step - 13;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	3b0d      	subs	r3, #13
 8001626:	75bb      	strb	r3, [r7, #22]
        *r = 0;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
        *g = MAX_COLOR - (s * MAX_COLOR / 13);
 800162e:	7dba      	ldrb	r2, [r7, #22]
 8001630:	4613      	mov	r3, r2
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <getColorFromEncoder+0x110>)
 8001638:	fb82 1203 	smull	r1, r2, r2, r3
 800163c:	1092      	asrs	r2, r2, #2
 800163e:	17db      	asrs	r3, r3, #31
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	701a      	strb	r2, [r3, #0]
        *b = s * MAX_COLOR / 13;
 800164c:	7dba      	ldrb	r2, [r7, #22]
 800164e:	4613      	mov	r3, r2
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	4a1a      	ldr	r2, [pc, #104]	@ (80016c0 <getColorFromEncoder+0x110>)
 8001656:	fb82 1203 	smull	r1, r2, r2, r3
 800165a:	1092      	asrs	r2, r2, #2
 800165c:	17db      	asrs	r3, r3, #31
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b2da      	uxtb	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	e023      	b.n	80016b0 <getColorFromEncoder+0x100>
        uint8_t s = step - 26;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	3b1a      	subs	r3, #26
 800166c:	75fb      	strb	r3, [r7, #23]
        *r = s * MAX_COLOR / 14;
 800166e:	7dfa      	ldrb	r2, [r7, #23]
 8001670:	4613      	mov	r3, r2
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <getColorFromEncoder+0x114>)
 8001678:	fb82 1203 	smull	r1, r2, r2, r3
 800167c:	441a      	add	r2, r3
 800167e:	10d2      	asrs	r2, r2, #3
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	701a      	strb	r2, [r3, #0]
        *g = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
        *b = MAX_COLOR - (s * MAX_COLOR / 14);
 8001690:	7dfa      	ldrb	r2, [r7, #23]
 8001692:	4613      	mov	r3, r2
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <getColorFromEncoder+0x114>)
 800169a:	fb82 1203 	smull	r1, r2, r2, r3
 800169e:	441a      	add	r2, r3
 80016a0:	10d2      	asrs	r2, r2, #3
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	701a      	strb	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	cccccccd 	.word	0xcccccccd
 80016c0:	4ec4ec4f 	.word	0x4ec4ec4f
 80016c4:	92492493 	.word	0x92492493

080016c8 <Reset_Handler>:
=======
 80015a6:	e049      	b.n	800163c <getColorFromEncoder+0x100>
    } else if (step < 26) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b19      	cmp	r3, #25
 80015ac:	d822      	bhi.n	80015f4 <getColorFromEncoder+0xb8>
        uint8_t s = step - 13;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3b0d      	subs	r3, #13
 80015b2:	75bb      	strb	r3, [r7, #22]
        *r = 0;
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
        *g = MAX_COLOR - (s * MAX_COLOR / 13);
 80015ba:	7dba      	ldrb	r2, [r7, #22]
 80015bc:	4613      	mov	r3, r2
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	4a22      	ldr	r2, [pc, #136]	@ (800164c <getColorFromEncoder+0x110>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1092      	asrs	r2, r2, #2
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	701a      	strb	r2, [r3, #0]
        *b = s * MAX_COLOR / 13;
 80015d8:	7dba      	ldrb	r2, [r7, #22]
 80015da:	4613      	mov	r3, r2
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	1a9b      	subs	r3, r3, r2
 80015e0:	4a1a      	ldr	r2, [pc, #104]	@ (800164c <getColorFromEncoder+0x110>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	1092      	asrs	r2, r2, #2
 80015e8:	17db      	asrs	r3, r3, #31
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	e023      	b.n	800163c <getColorFromEncoder+0x100>
        uint8_t s = step - 26;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3b1a      	subs	r3, #26
 80015f8:	75fb      	strb	r3, [r7, #23]
        *r = s * MAX_COLOR / 14;
 80015fa:	7dfa      	ldrb	r2, [r7, #23]
 80015fc:	4613      	mov	r3, r2
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <getColorFromEncoder+0x114>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	441a      	add	r2, r3
 800160a:	10d2      	asrs	r2, r2, #3
 800160c:	17db      	asrs	r3, r3, #31
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b2da      	uxtb	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
        *b = MAX_COLOR - (s * MAX_COLOR / 14);
 800161c:	7dfa      	ldrb	r2, [r7, #23]
 800161e:	4613      	mov	r3, r2
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <getColorFromEncoder+0x114>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	441a      	add	r2, r3
 800162c:	10d2      	asrs	r2, r2, #3
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	701a      	strb	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	cccccccd 	.word	0xcccccccd
 800164c:	4ec4ec4f 	.word	0x4ec4ec4f
 8001650:	92492493 	.word	0x92492493

08001654 <Reset_Handler>:
>>>>>>> 2814753 (long press added)
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
<<<<<<< HEAD
 80016c8:	f7ff fc4c 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480b      	ldr	r0, [pc, #44]	@ (80016fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ce:	490c      	ldr	r1, [pc, #48]	@ (8001700 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016e4:	4c09      	ldr	r4, [pc, #36]	@ (800170c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f009 f993 	bl	800aa1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f6:	f7ff f839 	bl	800076c <main>
  bx lr
 80016fa:	4770      	bx	lr
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001704:	0800b318 	.word	0x0800b318
  ldr r2, =_sbss
 8001708:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800170c:	200012d8 	.word	0x200012d8

08001710 <ADC1_2_IRQHandler>:
=======
 8001654:	f7ff fc4c 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800165a:	490c      	ldr	r1, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800165c:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001670:	4c09      	ldr	r4, [pc, #36]	@ (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f009 f993 	bl	800a9a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f7ff f839 	bl	80006f8 <main>
  bx lr
 8001686:	4770      	bx	lr
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001690:	0800b2a4 	.word	0x0800b2a4
  ldr r2, =_sbss
 8001694:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001698:	200013e0 	.word	0x200013e0

0800169c <ADC1_2_IRQHandler>:
>>>>>>> 2814753 (long press added)
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8001710:	e7fe      	b.n	8001710 <ADC1_2_IRQHandler>
	...

08001714 <HAL_Init>:
=======
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
>>>>>>> 2814753 (long press added)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
=======
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_Init+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	@ (800173c <HAL_Init+0x28>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6013      	str	r3, [r2, #0]
=======
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f947 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fb82 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_InitTick>:
=======
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f947 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fb82 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
>>>>>>> 2814753 (long press added)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f95f 	bl	8001a22 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
=======
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f95f 	bl	80019ae <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
>>>>>>> 2814753 (long press added)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f927 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	@ (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
=======
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f927 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000014 	.word	0x20000014
 8001798:	2000001c 	.word	0x2000001c
 800179c:	20000018 	.word	0x20000018

080017a0 <HAL_IncTick>:
=======
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000014 	.word	0x20000014
 8001724:	2000001c 	.word	0x2000001c
 8001728:	20000018 	.word	0x20000018

0800172c <HAL_IncTick>:
>>>>>>> 2814753 (long press added)
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x1c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_IncTick+0x20>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a03      	ldr	r2, [pc, #12]	@ (80017c0 <HAL_IncTick+0x20>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	2000001c 	.word	0x2000001c
 80017c0:	20000b20 	.word	0x20000b20

080017c4 <HAL_GetTick>:
=======
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a03      	ldr	r2, [pc, #12]	@ (800174c <HAL_IncTick+0x20>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	2000001c 	.word	0x2000001c
 800174c:	20000c28 	.word	0x20000c28

08001750 <HAL_GetTick>:
>>>>>>> 2814753 (long press added)
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b02      	ldr	r3, [pc, #8]	@ (80017d4 <HAL_GetTick+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000b20 	.word	0x20000b20

080017d8 <HAL_Delay>:
=======
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b02      	ldr	r3, [pc, #8]	@ (8001760 <HAL_GetTick+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000c28 	.word	0x20000c28

08001764 <HAL_Delay>:
>>>>>>> 2814753 (long press added)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff fff0 	bl	80017c4 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffe0 	bl	80017c4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000001c 	.word	0x2000001c

08001820 <__NVIC_SetPriorityGrouping>:
=======
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fff0 	bl	8001750 <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffe0 	bl	8001750 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000001c 	.word	0x2000001c

080017ac <__NVIC_SetPriorityGrouping>:
>>>>>>> 2814753 (long press added)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
=======
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
>>>>>>> 2814753 (long press added)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
=======
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
>>>>>>> 2814753 (long press added)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4906      	ldr	r1, [pc, #24]	@ (80018b8 <__NVIC_EnableIRQ+0x34>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
=======
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4906      	ldr	r1, [pc, #24]	@ (8001844 <__NVIC_EnableIRQ+0x34>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
>>>>>>> 2814753 (long press added)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 2814753 (long press added)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
=======
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
>>>>>>> 2814753 (long press added)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
=======
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
>>>>>>> 2814753 (long press added)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <SysTick_Config>:
=======
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <SysTick_Config>:
>>>>>>> 2814753 (long press added)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff90 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff90 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 2814753 (long press added)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
=======
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff2d 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
=======
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff2d 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
>>>>>>> 2814753 (long press added)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
=======
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
>>>>>>> 2814753 (long press added)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80019e0:	f7ff ff42 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff90 	bl	8001910 <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5f 	bl	80018bc <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
=======
 800196c:	f7ff ff42 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
>>>>>>> 2814753 (long press added)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
=======
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
>>>>>>> 2814753 (long press added)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff35 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
=======
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff35 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
>>>>>>> 2814753 (long press added)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_DMA_Init>:
=======
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
>>>>>>> 2814753 (long press added)
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e043      	b.n	8001ada <HAL_DMA_Init+0x9e>
=======
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e043      	b.n	8001a66 <HAL_DMA_Init+0x9e>
>>>>>>> 2814753 (long press added)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
<<<<<<< HEAD
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_DMA_Init+0xa8>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_DMA_Init+0xac>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	009a      	lsls	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aec <HAL_DMA_Init+0xb0>)
 8001a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <HAL_DMA_Init+0xa8>)
 80019e6:	4413      	add	r3, r2
 80019e8:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <HAL_DMA_Init+0xac>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	009a      	lsls	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_DMA_Init+0xb0>)
 80019fa:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> 2814753 (long press added)
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a8a:	60fb      	str	r3, [r7, #12]
=======
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a16:	60fb      	str	r3, [r7, #12]
>>>>>>> 2814753 (long press added)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	bffdfff8 	.word	0xbffdfff8
 8001ae8:	cccccccd 	.word	0xcccccccd
 8001aec:	40020000 	.word	0x40020000

08001af0 <HAL_DMA_Start_IT>:
=======
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	bffdfff8 	.word	0xbffdfff8
 8001a74:	cccccccd 	.word	0xcccccccd
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_DMA_Start_IT>:
>>>>>>> 2814753 (long press added)
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
=======
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Start_IT+0x20>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e04b      	b.n	8001ba8 <HAL_DMA_Start_IT+0xb8>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d13a      	bne.n	8001b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f9af 	bl	8001eac <DMA_SetConfig>
=======
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Start_IT+0x20>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e04b      	b.n	8001b34 <HAL_DMA_Start_IT+0xb8>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d13a      	bne.n	8001b26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f9af 	bl	8001e38 <DMA_SetConfig>
>>>>>>> 2814753 (long press added)
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 020e 	orr.w	r2, r2, #14
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e00f      	b.n	8001b88 <HAL_DMA_Start_IT+0x98>
=======
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 020e 	orr.w	r2, r2, #14
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e00f      	b.n	8001b14 <HAL_DMA_Start_IT+0x98>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 020a 	orr.w	r2, r2, #10
 8001b86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e005      	b.n	8001ba6 <HAL_DMA_Start_IT+0xb6>
=======
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0204 	bic.w	r2, r2, #4
 8001b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 020a 	orr.w	r2, r2, #10
 8001b12:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e005      	b.n	8001b32 <HAL_DMA_Start_IT+0xb6>
>>>>>>> 2814753 (long press added)
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
<<<<<<< HEAD
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Abort_IT>:
=======
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_DMA_Abort_IT>:
>>>>>>> 2814753 (long press added)
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d005      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e051      	b.n	8001c78 <HAL_DMA_Abort_IT+0xc8>
=======
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d005      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e051      	b.n	8001c04 <HAL_DMA_Abort_IT+0xc8>
>>>>>>> 2814753 (long press added)
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 020e 	bic.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Abort_IT+0xd4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d029      	beq.n	8001c52 <HAL_DMA_Abort_IT+0xa2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DMA_Abort_IT+0xd8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x9e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DMA_Abort_IT+0xdc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x98>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_DMA_Abort_IT+0xe0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d012      	beq.n	8001c42 <HAL_DMA_Abort_IT+0x92>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <HAL_DMA_Abort_IT+0xe4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00a      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x8c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_DMA_Abort_IT+0xe8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <HAL_DMA_Abort_IT+0x86>
 8001c30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c34:	e00e      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c3a:	e00b      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c40:	e008      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c46:	e005      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4c:	e002      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	2310      	movs	r3, #16
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c52:	2301      	movs	r3, #1
 8001c54:	4a11      	ldr	r2, [pc, #68]	@ (8001c9c <HAL_DMA_Abort_IT+0xec>)
 8001c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
    } 
  }
  return status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020008 	.word	0x40020008
 8001c88:	4002001c 	.word	0x4002001c
 8001c8c:	40020030 	.word	0x40020030
 8001c90:	40020044 	.word	0x40020044
 8001c94:	40020058 	.word	0x40020058
 8001c98:	4002006c 	.word	0x4002006c
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_DMA_IRQHandler>:
=======
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020e 	bic.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_DMA_Abort_IT+0xd4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d029      	beq.n	8001bde <HAL_DMA_Abort_IT+0xa2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <HAL_DMA_Abort_IT+0xd8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <HAL_DMA_Abort_IT+0x9e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <HAL_DMA_Abort_IT+0xdc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01a      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x98>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c1c <HAL_DMA_Abort_IT+0xe0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_Abort_IT+0x92>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <HAL_DMA_Abort_IT+0xe4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x8c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c24 <HAL_DMA_Abort_IT+0xe8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_DMA_Abort_IT+0x86>
 8001bbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bc0:	e00e      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc6:	e00b      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bcc:	e008      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd2:	e005      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd8:	e002      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bda:	2310      	movs	r3, #16
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_DMA_Abort_IT+0xec>)
 8001be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
    } 
  }
  return status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020008 	.word	0x40020008
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	40020030 	.word	0x40020030
 8001c1c:	40020044 	.word	0x40020044
 8001c20:	40020058 	.word	0x40020058
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_DMA_IRQHandler>:
>>>>>>> 2814753 (long press added)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d04f      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xc8>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d04a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a66      	ldr	r2, [pc, #408]	@ (8001e90 <HAL_DMA_IRQHandler+0x1f0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d029      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xae>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a65      	ldr	r2, [pc, #404]	@ (8001e94 <HAL_DMA_IRQHandler+0x1f4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xaa>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a63      	ldr	r2, [pc, #396]	@ (8001e98 <HAL_DMA_IRQHandler+0x1f8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xa4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a62      	ldr	r2, [pc, #392]	@ (8001e9c <HAL_DMA_IRQHandler+0x1fc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x9e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ea0 <HAL_DMA_IRQHandler+0x200>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x98>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea4 <HAL_DMA_IRQHandler+0x204>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x92>
 8001d2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d30:	e00e      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d36:	e00b      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d3c:	e008      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d42:	e005      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d48:	e002      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d4a:	2340      	movs	r3, #64	@ 0x40
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	4a55      	ldr	r2, [pc, #340]	@ (8001ea8 <HAL_DMA_IRQHandler+0x208>)
 8001d52:	6053      	str	r3, [r2, #4]
=======
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	2204      	movs	r2, #4
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d04f      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xc8>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0204 	bic.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a66      	ldr	r2, [pc, #408]	@ (8001e1c <HAL_DMA_IRQHandler+0x1f0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d029      	beq.n	8001cda <HAL_DMA_IRQHandler+0xae>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_DMA_IRQHandler+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0xaa>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a63      	ldr	r2, [pc, #396]	@ (8001e24 <HAL_DMA_IRQHandler+0x1f8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01a      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xa4>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a62      	ldr	r2, [pc, #392]	@ (8001e28 <HAL_DMA_IRQHandler+0x1fc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_IRQHandler+0x9e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	@ (8001e2c <HAL_DMA_IRQHandler+0x200>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x98>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e30 <HAL_DMA_IRQHandler+0x204>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x92>
 8001cb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cbc:	e00e      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001cc2:	e00b      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001cc8:	e008      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cce:	e005      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd4:	e002      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cd6:	2340      	movs	r3, #64	@ 0x40
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	4a55      	ldr	r2, [pc, #340]	@ (8001e34 <HAL_DMA_IRQHandler+0x208>)
 8001cde:	6053      	str	r3, [r2, #4]
>>>>>>> 2814753 (long press added)

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8094 	beq.w	8001e86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d66:	e08e      	b.n	8001e86 <HAL_DMA_IRQHandler+0x1e6>
=======
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8094 	beq.w	8001e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cf2:	e08e      	b.n	8001e12 <HAL_DMA_IRQHandler+0x1e6>
>>>>>>> 2814753 (long press added)
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
<<<<<<< HEAD
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d056      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x186>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d051      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020a 	bic.w	r2, r2, #10
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a38      	ldr	r2, [pc, #224]	@ (8001e90 <HAL_DMA_IRQHandler+0x1f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d029      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x166>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a37      	ldr	r2, [pc, #220]	@ (8001e94 <HAL_DMA_IRQHandler+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x162>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	@ (8001e98 <HAL_DMA_IRQHandler+0x1f8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x15c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a34      	ldr	r2, [pc, #208]	@ (8001e9c <HAL_DMA_IRQHandler+0x1fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d012      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x156>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <HAL_DMA_IRQHandler+0x200>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x150>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a31      	ldr	r2, [pc, #196]	@ (8001ea4 <HAL_DMA_IRQHandler+0x204>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_DMA_IRQHandler+0x14a>
 8001de4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001de8:	e00e      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dee:	e00b      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001df0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df4:	e008      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001df6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dfa:	e005      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e00:	e002      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001e02:	2320      	movs	r3, #32
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001e06:	2302      	movs	r3, #2
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_DMA_IRQHandler+0x208>)
 8001e0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d034      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e24:	e02f      	b.n	8001e86 <HAL_DMA_IRQHandler+0x1e6>
=======
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d056      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x186>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d051      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10b      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020a 	bic.w	r2, r2, #10
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <HAL_DMA_IRQHandler+0x1f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d029      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x166>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a37      	ldr	r2, [pc, #220]	@ (8001e20 <HAL_DMA_IRQHandler+0x1f4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x162>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a35      	ldr	r2, [pc, #212]	@ (8001e24 <HAL_DMA_IRQHandler+0x1f8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01a      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x15c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a34      	ldr	r2, [pc, #208]	@ (8001e28 <HAL_DMA_IRQHandler+0x1fc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d012      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x156>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a32      	ldr	r2, [pc, #200]	@ (8001e2c <HAL_DMA_IRQHandler+0x200>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00a      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x150>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a31      	ldr	r2, [pc, #196]	@ (8001e30 <HAL_DMA_IRQHandler+0x204>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d102      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x14a>
 8001d70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d74:	e00e      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d7a:	e00b      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d80:	e008      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d86:	e005      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d8c:	e002      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d8e:	2320      	movs	r3, #32
 8001d90:	e000      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d92:	2302      	movs	r3, #2
 8001d94:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <HAL_DMA_IRQHandler+0x208>)
 8001d96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d034      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001db0:	e02f      	b.n	8001e12 <HAL_DMA_IRQHandler+0x1e6>
>>>>>>> 2814753 (long press added)
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
<<<<<<< HEAD
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x1e8>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x1e8>
=======
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	2208      	movs	r2, #8
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d028      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x1e8>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x1e8>
>>>>>>> 2814753 (long press added)
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020e 	bic.w	r2, r2, #14
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
    }
  }
  return;
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
}
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40020008 	.word	0x40020008
 8001e94:	4002001c 	.word	0x4002001c
 8001e98:	40020030 	.word	0x40020030
 8001e9c:	40020044 	.word	0x40020044
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	4002006c 	.word	0x4002006c
 8001ea8:	40020000 	.word	0x40020000

08001eac <DMA_SetConfig>:
=======
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020e 	bic.w	r2, r2, #14
 8001dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
    }
  }
  return;
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
}
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020008 	.word	0x40020008
 8001e20:	4002001c 	.word	0x4002001c
 8001e24:	40020030 	.word	0x40020030
 8001e28:	40020044 	.word	0x40020044
 8001e2c:	40020058 	.word	0x40020058
 8001e30:	4002006c 	.word	0x4002006c
 8001e34:	40020000 	.word	0x40020000

08001e38 <DMA_SetConfig>:
>>>>>>> 2814753 (long press added)
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d108      	bne.n	8001eec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
=======
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d108      	bne.n	8001e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	60da      	str	r2, [r3, #12]
>>>>>>> 2814753 (long press added)
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 8001eea:	e007      	b.n	8001efc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_GPIO_Init>:
=======
 8001e76:	e007      	b.n	8001e88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_GPIO_Init>:
>>>>>>> 2814753 (long press added)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	@ 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	@ 0x2c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> 2814753 (long press added)
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
=======
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
>>>>>>> 2814753 (long press added)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001f1a:	e169      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8158 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
=======
 8001ea6:	e169      	b.n	800217c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8158 	bne.w	8002176 <HAL_GPIO_Init+0x2e2>
>>>>>>> 2814753 (long press added)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a9a      	ldr	r2, [pc, #616]	@ (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f44:	4a98      	ldr	r2, [pc, #608]	@ (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d875      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a98      	ldr	r2, [pc, #608]	@ (80021ac <HAL_GPIO_Init+0x2a4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d058      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f50:	4a96      	ldr	r2, [pc, #600]	@ (80021ac <HAL_GPIO_Init+0x2a4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d86f      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f56:	4a96      	ldr	r2, [pc, #600]	@ (80021b0 <HAL_GPIO_Init+0x2a8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d052      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a94      	ldr	r2, [pc, #592]	@ (80021b0 <HAL_GPIO_Init+0x2a8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d869      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f62:	4a94      	ldr	r2, [pc, #592]	@ (80021b4 <HAL_GPIO_Init+0x2ac>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04c      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f68:	4a92      	ldr	r2, [pc, #584]	@ (80021b4 <HAL_GPIO_Init+0x2ac>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d863      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a92      	ldr	r2, [pc, #584]	@ (80021b8 <HAL_GPIO_Init+0x2b0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d046      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f74:	4a90      	ldr	r2, [pc, #576]	@ (80021b8 <HAL_GPIO_Init+0x2b0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d85d      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_GPIO_Init+0xcc>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d859      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f82:	a201      	add	r2, pc, #4	@ (adr r2, 8001f88 <HAL_GPIO_Init+0x80>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08002031 	.word	0x08002031
 8001f98:	08002037 	.word	0x08002037
 8001f9c:	08002037 	.word	0x08002037
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002037 	.word	0x08002037
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002037 	.word	0x08002037
 8001fb8:	08002037 	.word	0x08002037
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002037 	.word	0x08002037
 8001fc4:	08002037 	.word	0x08002037
 8001fc8:	08002037 	.word	0x08002037
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	4a79      	ldr	r2, [pc, #484]	@ (80021bc <HAL_GPIO_Init+0x2b4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
=======
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a9a      	ldr	r2, [pc, #616]	@ (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d05e      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a98      	ldr	r2, [pc, #608]	@ (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d875      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a98      	ldr	r2, [pc, #608]	@ (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d058      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001edc:	4a96      	ldr	r2, [pc, #600]	@ (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d86f      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a96      	ldr	r2, [pc, #600]	@ (800213c <HAL_GPIO_Init+0x2a8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d052      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ee8:	4a94      	ldr	r2, [pc, #592]	@ (800213c <HAL_GPIO_Init+0x2a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d869      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001eee:	4a94      	ldr	r2, [pc, #592]	@ (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04c      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ef4:	4a92      	ldr	r2, [pc, #584]	@ (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d863      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001efa:	4a92      	ldr	r2, [pc, #584]	@ (8002144 <HAL_GPIO_Init+0x2b0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d046      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001f00:	4a90      	ldr	r2, [pc, #576]	@ (8002144 <HAL_GPIO_Init+0x2b0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d85d      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d82a      	bhi.n	8001f60 <HAL_GPIO_Init+0xcc>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d859      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <HAL_GPIO_Init+0x80>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001fbd 	.word	0x08001fbd
 8001f24:	08001fc3 	.word	0x08001fc3
 8001f28:	08001fc3 	.word	0x08001fc3
 8001f2c:	08001fc3 	.word	0x08001fc3
 8001f30:	08001fc3 	.word	0x08001fc3
 8001f34:	08001fc3 	.word	0x08001fc3
 8001f38:	08001fc3 	.word	0x08001fc3
 8001f3c:	08001fc3 	.word	0x08001fc3
 8001f40:	08001fc3 	.word	0x08001fc3
 8001f44:	08001fc3 	.word	0x08001fc3
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001fc3 	.word	0x08001fc3
 8001f50:	08001fc3 	.word	0x08001fc3
 8001f54:	08001fc3 	.word	0x08001fc3
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f85 	.word	0x08001f85
 8001f60:	4a79      	ldr	r2, [pc, #484]	@ (8002148 <HAL_GPIO_Init+0x2b4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
>>>>>>> 2814753 (long press added)
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e029      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e024      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01f      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e01a      	b.n	8002038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e013      	b.n	8002038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e009      	b.n	8002038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e003      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x130>
          break;
 8002036:	bf00      	nop
=======
 8001f66:	e02c      	b.n	8001fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e029      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e024      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e01f      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e01a      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f96:	2304      	movs	r3, #4
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e013      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	611a      	str	r2, [r3, #16]
          break;
 8001fae:	e009      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	615a      	str	r2, [r3, #20]
          break;
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          break;
 8001fc2:	bf00      	nop
>>>>>>> 2814753 (long press added)
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	@ 0xff
 800203c:	d801      	bhi.n	8002042 <HAL_GPIO_Init+0x13a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_Init+0x13e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	@ 0xff
 800204c:	d802      	bhi.n	8002054 <HAL_GPIO_Init+0x14c>
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x152>
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	3b08      	subs	r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	210f      	movs	r1, #15
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]
=======
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	@ 0xff
 8001fc8:	d801      	bhi.n	8001fce <HAL_GPIO_Init+0x13a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_Init+0x13e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	@ 0xff
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_GPIO_Init+0x14c>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x152>
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	3b08      	subs	r3, #8
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	210f      	movs	r1, #15
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80b1 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002088:	4b4d      	ldr	r3, [pc, #308]	@ (80021c0 <HAL_GPIO_Init+0x2b8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a4c      	ldr	r2, [pc, #304]	@ (80021c0 <HAL_GPIO_Init+0x2b8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b4a      	ldr	r3, [pc, #296]	@ (80021c0 <HAL_GPIO_Init+0x2b8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a0:	4a48      	ldr	r2, [pc, #288]	@ (80021c4 <HAL_GPIO_Init+0x2bc>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a40      	ldr	r2, [pc, #256]	@ (80021c8 <HAL_GPIO_Init+0x2c0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_GPIO_Init+0x1ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3f      	ldr	r2, [pc, #252]	@ (80021cc <HAL_GPIO_Init+0x2c4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00d      	beq.n	80020f0 <HAL_GPIO_Init+0x1e8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3e      	ldr	r2, [pc, #248]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_Init+0x1e4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3d      	ldr	r2, [pc, #244]	@ (80021d4 <HAL_GPIO_Init+0x2cc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_GPIO_Init+0x1e0>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e006      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020e8:	2304      	movs	r3, #4
 80020ea:	e004      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020f4:	2300      	movs	r3, #0
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	f002 0203 	and.w	r2, r2, #3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4093      	lsls	r3, r2
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002106:	492f      	ldr	r1, [pc, #188]	@ (80021c4 <HAL_GPIO_Init+0x2bc>)
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80b1 	beq.w	8002176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002014:	4b4d      	ldr	r3, [pc, #308]	@ (800214c <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <HAL_GPIO_Init+0x2b8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b4a      	ldr	r3, [pc, #296]	@ (800214c <HAL_GPIO_Init+0x2b8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800202c:	4a48      	ldr	r2, [pc, #288]	@ (8002150 <HAL_GPIO_Init+0x2bc>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <HAL_GPIO_Init+0x2c0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1ec>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3f      	ldr	r2, [pc, #252]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1e8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3e      	ldr	r2, [pc, #248]	@ (800215c <HAL_GPIO_Init+0x2c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1e4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3d      	ldr	r2, [pc, #244]	@ (8002160 <HAL_GPIO_Init+0x2cc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1e0>
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002074:	2304      	movs	r3, #4
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002080:	2300      	movs	r3, #0
 8002082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002092:	492f      	ldr	r1, [pc, #188]	@ (8002150 <HAL_GPIO_Init+0x2bc>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 2814753 (long press added)


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002120:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	492c      	ldr	r1, [pc, #176]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x234>
=======
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	492c      	ldr	r1, [pc, #176]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x234>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 800212e:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4928      	ldr	r1, [pc, #160]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002138:	4013      	ands	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
=======
 80020ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4928      	ldr	r1, [pc, #160]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
>>>>>>> 2814753 (long press added)
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002148:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4922      	ldr	r1, [pc, #136]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x25c>
=======
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d4:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4922      	ldr	r1, [pc, #136]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x25c>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	491e      	ldr	r1, [pc, #120]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002160:	4013      	ands	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
=======
 80020e2:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	491e      	ldr	r1, [pc, #120]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
>>>>>>> 2814753 (long press added)
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4918      	ldr	r1, [pc, #96]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x284>
=======
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4918      	ldr	r1, [pc, #96]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x284>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 800217e:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4914      	ldr	r1, [pc, #80]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002188:	4013      	ands	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
=======
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4914      	ldr	r1, [pc, #80]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d021      	beq.n	80021dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	490e      	ldr	r1, [pc, #56]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e021      	b.n	80021ea <HAL_GPIO_Init+0x2e2>
 80021a6:	bf00      	nop
 80021a8:	10320000 	.word	0x10320000
 80021ac:	10310000 	.word	0x10310000
 80021b0:	10220000 	.word	0x10220000
 80021b4:	10210000 	.word	0x10210000
 80021b8:	10120000 	.word	0x10120000
 80021bc:	10110000 	.word	0x10110000
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40010800 	.word	0x40010800
 80021cc:	40010c00 	.word	0x40010c00
 80021d0:	40011000 	.word	0x40011000
 80021d4:	40011400 	.word	0x40011400
 80021d8:	40010400 	.word	0x40010400
=======
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d021      	beq.n	8002168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	490e      	ldr	r1, [pc, #56]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e021      	b.n	8002176 <HAL_GPIO_Init+0x2e2>
 8002132:	bf00      	nop
 8002134:	10320000 	.word	0x10320000
 8002138:	10310000 	.word	0x10310000
 800213c:	10220000 	.word	0x10220000
 8002140:	10210000 	.word	0x10210000
 8002144:	10120000 	.word	0x10120000
 8002148:	10110000 	.word	0x10110000
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	40010400 	.word	0x40010400
>>>>>>> 2814753 (long press added)
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_GPIO_Init+0x304>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4909      	ldr	r1, [pc, #36]	@ (800220c <HAL_GPIO_Init+0x304>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
=======
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_GPIO_Init+0x304>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4909      	ldr	r1, [pc, #36]	@ (8002198 <HAL_GPIO_Init+0x304>)
 8002172:	4013      	ands	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
>>>>>>> 2814753 (long press added)
        }
      }
    }

	position++;
<<<<<<< HEAD
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f ae8e 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	372c      	adds	r7, #44	@ 0x2c
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_ReadPin>:
=======
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ae8e 	bne.w	8001ea8 <HAL_GPIO_Init+0x14>
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	372c      	adds	r7, #44	@ 0x2c
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_ReadPin>:
>>>>>>> 2814753 (long press added)
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
=======
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
>>>>>>> 2814753 (long press added)
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e001      	b.n	8002232 <HAL_GPIO_ReadPin+0x22>
=======
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_WritePin>:
=======
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_GPIO_WritePin>:
>>>>>>> 2814753 (long press added)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
 800224a:	4613      	mov	r3, r2
 800224c:	707b      	strb	r3, [r7, #1]
=======
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	807b      	strh	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
>>>>>>> 2814753 (long press added)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800224e:	787b      	ldrb	r3, [r7, #1]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]
=======
 80021da:	787b      	ldrb	r3, [r7, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
>>>>>>> 2814753 (long press added)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 800225a:	e003      	b.n	8002264 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	611a      	str	r2, [r3, #16]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> 2814753 (long press added)
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800227a:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f806 	bl	80022a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_EXTI_Callback>:
=======
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002212:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f806 	bl	800222c <HAL_GPIO_EXTI_Callback>
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_EXTI_Callback>:
>>>>>>> 2814753 (long press added)
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
=======
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
>>>>>>> 2814753 (long press added)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_I2C_Init>:
=======
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_Init>:
>>>>>>> 2814753 (long press added)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
=======
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e12b      	b.n	800251e <HAL_I2C_Init+0x26a>
=======
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
>>>>>>> 2814753 (long press added)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 2814753 (long press added)

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe f812 	bl	8000304 <HAL_I2C_MspInit>
=======
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe f84c 	bl	8000304 <HAL_I2C_MspInit>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	@ 0x24
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002318:	f002 fd7c 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 800231c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a81      	ldr	r2, [pc, #516]	@ (8002528 <HAL_I2C_Init+0x274>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d807      	bhi.n	8002338 <HAL_I2C_Init+0x84>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a80      	ldr	r2, [pc, #512]	@ (800252c <HAL_I2C_Init+0x278>)
 800232c:	4293      	cmp	r3, r2
 800232e:	bf94      	ite	ls
 8002330:	2301      	movls	r3, #1
 8002332:	2300      	movhi	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e006      	b.n	8002346 <HAL_I2C_Init+0x92>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a7d      	ldr	r2, [pc, #500]	@ (8002530 <HAL_I2C_Init+0x27c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0e7      	b.n	800251e <HAL_I2C_Init+0x26a>
=======
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	@ 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f002 fd7c 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	@ (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	@ (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	@ (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
>>>>>>> 2814753 (long press added)
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a78      	ldr	r2, [pc, #480]	@ (8002534 <HAL_I2C_Init+0x280>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9b      	lsrs	r3, r3, #18
 8002358:	60bb      	str	r3, [r7, #8]
=======
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	@ (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]
>>>>>>> 2814753 (long press added)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
=======
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
>>>>>>> 2814753 (long press added)

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a6a      	ldr	r2, [pc, #424]	@ (8002528 <HAL_I2C_Init+0x274>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d802      	bhi.n	8002388 <HAL_I2C_Init+0xd4>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3301      	adds	r3, #1
 8002386:	e009      	b.n	800239c <HAL_I2C_Init+0xe8>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	4a69      	ldr	r2, [pc, #420]	@ (8002538 <HAL_I2C_Init+0x284>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	3301      	adds	r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6213      	str	r3, [r2, #32]
=======
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	@ (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	@ (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]
>>>>>>> 2814753 (long press added)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	495c      	ldr	r1, [pc, #368]	@ (8002528 <HAL_I2C_Init+0x274>)
 80023b8:	428b      	cmp	r3, r1
 80023ba:	d819      	bhi.n	80023f0 <HAL_I2C_Init+0x13c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e59      	subs	r1, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023d0:	400b      	ands	r3, r1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_I2C_Init+0x138>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e59      	subs	r1, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	e051      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 80023ec:	2304      	movs	r3, #4
 80023ee:	e04f      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <HAL_I2C_Init+0x168>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1e58      	subs	r0, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e012      	b.n	8002442 <HAL_I2C_Init+0x18e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x196>
 8002446:	2301      	movs	r3, #1
 8002448:	e022      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10e      	bne.n	8002470 <HAL_I2C_Init+0x1bc>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e58      	subs	r0, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	440b      	add	r3, r1
 8002460:	fbb0 f3f3 	udiv	r3, r0, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800246e:	e00f      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6809      	ldr	r1, [r1, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	61cb      	str	r3, [r1, #28]
=======
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	@ (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]
>>>>>>> 2814753 (long press added)

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
=======
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6911      	ldr	r1, [r2, #16]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68d2      	ldr	r2, [r2, #12]
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6093      	str	r3, [r2, #8]
=======
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]
>>>>>>> 2814753 (long press added)

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	000186a0 	.word	0x000186a0
 800252c:	001e847f 	.word	0x001e847f
 8002530:	003d08ff 	.word	0x003d08ff
 8002534:	431bde83 	.word	0x431bde83
 8002538:	10624dd3 	.word	0x10624dd3

0800253c <HAL_I2C_Master_Transmit>:
=======
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Master_Transmit>:
>>>>>>> 2814753 (long press added)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	461a      	mov	r2, r3
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
 800254c:	4613      	mov	r3, r2
 800254e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff f938 	bl	80017c4 <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	f040 80e0 	bne.w	8002724 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2319      	movs	r3, #25
 800256a:	2201      	movs	r2, #1
 800256c:	4970      	ldr	r1, [pc, #448]	@ (8002730 <HAL_I2C_Master_Transmit+0x1f4>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f964 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e0d3      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
=======
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	461a      	mov	r2, r3
 80024d4:	460b      	mov	r3, r1
 80024d6:	817b      	strh	r3, [r7, #10]
 80024d8:	4613      	mov	r3, r2
 80024da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff f938 	bl	8001750 <HAL_GetTick>
 80024e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 80e0 	bne.w	80026b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	4970      	ldr	r1, [pc, #448]	@ (80026bc <HAL_I2C_Master_Transmit+0x1f4>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f964 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	e0d3      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 2814753 (long press added)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Master_Transmit+0x50>
 8002588:	2302      	movs	r3, #2
 800258a:	e0cc      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d007      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
=======
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x50>
 8002514:	2302      	movs	r3, #2
 8002516:	e0cc      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d007      	beq.n	800253e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2221      	movs	r2, #33	@ 0x21
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2210      	movs	r2, #16
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a50      	ldr	r2, [pc, #320]	@ (8002734 <HAL_I2C_Master_Transmit+0x1f8>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f89c 	bl	8002738 <I2C_MasterRequestWrite>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e08d      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
=======
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2221      	movs	r2, #33	@ 0x21
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2210      	movs	r2, #16
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a50      	ldr	r2, [pc, #320]	@ (80026c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6a3a      	ldr	r2, [r7, #32]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f89c 	bl	80026c4 <I2C_MasterRequestWrite>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e08d      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 2814753 (long press added)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002620:	e066      	b.n	80026f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	6a39      	ldr	r1, [r7, #32]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa22 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b04      	cmp	r3, #4
 8002638:	d107      	bne.n	800264a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06b      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025ac:	e066      	b.n	800267c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6a39      	ldr	r1, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fa22 	bl	80029fc <I2C_WaitOnTXEFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d107      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 2814753 (long press added)
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b04      	cmp	r3, #4
 800268a:	d11b      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0x188>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d017      	beq.n	80026c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x188>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d017      	beq.n	8002650 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> 2814753 (long press added)
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6a39      	ldr	r1, [r7, #32]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fa19 	bl	8002b00 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d107      	bne.n	80026ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e01a      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d194      	bne.n	8002622 <HAL_I2C_Master_Transmit+0xe6>
=======
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6a39      	ldr	r1, [r7, #32]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa19 	bl	8002a8c <I2C_WaitOnBTFFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002676:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01a      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d194      	bne.n	80025ae <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> 2814753 (long press added)
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e000      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	00100002 	.word	0x00100002
 8002734:	ffff0000 	.word	0xffff0000

08002738 <I2C_MasterRequestWrite>:
=======
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00100002 	.word	0x00100002
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <I2C_MasterRequestWrite>:
>>>>>>> 2814753 (long press added)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d006      	beq.n	8002762 <I2C_MasterRequestWrite+0x2a>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d003      	beq.n	8002762 <I2C_MasterRequestWrite+0x2a>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002760:	d108      	bne.n	8002774 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00b      	b.n	800278c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	2b12      	cmp	r3, #18
 800277a:	d107      	bne.n	800278c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278a:	601a      	str	r2, [r3, #0]
=======
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d006      	beq.n	80026ee <I2C_MasterRequestWrite+0x2a>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d003      	beq.n	80026ee <I2C_MasterRequestWrite+0x2a>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ec:	d108      	bne.n	8002700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e00b      	b.n	8002718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	2b12      	cmp	r3, #18
 8002706:	d107      	bne.n	8002718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002716:	601a      	str	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f84f 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b2:	d103      	bne.n	80027bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e035      	b.n	800282c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c8:	d108      	bne.n	80027dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e01b      	b.n	8002814 <I2C_MasterRequestWrite+0xdc>
=======
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f84f 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800273e:	d103      	bne.n	8002748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e035      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002754:	d108      	bne.n	8002768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	e01b      	b.n	80027a0 <I2C_MasterRequestWrite+0xdc>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 80027dc:	897b      	ldrh	r3, [r7, #10]
 80027de:	11db      	asrs	r3, r3, #7
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 0306 	and.w	r3, r3, #6
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f063 030f 	orn	r3, r3, #15
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	490e      	ldr	r1, [pc, #56]	@ (8002834 <I2C_MasterRequestWrite+0xfc>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f898 	bl	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e010      	b.n	800282c <I2C_MasterRequestWrite+0xf4>
=======
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	11db      	asrs	r3, r3, #7
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0306 	and.w	r3, r3, #6
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f063 030f 	orn	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	490e      	ldr	r1, [pc, #56]	@ (80027c0 <I2C_MasterRequestWrite+0xfc>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f898 	bl	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e010      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
>>>>>>> 2814753 (long press added)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
=======
 8002796:	897b      	ldrh	r3, [r7, #10]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]
>>>>>>> 2814753 (long press added)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <I2C_MasterRequestWrite+0x100>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f888 	bl	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	00010008 	.word	0x00010008
 8002838:	00010002 	.word	0x00010002

0800283c <I2C_WaitOnFlagUntilTimeout>:
=======
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4907      	ldr	r1, [pc, #28]	@ (80027c4 <I2C_MasterRequestWrite+0x100>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f888 	bl	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00010008 	.word	0x00010008
 80027c4:	00010002 	.word	0x00010002

080027c8 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> 2814753 (long press added)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284c:	e048      	b.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d044      	beq.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe ffb5 	bl	80017c4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d139      	bne.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
=======
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	e048      	b.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d044      	beq.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7fe ffb5 	bl	8001750 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d139      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10d      	bne.n	800281e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	e00c      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x70>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	43da      	mvns	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d116      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e023      	b.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
>>>>>>> 2814753 (long press added)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
<<<<<<< HEAD
 8002874:	d10d      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x56>
=======
 8002874:	d10d      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xca>
>>>>>>> 2814753 (long press added)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	43da      	mvns	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
<<<<<<< HEAD
 8002890:	e00c      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x70>
=======
 8002890:	e00c      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xe4>
>>>>>>> 2814753 (long press added)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
<<<<<<< HEAD
 80028b0:	d116      	bne.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e023      	b.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10d      	bne.n	8002906 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	e00c      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	43da      	mvns	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	429a      	cmp	r2, r3
 8002924:	d093      	beq.n	800284e <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 80028b0:	d093      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> 2814753 (long press added)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800293e:	e071      	b.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294e:	d123      	bne.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e067      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ca:	e071      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d123      	bne.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e067      	b.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> 2814753 (long press added)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d041      	beq.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	f7fe ff10 	bl	80017c4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d136      	bne.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d10c      	bne.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4013      	ands	r3, r2
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e00b      	b.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e021      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10c      	bne.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	43da      	mvns	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e00b      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f af6d 	bne.w	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d041      	beq.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7fe ff10 	bl	8001750 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d136      	bne.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10c      	bne.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	e00b      	b.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	43da      	mvns	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e021      	b.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10c      	bne.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e00b      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f af6d 	bne.w	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> 2814753 (long press added)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7c:	e034      	b.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f886 	bl	8002b90 <I2C_IsAcknowledgeFailed>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e034      	b.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	e034      	b.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f886 	bl	8002b1c <I2C_IsAcknowledgeFailed>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e034      	b.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> 2814753 (long press added)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d028      	beq.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fe95 	bl	80017c4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11d      	bne.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab6:	2b80      	cmp	r3, #128	@ 0x80
 8002ab8:	d016      	beq.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e007      	b.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	d1c3      	bne.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d028      	beq.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7fe fe95 	bl	8001750 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b80      	cmp	r3, #128	@ 0x80
 8002a44:	d016      	beq.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d1c3      	bne.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> 2814753 (long press added)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b0c:	e034      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f83e 	bl	8002b90 <I2C_IsAcknowledgeFailed>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e034      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a98:	e034      	b.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f83e 	bl	8002b1c <I2C_IsAcknowledgeFailed>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e034      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> 2814753 (long press added)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d028      	beq.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fe4d 	bl	80017c4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11d      	bne.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d016      	beq.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d1c3      	bne.n	8002b0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d028      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe fe4d 	bl	8001750 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d016      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e007      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d1c3      	bne.n	8002a9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_IsAcknowledgeFailed>:
=======
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_IsAcknowledgeFailed>:
>>>>>>> 2814753 (long press added)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba6:	d11b      	bne.n	8002be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_PCD_Init>:
=======
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b32:	d11b      	bne.n	8002b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_PCD_Init>:
>>>>>>> 2814753 (long press added)
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
=======
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0e8      	b.n	8002dd0 <HAL_PCD_Init+0x1e4>
=======
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0e8      	b.n	8002d5c <HAL_PCD_Init+0x1e4>
>>>>>>> 2814753 (long press added)
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
=======
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
>>>>>>> 2814753 (long press added)

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f007 fc76 	bl	800a504 <HAL_PCD_MspInit>
=======
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f007 fc76 	bl	800a490 <HAL_PCD_MspInit>
>>>>>>> 2814753 (long press added)
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fd91 	bl	8006752 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3a:	f003 fd67 	bl	800670c <USB_CoreInit>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0bf      	b.n	8002dd0 <HAL_PCD_Init+0x1e4>
=======
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fd91 	bl	80066de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc6:	f003 fd67 	bl	8006698 <USB_CoreInit>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0bf      	b.n	8002d5c <HAL_PCD_Init+0x1e4>
>>>>>>> 2814753 (long press added)
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
<<<<<<< HEAD
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fd95 	bl	8006786 <USB_SetCurrentMode>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0b0      	b.n	8002dd0 <HAL_PCD_Init+0x1e4>
=======
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fd95 	bl	8006712 <USB_SetCurrentMode>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0b0      	b.n	8002d5c <HAL_PCD_Init+0x1e4>
>>>>>>> 2814753 (long press added)
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
<<<<<<< HEAD
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e03e      	b.n	8002cf2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	3311      	adds	r3, #17
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3310      	adds	r3, #16
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	701a      	strb	r2, [r3, #0]
=======
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e03e      	b.n	8002c7e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3311      	adds	r3, #17
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3310      	adds	r3, #16
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	701a      	strb	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
<<<<<<< HEAD
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3313      	adds	r3, #19
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3324      	adds	r3, #36	@ 0x24
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	791b      	ldrb	r3, [r3, #4]
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3bb      	bcc.n	8002c74 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e044      	b.n	8002d8c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3b5      	bcc.n	8002d02 <HAL_PCD_Init+0x116>
=======
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3313      	adds	r3, #19
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3320      	adds	r3, #32
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3324      	adds	r3, #36	@ 0x24
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3bb      	bcc.n	8002c00 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e044      	b.n	8002d18 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	791b      	ldrb	r3, [r3, #4]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3b5      	bcc.n	8002c8e <HAL_PCD_Init+0x116>
>>>>>>> 2814753 (long press added)
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	f003 fcfd 	bl	800679e <USB_DevInit>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00c      	b.n	8002dd0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 ff7c 	bl	8008cc6 <USB_DevDisconnect>

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_Start>:
=======
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d2c:	f003 fcfd 	bl	800672a <USB_DevInit>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00c      	b.n	8002d5c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f005 ff7c 	bl	8008c52 <USB_DevDisconnect>

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_PCD_Start>:
>>>>>>> 2814753 (long press added)
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_PCD_Start+0x16>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e016      	b.n	8002e1c <HAL_PCD_Start+0x44>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fc93 	bl	8006726 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e00:	2101      	movs	r1, #1
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f007 fdcb 	bl	800a99e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f005 ff50 	bl	8008cb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_PCD_IRQHandler>:
=======
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_PCD_Start+0x16>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e016      	b.n	8002da8 <HAL_PCD_Start+0x44>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fc93 	bl	80066b2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f007 fdcb 	bl	800a92a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f005 ff50 	bl	8008c3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_IRQHandler>:
>>>>>>> 2814753 (long press added)
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 ff52 	bl	8008cda <USB_ReadInterrupts>
 8002e36:	61b8      	str	r0, [r7, #24]
=======
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 ff52 	bl	8008c66 <USB_ReadInterrupts>
 8002dc2:	61b8      	str	r0, [r7, #24]
>>>>>>> 2814753 (long press added)
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
<<<<<<< HEAD
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x26>
=======
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_PCD_IRQHandler+0x26>
>>>>>>> 2814753 (long press added)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
<<<<<<< HEAD
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fb03 	bl	800344e <PCD_EP_ISR_Handler>

    return;
 8002e48:	e119      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e66:	b292      	uxth	r2, r2
 8002e68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
=======
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fb03 	bl	80033da <PCD_EP_ISR_Handler>

    return;
 8002dd4:	e119      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df2:	b292      	uxth	r2, r2
 8002df4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
>>>>>>> 2814753 (long press added)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f007 fbc4 	bl	800a5fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e72:	2100      	movs	r1, #0
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f905 	bl	8003084 <HAL_PCD_SetAddress>

    return;
 8002e7a:	e100      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00c      	beq.n	8002ea0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e9e:	e0ee      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ec2:	e0dc      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d027      	beq.n	8002f1e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0204 	bic.w	r2, r2, #4
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
=======
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f007 fbc4 	bl	800a586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f905 	bl	8003010 <HAL_PCD_SetAddress>

    return;
 8002e06:	e100      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e24:	b292      	uxth	r2, r2
 8002e26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e2a:	e0ee      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e4e:	e0dc      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d027      	beq.n	8002eaa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0204 	bic.w	r2, r2, #4
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	b292      	uxth	r2, r2
 8002e86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
>>>>>>> 2814753 (long press added)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f007 fbb4 	bl	800a66c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f16:	b292      	uxth	r2, r2
 8002f18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f1c:	e0af      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8083 	beq.w	8003030 <HAL_PCD_IRQHandler+0x20c>
=======
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f007 fbb4 	bl	800a5f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ea8:	e0af      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8083 	beq.w	8002fbc <HAL_PCD_IRQHandler+0x20c>
>>>>>>> 2814753 (long press added)
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
<<<<<<< HEAD
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	e010      	b.n	8002f52 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	441a      	add	r2, r3
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
 8002f3e:	8812      	ldrh	r2, [r2, #0]
 8002f40:	b292      	uxth	r2, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	3320      	adds	r3, #32
 8002f46:	443b      	add	r3, r7
 8002f48:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f4c:	7ffb      	ldrb	r3, [r7, #31]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	7ffb      	ldrb	r3, [r7, #31]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	d9eb      	bls.n	8002f30 <HAL_PCD_IRQHandler+0x10c>
=======
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e010      	b.n	8002ede <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	3320      	adds	r3, #32
 8002ed2:	443b      	add	r3, r7
 8002ed4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	3301      	adds	r3, #1
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b07      	cmp	r3, #7
 8002ee2:	d9eb      	bls.n	8002ebc <HAL_PCD_IRQHandler+0x10c>
>>>>>>> 2814753 (long press added)
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
<<<<<<< HEAD
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	b292      	uxth	r2, r2
 8002f84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f88:	bf00      	nop
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f6      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x166>
=======
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f14:	bf00      	nop
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f6      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x166>
>>>>>>> 2814753 (long press added)
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
<<<<<<< HEAD
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e00f      	b.n	8002fda <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fba:	7ffb      	ldrb	r3, [r7, #31]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	7ffa      	ldrb	r2, [r7, #31]
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	440a      	add	r2, r1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	3320      	adds	r3, #32
 8002fcc:	443b      	add	r3, r7
 8002fce:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fd2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d9ec      	bls.n	8002fba <HAL_PCD_IRQHandler+0x196>
=======
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e00f      	b.n	8002f66 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	7ffa      	ldrb	r2, [r7, #31]
 8002f50:	0092      	lsls	r2, r2, #2
 8002f52:	440a      	add	r2, r1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	3320      	adds	r3, #32
 8002f58:	443b      	add	r3, r7
 8002f5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	3301      	adds	r3, #1
 8002f64:	77fb      	strb	r3, [r7, #31]
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	d9ec      	bls.n	8002f46 <HAL_PCD_IRQHandler+0x196>
>>>>>>> 2814753 (long press added)
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
<<<<<<< HEAD
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0204 	orr.w	r2, r2, #4
 8003022:	b292      	uxth	r2, r2
 8003024:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
=======
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0208 	orr.w	r2, r2, #8
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f96:	b292      	uxth	r2, r2
 8002f98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0204 	orr.w	r2, r2, #4
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
>>>>>>> 2814753 (long press added)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f007 fb05 	bl	800a638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800302e:	e026      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00f      	beq.n	800305a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800304c:	b292      	uxth	r2, r2
 800304e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
=======
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f007 fb05 	bl	800a5c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fba:	e026      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
>>>>>>> 2814753 (long press added)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f007 fac3 	bl	800a5de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003058:	e011      	b.n	800307e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00c      	beq.n	800307e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003076:	b292      	uxth	r2, r2
 8003078:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800307c:	bf00      	nop
  }
}
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_SetAddress>:
=======
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f007 fac3 	bl	800a56a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fe4:	e011      	b.n	800300a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00c      	beq.n	800300a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003008:	bf00      	nop
  }
}
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_PCD_SetAddress>:
>>>>>>> 2814753 (long press added)
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_PCD_SetAddress+0x1a>
 800309a:	2302      	movs	r3, #2
 800309c:	e012      	b.n	80030c4 <HAL_PCD_SetAddress+0x40>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fde9 	bl	8008c8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_PCD_EP_Open>:
=======
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_PCD_SetAddress+0x1a>
 8003026:	2302      	movs	r3, #2
 8003028:	e012      	b.n	8003050 <HAL_PCD_SetAddress+0x40>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f005 fde9 	bl	8008c18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Open>:
>>>>>>> 2814753 (long press added)
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	70fb      	strb	r3, [r7, #3]
 80030de:	460b      	mov	r3, r1
 80030e0:	803b      	strh	r3, [r7, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0e      	bge.n	8003110 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0207 	and.w	r2, r3, #7
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	705a      	strb	r2, [r3, #1]
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Open+0x62>
=======
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	70fb      	strb	r3, [r7, #3]
 800306a:	460b      	mov	r3, r1
 800306c:	803b      	strh	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	da0e      	bge.n	800309c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	f003 0207 	and.w	r2, r3, #7
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	3310      	adds	r3, #16
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	705a      	strb	r2, [r3, #1]
 800309a:	e00e      	b.n	80030ba <HAL_PCD_EP_Open+0x62>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 0207 	and.w	r2, r3, #7
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800313a:	883a      	ldrh	r2, [r7, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	78ba      	ldrb	r2, [r7, #2]
 8003144:	70da      	strb	r2, [r3, #3]
=======
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 0207 	and.w	r2, r3, #7
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030c6:	883a      	ldrh	r2, [r7, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	78ba      	ldrb	r2, [r7, #2]
 80030d0:	70da      	strb	r2, [r3, #3]
>>>>>>> 2814753 (long press added)
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
<<<<<<< HEAD
 8003146:	78bb      	ldrb	r3, [r7, #2]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d102      	bne.n	8003152 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_PCD_EP_Open+0x94>
 800315c:	2302      	movs	r3, #2
 800315e:	e00e      	b.n	800317e <HAL_PCD_EP_Open+0xb2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fb32 	bl	80067d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800317c:	7afb      	ldrb	r3, [r7, #11]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_PCD_EP_Close>:
=======
 80030d2:	78bb      	ldrb	r3, [r7, #2]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d102      	bne.n	80030de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PCD_EP_Open+0x94>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e00e      	b.n	800310a <HAL_PCD_EP_Open+0xb2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68f9      	ldr	r1, [r7, #12]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fb32 	bl	8006764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003108:	7afb      	ldrb	r3, [r7, #11]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCD_EP_Close>:
>>>>>>> 2814753 (long press added)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da0e      	bge.n	80031b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 0207 	and.w	r2, r3, #7
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	3310      	adds	r3, #16
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	705a      	strb	r2, [r3, #1]
 80031b6:	e00e      	b.n	80031d6 <HAL_PCD_EP_Close+0x50>
=======
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800311e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da0e      	bge.n	8003144 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 0207 	and.w	r2, r3, #7
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	3310      	adds	r3, #16
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	705a      	strb	r2, [r3, #1]
 8003142:	e00e      	b.n	8003162 <HAL_PCD_EP_Close+0x50>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 0207 	and.w	r2, r3, #7
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_PCD_EP_Close+0x6a>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e00e      	b.n	800320e <HAL_PCD_EP_Close+0x88>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 feaa 	bl	8006f58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_PCD_EP_Receive>:
=======
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_PCD_EP_Close+0x6a>
 8003178:	2302      	movs	r3, #2
 800317a:	e00e      	b.n	800319a <HAL_PCD_EP_Close+0x88>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 feaa 	bl	8006ee4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_PCD_EP_Receive>:
>>>>>>> 2814753 (long press added)
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	460b      	mov	r3, r1
 8003224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 0207 	and.w	r2, r3, #7
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2200      	movs	r2, #0
 8003254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	b2da      	uxtb	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6979      	ldr	r1, [r7, #20]
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f861 	bl	8007330 <USB_EPStartXfer>

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_PCD_EP_Transmit>:
=======
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	460b      	mov	r3, r1
 80031b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	f003 0207 	and.w	r2, r3, #7
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6979      	ldr	r1, [r7, #20]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 f861 	bl	80072bc <USB_EPStartXfer>

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_PCD_EP_Transmit>:
>>>>>>> 2814753 (long press added)
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	f003 0207 	and.w	r2, r3, #7
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	3310      	adds	r3, #16
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2201      	movs	r2, #1
 80032c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6979      	ldr	r1, [r7, #20]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 f82a 	bl	8007330 <USB_EPStartXfer>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_PCD_EP_SetStall>:
=======
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003214:	7afb      	ldrb	r3, [r7, #11]
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	3310      	adds	r3, #16
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2201      	movs	r2, #1
 800324e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	b2da      	uxtb	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6979      	ldr	r1, [r7, #20]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 f82a 	bl	80072bc <USB_EPStartXfer>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_PCD_EP_SetStall>:
>>>>>>> 2814753 (long press added)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	7912      	ldrb	r2, [r2, #4]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e04c      	b.n	800339e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003308:	2b00      	cmp	r3, #0
 800330a:	da0e      	bge.n	800332a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 0207 	and.w	r2, r3, #7
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	3310      	adds	r3, #16
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	705a      	strb	r2, [r3, #1]
 8003328:	e00c      	b.n	8003344 <HAL_PCD_EP_SetStall+0x5e>
=======
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	7912      	ldrb	r2, [r2, #4]
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e04c      	b.n	800332a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003294:	2b00      	cmp	r3, #0
 8003296:	da0e      	bge.n	80032b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 0207 	and.w	r2, r3, #7
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	3310      	adds	r3, #16
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	705a      	strb	r2, [r3, #1]
 80032b4:	e00c      	b.n	80032d0 <HAL_PCD_EP_SetStall+0x5e>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_PCD_EP_SetStall+0x7e>
 8003360:	2302      	movs	r3, #2
 8003362:	e01c      	b.n	800339e <HAL_PCD_EP_SetStall+0xb8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	4618      	mov	r0, r3
 8003374:	f005 fb8d 	bl	8008a92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f005 fcb2 	bl	8008cf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_PCD_EP_ClrStall>:
=======
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_EP_SetStall+0x7e>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e01c      	b.n	800332a <HAL_PCD_EP_SetStall+0xb8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	4618      	mov	r0, r3
 8003300:	f005 fb8d 	bl	8008a1e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f005 fcb2 	bl	8008c84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_PCD_EP_ClrStall>:
>>>>>>> 2814753 (long press added)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	7912      	ldrb	r2, [r2, #4]
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e040      	b.n	8003446 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da0e      	bge.n	80033ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 0207 	and.w	r2, r3, #7
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	3310      	adds	r3, #16
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	705a      	strb	r2, [r3, #1]
 80033e8:	e00e      	b.n	8003408 <HAL_PCD_EP_ClrStall+0x62>
=======
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	7912      	ldrb	r2, [r2, #4]
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e040      	b.n	80033d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003354:	2b00      	cmp	r3, #0
 8003356:	da0e      	bge.n	8003376 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 0207 	and.w	r2, r3, #7
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	3310      	adds	r3, #16
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	705a      	strb	r2, [r3, #1]
 8003374:	e00e      	b.n	8003394 <HAL_PCD_EP_ClrStall+0x62>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 0207 	and.w	r2, r3, #7
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_PCD_EP_ClrStall+0x82>
 8003424:	2302      	movs	r3, #2
 8003426:	e00e      	b.n	8003446 <HAL_PCD_EP_ClrStall+0xa0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f005 fb7b 	bl	8008b32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <PCD_EP_ISR_Handler>:
=======
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0207 	and.w	r2, r3, #7
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_PCD_EP_ClrStall+0x82>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e00e      	b.n	80033d2 <HAL_PCD_EP_ClrStall+0xa0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 fb7b 	bl	8008abe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <PCD_EP_ISR_Handler>:
>>>>>>> 2814753 (long press added)
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800344e:	b580      	push	{r7, lr}
 8003450:	b096      	sub	sp, #88	@ 0x58
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
=======
 80033da:	b580      	push	{r7, lr}
 80033dc:	b096      	sub	sp, #88	@ 0x58
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
<<<<<<< HEAD
 8003456:	e3bb      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003460:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003472:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 8175 	bne.w	8003766 <PCD_EP_ISR_Handler+0x318>
=======
 80033e2:	e3bb      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80033fe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 8175 	bne.w	80036f2 <PCD_EP_ISR_Handler+0x318>
>>>>>>> 2814753 (long press added)
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
<<<<<<< HEAD
 800347c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d14e      	bne.n	8003526 <PCD_EP_ISR_Handler+0xd8>
=======
 8003408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d14e      	bne.n	80034b2 <PCD_EP_ISR_Handler+0xd8>
>>>>>>> 2814753 (long press added)
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003498:	81fb      	strh	r3, [r7, #14]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3310      	adds	r3, #16
 80034b0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	3302      	adds	r3, #2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	441a      	add	r2, r3
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	615a      	str	r2, [r3, #20]
=======
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003424:	81fb      	strh	r3, [r7, #14]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003434:	b29b      	uxth	r3, r3
 8003436:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3310      	adds	r3, #16
 800343c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	3302      	adds	r3, #2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003468:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	441a      	add	r2, r3
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	615a      	str	r2, [r3, #20]
>>>>>>> 2814753 (long press added)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
<<<<<<< HEAD
 80034ec:	2100      	movs	r1, #0
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f007 f85b 	bl	800a5aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7b5b      	ldrb	r3, [r3, #13]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8368 	beq.w	8003bd0 <PCD_EP_ISR_Handler+0x782>
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 8363 	bne.w	8003bd0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7b5b      	ldrb	r3, [r3, #13]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003514:	b2da      	uxtb	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	735a      	strb	r2, [r3, #13]
 8003524:	e354      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
=======
 8003478:	2100      	movs	r1, #0
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f007 f85b 	bl	800a536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7b5b      	ldrb	r3, [r3, #13]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8368 	beq.w	8003b5c <PCD_EP_ISR_Handler+0x782>
 800348c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f040 8363 	bne.w	8003b5c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7b5b      	ldrb	r3, [r3, #13]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	735a      	strb	r2, [r3, #13]
 80034b0:	e354      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
>>>>>>> 2814753 (long press added)
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
<<<<<<< HEAD
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800352c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003538:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800353c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d034      	beq.n	80035ae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	3306      	adds	r3, #6
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800357a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003582:	b29b      	uxth	r3, r3
 8003584:	f005 fc09 	bl	8008d9a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29a      	uxth	r2, r3
 8003590:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003594:	4013      	ands	r3, r2
 8003596:	823b      	strh	r3, [r7, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	8a3a      	ldrh	r2, [r7, #16]
 800359e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035a2:	b292      	uxth	r2, r2
 80035a4:	801a      	strh	r2, [r3, #0]
=======
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034b8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d034      	beq.n	800353a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034d8:	b29b      	uxth	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	3306      	adds	r3, #6
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800350a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800350e:	b29b      	uxth	r3, r3
 8003510:	f005 fc09 	bl	8008d26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29a      	uxth	r2, r3
 800351c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003520:	4013      	ands	r3, r2
 8003522:	823b      	strh	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	8a3a      	ldrh	r2, [r7, #16]
 800352a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800352e:	b292      	uxth	r2, r2
 8003530:	801a      	strh	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f006 ffd2 	bl	800a550 <HAL_PCD_SetupStageCallback>
 80035ac:	e310      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f280 830c 	bge.w	8003bd0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29a      	uxth	r2, r3
 80035c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035c4:	4013      	ands	r3, r2
 80035c6:	83fb      	strh	r3, [r7, #30]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	8bfa      	ldrh	r2, [r7, #30]
 80035ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035d2:	b292      	uxth	r2, r2
 80035d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	3306      	adds	r3, #6
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d019      	beq.n	800363e <PCD_EP_ISR_Handler+0x1f0>
 800360a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	6959      	ldr	r1, [r3, #20]
 800361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003622:	b29b      	uxth	r3, r3
 8003624:	f005 fbb9 	bl	8008d9a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	441a      	add	r2, r3
 8003632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003634:	615a      	str	r2, [r3, #20]
=======
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f006 ffd2 	bl	800a4dc <HAL_PCD_SetupStageCallback>
 8003538:	e310      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800353a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800353e:	2b00      	cmp	r3, #0
 8003540:	f280 830c 	bge.w	8003b5c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29a      	uxth	r2, r3
 800354c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003550:	4013      	ands	r3, r2
 8003552:	83fb      	strh	r3, [r7, #30]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	8bfa      	ldrh	r2, [r7, #30]
 800355a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800355e:	b292      	uxth	r2, r2
 8003560:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	3306      	adds	r3, #6
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800358a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800358e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d019      	beq.n	80035ca <PCD_EP_ISR_Handler+0x1f0>
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a4:	6959      	ldr	r1, [r3, #20]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f005 fbb9 	bl	8008d26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	441a      	add	r2, r3
 80035be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c0:	615a      	str	r2, [r3, #20]
>>>>>>> 2814753 (long press added)

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
<<<<<<< HEAD
 8003636:	2100      	movs	r1, #0
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f006 ff9b 	bl	800a574 <HAL_PCD_DataOutStageCallback>
=======
 80035c2:	2100      	movs	r1, #0
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f006 ff9b 	bl	800a500 <HAL_PCD_DataOutStageCallback>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003648:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800364c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 82bd 	bne.w	8003bd0 <PCD_EP_ISR_Handler+0x782>
 8003656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800365a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800365e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003662:	f000 82b5 	beq.w	8003bd0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003690:	b29a      	uxth	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b3e      	cmp	r3, #62	@ 0x3e
 800369c:	d91d      	bls.n	80036da <PCD_EP_ISR_Handler+0x28c>
 800369e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <PCD_EP_ISR_Handler+0x26a>
 80036b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b4:	3b01      	subs	r3, #1
 80036b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29a      	uxth	r2, r3
 80036be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	e026      	b.n	8003728 <PCD_EP_ISR_Handler+0x2da>
 80036da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <PCD_EP_ISR_Handler+0x2aa>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	e017      	b.n	8003728 <PCD_EP_ISR_Handler+0x2da>
 80036f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <PCD_EP_ISR_Handler+0x2c4>
 800370c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370e:	3301      	adds	r3, #1
 8003710:	647b      	str	r3, [r7, #68]	@ 0x44
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29a      	uxth	r2, r3
 8003718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371a:	b29b      	uxth	r3, r3
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	b29b      	uxth	r3, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	b29a      	uxth	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003738:	827b      	strh	r3, [r7, #18]
 800373a:	8a7b      	ldrh	r3, [r7, #18]
 800373c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003740:	827b      	strh	r3, [r7, #18]
 8003742:	8a7b      	ldrh	r3, [r7, #18]
 8003744:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003748:	827b      	strh	r3, [r7, #18]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	8a7b      	ldrh	r3, [r7, #18]
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
 8003764:	e234      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
=======
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 82bd 	bne.w	8003b5c <PCD_EP_ISR_Handler+0x782>
 80035e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035ee:	f000 82b5 	beq.w	8003b5c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003600:	b29b      	uxth	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	4413      	add	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361c:	b29a      	uxth	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b3e      	cmp	r3, #62	@ 0x3e
 8003628:	d91d      	bls.n	8003666 <PCD_EP_ISR_Handler+0x28c>
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	647b      	str	r3, [r7, #68]	@ 0x44
 8003632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <PCD_EP_ISR_Handler+0x26a>
 800363e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003640:	3b01      	subs	r3, #1
 8003642:	647b      	str	r3, [r7, #68]	@ 0x44
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29a      	uxth	r2, r3
 800364a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364c:	b29b      	uxth	r3, r3
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	b29b      	uxth	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365e:	b29a      	uxth	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	801a      	strh	r2, [r3, #0]
 8003664:	e026      	b.n	80036b4 <PCD_EP_ISR_Handler+0x2da>
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <PCD_EP_ISR_Handler+0x2aa>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800367c:	b29a      	uxth	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	e017      	b.n	80036b4 <PCD_EP_ISR_Handler+0x2da>
 8003684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	647b      	str	r3, [r7, #68]	@ 0x44
 800368c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <PCD_EP_ISR_Handler+0x2c4>
 8003698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369a:	3301      	adds	r3, #1
 800369c:	647b      	str	r3, [r7, #68]	@ 0x44
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	029b      	lsls	r3, r3, #10
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c4:	827b      	strh	r3, [r7, #18]
 80036c6:	8a7b      	ldrh	r3, [r7, #18]
 80036c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036cc:	827b      	strh	r3, [r7, #18]
 80036ce:	8a7b      	ldrh	r3, [r7, #18]
 80036d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036d4:	827b      	strh	r3, [r7, #18]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	8a7b      	ldrh	r3, [r7, #18]
 80036dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	8013      	strh	r3, [r2, #0]
 80036f0:	e234      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
<<<<<<< HEAD
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800377a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800377e:	2b00      	cmp	r3, #0
 8003780:	f280 80fc 	bge.w	800397c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29a      	uxth	r2, r3
 8003796:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800379a:	4013      	ands	r3, r2
 800379c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80037b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037b6:	b292      	uxth	r2, r2
 80037b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d2:	7b1b      	ldrb	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d125      	bne.n	8003824 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	3306      	adds	r3, #6
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003800:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003804:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8092 	beq.w	8003932 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003814:	6959      	ldr	r1, [r3, #20]
 8003816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003818:	88da      	ldrh	r2, [r3, #6]
 800381a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800381e:	f005 fabc 	bl	8008d9a <USB_ReadPMA>
 8003822:	e086      	b.n	8003932 <PCD_EP_ISR_Handler+0x4e4>
=======
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003706:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800370a:	2b00      	cmp	r3, #0
 800370c:	f280 80fc 	bge.w	8003908 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b29a      	uxth	r2, r3
 8003722:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003726:	4013      	ands	r3, r2
 8003728:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800373e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003742:	b292      	uxth	r2, r2
 8003744:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003746:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800375c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375e:	7b1b      	ldrb	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d125      	bne.n	80037b0 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	3306      	adds	r3, #6
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8092 	beq.w	80038be <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a0:	6959      	ldr	r1, [r3, #20]
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	88da      	ldrh	r2, [r3, #6]
 80037a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037aa:	f005 fabc 	bl	8008d26 <USB_ReadPMA>
 80037ae:	e086      	b.n	80038be <PCD_EP_ISR_Handler+0x4e4>
>>>>>>> 2814753 (long press added)
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	78db      	ldrb	r3, [r3, #3]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d10a      	bne.n	8003842 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800382c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003830:	461a      	mov	r2, r3
 8003832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f9d9 	bl	8003bec <HAL_PCD_EP_DB_Receive>
 800383a:	4603      	mov	r3, r0
 800383c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003840:	e077      	b.n	8003932 <PCD_EP_ISR_Handler+0x4e4>
=======
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d10a      	bne.n	80037ce <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037bc:	461a      	mov	r2, r3
 80037be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9d9 	bl	8003b78 <HAL_PCD_EP_DB_Receive>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80037cc:	e077      	b.n	80038be <PCD_EP_ISR_Handler+0x4e4>
>>>>>>> 2814753 (long press added)
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
<<<<<<< HEAD
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	441a      	add	r2, r3
 800386e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800387a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800387e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d024      	beq.n	80038ea <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	3302      	adds	r3, #2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80038cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02e      	beq.n	8003932 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038da:	6959      	ldr	r1, [r3, #20]
 80038dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038de:	891a      	ldrh	r2, [r3, #8]
 80038e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038e4:	f005 fa59 	bl	8008d9a <USB_ReadPMA>
 80038e8:	e023      	b.n	8003932 <PCD_EP_ISR_Handler+0x4e4>
=======
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80037fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800380a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800380e:	b29b      	uxth	r3, r3
 8003810:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d024      	beq.n	8003876 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003834:	b29b      	uxth	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	3302      	adds	r3, #2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003854:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003858:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02e      	beq.n	80038be <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003866:	6959      	ldr	r1, [r3, #20]
 8003868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386a:	891a      	ldrh	r2, [r3, #8]
 800386c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003870:	f005 fa59 	bl	8008d26 <USB_ReadPMA>
 8003874:	e023      	b.n	80038be <PCD_EP_ISR_Handler+0x4e4>
>>>>>>> 2814753 (long press added)
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	3306      	adds	r3, #6
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003912:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003916:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003924:	6959      	ldr	r1, [r3, #20]
 8003926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003928:	895a      	ldrh	r2, [r3, #10]
 800392a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800392e:	f005 fa34 	bl	8008d9a <USB_ReadPMA>
=======
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	3306      	adds	r3, #6
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80038a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b0:	6959      	ldr	r1, [r3, #20]
 80038b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b4:	895a      	ldrh	r2, [r3, #10]
 80038b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038ba:	f005 fa34 	bl	8008d26 <USB_ReadPMA>
>>>>>>> 2814753 (long press added)
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
<<<<<<< HEAD
 8003932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800393a:	441a      	add	r2, r3
 800393c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003948:	441a      	add	r2, r3
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <PCD_EP_ISR_Handler+0x514>
 8003956:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d206      	bcs.n	8003970 <PCD_EP_ISR_Handler+0x522>
=======
 80038be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038c6:	441a      	add	r2, r3
 80038c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038d4:	441a      	add	r2, r3
 80038d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <PCD_EP_ISR_Handler+0x514>
 80038e2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80038e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d206      	bcs.n	80038fc <PCD_EP_ISR_Handler+0x522>
>>>>>>> 2814753 (long press added)
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8003962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f006 fe03 	bl	800a574 <HAL_PCD_DataOutStageCallback>
 800396e:	e005      	b.n	800397c <PCD_EP_ISR_Handler+0x52e>
=======
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f006 fe03 	bl	800a500 <HAL_PCD_DataOutStageCallback>
 80038fa:	e005      	b.n	8003908 <PCD_EP_ISR_Handler+0x52e>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fcda 	bl	8007330 <USB_EPStartXfer>
=======
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fcda 	bl	80072bc <USB_EPStartXfer>
>>>>>>> 2814753 (long press added)
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
<<<<<<< HEAD
 800397c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8123 	beq.w	8003bd0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800398a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	3310      	adds	r3, #16
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80039b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80039ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	78db      	ldrb	r3, [r3, #3]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 80a2 	bne.w	8003b28 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80039e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80039ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ec:	7b1b      	ldrb	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8093 	beq.w	8003b1a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d126      	bne.n	8003a56 <PCD_EP_ISR_Handler+0x608>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	4413      	add	r3, r2
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	011a      	lsls	r2, r3, #4
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	4413      	add	r3, r2
 8003a2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	801a      	strh	r2, [r3, #0]
 8003a54:	e061      	b.n	8003b1a <PCD_EP_ISR_Handler+0x6cc>
 8003a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d15d      	bne.n	8003b1a <PCD_EP_ISR_Handler+0x6cc>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	4413      	add	r3, r2
 8003a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	011a      	lsls	r2, r3, #4
 8003a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7e:	4413      	add	r3, r2
 8003a80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	2200      	movs	r2, #0
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e045      	b.n	8003b1a <PCD_EP_ISR_Handler+0x6cc>
=======
 8003908:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8123 	beq.w	8003b5c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003916:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	3310      	adds	r3, #16
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003944:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800395a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	2b01      	cmp	r3, #1
 800396c:	f040 80a2 	bne.w	8003ab4 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003978:	7b1b      	ldrb	r3, [r3, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8093 	beq.w	8003aa6 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003980:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d046      	beq.n	8003a1a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d126      	bne.n	80039e2 <PCD_EP_ISR_Handler+0x608>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	4413      	add	r3, r2
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	011a      	lsls	r2, r3, #4
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e061      	b.n	8003aa6 <PCD_EP_ISR_Handler+0x6cc>
 80039e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d15d      	bne.n	8003aa6 <PCD_EP_ISR_Handler+0x6cc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	4413      	add	r3, r2
 8003a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	011a      	lsls	r2, r3, #4
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	e045      	b.n	8003aa6 <PCD_EP_ISR_Handler+0x6cc>
>>>>>>> 2814753 (long press added)
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
<<<<<<< HEAD
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d126      	bne.n	8003aea <PCD_EP_ISR_Handler+0x69c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab0:	4413      	add	r3, r2
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	011a      	lsls	r2, r3, #4
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	4413      	add	r3, r2
 8003abe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	e017      	b.n	8003b1a <PCD_EP_ISR_Handler+0x6cc>
 8003aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d113      	bne.n	8003b1a <PCD_EP_ISR_Handler+0x6cc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b00:	4413      	add	r3, r2
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	011a      	lsls	r2, r3, #4
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	2200      	movs	r2, #0
 8003b18:	801a      	strh	r2, [r3, #0]
=======
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d126      	bne.n	8003a76 <PCD_EP_ISR_Handler+0x69c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	4413      	add	r3, r2
 8003a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	011a      	lsls	r2, r3, #4
 8003a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a48:	4413      	add	r3, r2
 8003a4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	e017      	b.n	8003aa6 <PCD_EP_ISR_Handler+0x6cc>
 8003a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a78:	785b      	ldrb	r3, [r3, #1]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d113      	bne.n	8003aa6 <PCD_EP_ISR_Handler+0x6cc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8c:	4413      	add	r3, r2
 8003a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	011a      	lsls	r2, r3, #4
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a98:	4413      	add	r3, r2
 8003a9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	801a      	strh	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f006 fd42 	bl	800a5aa <HAL_PCD_DataInStageCallback>
 8003b26:	e053      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
=======
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f006 fd42 	bl	800a536 <HAL_PCD_DataInStageCallback>
 8003ab2:	e053      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
<<<<<<< HEAD
 8003b28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d146      	bne.n	8003bc2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	3302      	adds	r3, #2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d907      	bls.n	8003b7c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b74:	1ad2      	subs	r2, r2, r3
 8003b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b78:	619a      	str	r2, [r3, #24]
 8003b7a:	e002      	b.n	8003b82 <PCD_EP_ISR_Handler+0x734>
=======
 8003ab4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d146      	bne.n	8003b4e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d907      	bls.n	8003b08 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b00:	1ad2      	subs	r2, r2, r3
 8003b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b04:	619a      	str	r2, [r3, #24]
 8003b06:	e002      	b.n	8003b0e <PCD_EP_ISR_Handler+0x734>
>>>>>>> 2814753 (long press added)
            }
            else
            {
              ep->xfer_len = 0U;
<<<<<<< HEAD
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
=======
 8003b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	619a      	str	r2, [r3, #24]
>>>>>>> 2814753 (long press added)
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8003b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <PCD_EP_ISR_Handler+0x74a>
=======
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <PCD_EP_ISR_Handler+0x74a>
>>>>>>> 2814753 (long press added)
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f006 fd0a 	bl	800a5aa <HAL_PCD_DataInStageCallback>
 8003b96:	e01b      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
=======
 8003b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f006 fd0a 	bl	800a536 <HAL_PCD_DataInStageCallback>
 8003b22:	e01b      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
<<<<<<< HEAD
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ba0:	441a      	add	r2, r3
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bae:	441a      	add	r2, r3
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 fbb8 	bl	8007330 <USB_EPStartXfer>
 8003bc0:	e006      	b.n	8003bd0 <PCD_EP_ISR_Handler+0x782>
=======
 8003b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b2c:	441a      	add	r2, r3
 8003b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b30:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b3a:	441a      	add	r2, r3
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 fbb8 	bl	80072bc <USB_EPStartXfer>
 8003b4c:	e006      	b.n	8003b5c <PCD_EP_ISR_Handler+0x782>
>>>>>>> 2814753 (long press added)
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
<<<<<<< HEAD
 8003bc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f91b 	bl	8003e06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	b21b      	sxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f6ff ac3b 	blt.w	8003458 <PCD_EP_ISR_Handler+0xa>
=======
 8003b4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b52:	461a      	mov	r2, r3
 8003b54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f91b 	bl	8003d92 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f6ff ac3b 	blt.w	80033e4 <PCD_EP_ISR_Handler+0xa>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3758      	adds	r7, #88	@ 0x58
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_PCD_EP_DB_Receive>:
=======
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3758      	adds	r7, #88	@ 0x58
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_PCD_EP_DB_Receive>:
>>>>>>> 2814753 (long press added)
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
=======
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
>>>>>>> 2814753 (long press added)
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d07e      	beq.n	8003d02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	3302      	adds	r3, #2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	8b7b      	ldrh	r3, [r7, #26]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d306      	bcc.n	8003c46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	8b7b      	ldrh	r3, [r7, #26]
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	619a      	str	r2, [r3, #24]
 8003c44:	e002      	b.n	8003c4c <HAL_PCD_EP_DB_Receive+0x60>
=======
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d07e      	beq.n	8003c8e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	8b7b      	ldrh	r3, [r7, #26]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d306      	bcc.n	8003bd2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	619a      	str	r2, [r3, #24]
 8003bd0:	e002      	b.n	8003bd8 <HAL_PCD_EP_DB_Receive+0x60>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d123      	bne.n	8003c9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6e:	833b      	strh	r3, [r7, #24]
 8003c70:	8b3b      	ldrh	r3, [r7, #24]
 8003c72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c76:	833b      	strh	r3, [r7, #24]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	8b3b      	ldrh	r3, [r7, #24]
 8003c88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]
=======
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d123      	bne.n	8003c28 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	833b      	strh	r3, [r7, #24]
 8003bfc:	8b3b      	ldrh	r3, [r7, #24]
 8003bfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c02:	833b      	strh	r3, [r7, #24]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	8b3b      	ldrh	r3, [r7, #24]
 8003c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc0:	82fb      	strh	r3, [r7, #22]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	8afb      	ldrh	r3, [r7, #22]
 8003cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ce6:	8b7b      	ldrh	r3, [r7, #26]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8087 	beq.w	8003dfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6959      	ldr	r1, [r3, #20]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	891a      	ldrh	r2, [r3, #8]
 8003cfa:	8b7b      	ldrh	r3, [r7, #26]
 8003cfc:	f005 f84d 	bl	8008d9a <USB_ReadPMA>
 8003d00:	e07c      	b.n	8003dfc <HAL_PCD_EP_DB_Receive+0x210>
=======
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4c:	82fb      	strh	r3, [r7, #22]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c72:	8b7b      	ldrh	r3, [r7, #26]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8087 	beq.w	8003d88 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6959      	ldr	r1, [r3, #20]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	891a      	ldrh	r2, [r3, #8]
 8003c86:	8b7b      	ldrh	r3, [r7, #26]
 8003c88:	f005 f84d 	bl	8008d26 <USB_ReadPMA>
 8003c8c:	e07c      	b.n	8003d88 <HAL_PCD_EP_DB_Receive+0x210>
>>>>>>> 2814753 (long press added)
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	3306      	adds	r3, #6
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	8b7b      	ldrh	r3, [r7, #26]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d306      	bcc.n	8003d44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	8b7b      	ldrh	r3, [r7, #26]
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	619a      	str	r2, [r3, #24]
 8003d42:	e002      	b.n	8003d4a <HAL_PCD_EP_DB_Receive+0x15e>
=======
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3306      	adds	r3, #6
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	8b7b      	ldrh	r3, [r7, #26]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d306      	bcc.n	8003cd0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	8b7b      	ldrh	r3, [r7, #26]
 8003cc8:	1ad2      	subs	r2, r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	619a      	str	r2, [r3, #24]
 8003cce:	e002      	b.n	8003cd6 <HAL_PCD_EP_DB_Receive+0x15e>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d123      	bne.n	8003d9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6c:	83fb      	strh	r3, [r7, #30]
 8003d6e:	8bfb      	ldrh	r3, [r7, #30]
 8003d70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d74:	83fb      	strh	r3, [r7, #30]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	441a      	add	r2, r3
 8003d84:	8bfb      	ldrh	r3, [r7, #30]
 8003d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	8013      	strh	r3, [r2, #0]
=======
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d123      	bne.n	8003d26 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf8:	83fb      	strh	r3, [r7, #30]
 8003cfa:	8bfb      	ldrh	r3, [r7, #30]
 8003cfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d00:	83fb      	strh	r3, [r7, #30]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	8bfb      	ldrh	r3, [r7, #30]
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
<<<<<<< HEAD
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11f      	bne.n	8003de4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbe:	83bb      	strh	r3, [r7, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	8bbb      	ldrh	r3, [r7, #28]
 8003dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ddc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003de4:	8b7b      	ldrh	r3, [r7, #26]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6959      	ldr	r1, [r3, #20]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	895a      	ldrh	r2, [r3, #10]
 8003df6:	8b7b      	ldrh	r3, [r7, #26]
 8003df8:	f004 ffcf 	bl	8008d9a <USB_ReadPMA>
=======
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11f      	bne.n	8003d70 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	83bb      	strh	r3, [r7, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	8bbb      	ldrh	r3, [r7, #28]
 8003d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d70:	8b7b      	ldrh	r3, [r7, #26]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6959      	ldr	r1, [r3, #20]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	895a      	ldrh	r2, [r3, #10]
 8003d82:	8b7b      	ldrh	r3, [r7, #26]
 8003d84:	f004 ffcf 	bl	8008d26 <USB_ReadPMA>
>>>>>>> 2814753 (long press added)
    }
  }

  return count;
<<<<<<< HEAD
 8003dfc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_PCD_EP_DB_Transmit>:
=======
 8003d88:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_EP_DB_Transmit>:
>>>>>>> 2814753 (long press added)
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b0a4      	sub	sp, #144	@ 0x90
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
=======
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b0a4      	sub	sp, #144	@ 0x90
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
>>>>>>> 2814753 (long press added)
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 81dd 	beq.w	80041da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	3302      	adds	r3, #2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e48:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d907      	bls.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e60:	1ad2      	subs	r2, r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	619a      	str	r2, [r3, #24]
 8003e66:	e002      	b.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x68>
=======
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 81dd 	beq.w	8004166 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d907      	bls.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dec:	1ad2      	subs	r2, r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	619a      	str	r2, [r3, #24]
 8003df2:	e002      	b.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x68>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	619a      	str	r2, [r3, #24]
=======
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2200      	movs	r2, #0
 8003df8:	619a      	str	r2, [r3, #24]
>>>>>>> 2814753 (long press added)
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80b9 	bne.w	8003fea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d126      	bne.n	8003ece <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e94:	4413      	add	r3, r2
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	e01a      	b.n	8003f04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	785b      	ldrb	r3, [r3, #1]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d116      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eea:	4413      	add	r3, r2
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	011a      	lsls	r2, r3, #4
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d126      	bne.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	011a      	lsls	r2, r3, #4
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e017      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d113      	bne.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	4413      	add	r3, r2
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011a      	lsls	r2, r3, #4
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	4413      	add	r3, r2
 8003f84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	801a      	strh	r2, [r3, #0]
=======
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 80b9 	bne.w	8003f76 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d126      	bne.n	8003e5a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	4413      	add	r3, r2
 8003e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	011a      	lsls	r2, r3, #4
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	801a      	strh	r2, [r3, #0]
 8003e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	e01a      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d116      	bne.n	8003e90 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	4413      	add	r3, r2
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	011a      	lsls	r2, r3, #4
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	4413      	add	r3, r2
 8003e84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d126      	bne.n	8003eec <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	011a      	lsls	r2, r3, #4
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e017      	b.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d113      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	4413      	add	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	011a      	lsls	r2, r3, #4
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	4413      	add	r3, r2
 8003f10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	801a      	strh	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f006 fb07 	bl	800a5aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 82fc 	beq.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc2:	82fb      	strh	r3, [r7, #22]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	8afb      	ldrh	r3, [r7, #22]
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
 8003fe8:	e2da      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
=======
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4619      	mov	r1, r3
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f006 fb07 	bl	800a536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 82fc 	beq.w	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4e:	82fb      	strh	r3, [r7, #22]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	8afb      	ldrh	r3, [r7, #22]
 8003f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	8013      	strh	r3, [r2, #0]
 8003f74:	e2da      	b.n	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
>>>>>>> 2814753 (long press added)
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d021      	beq.n	8004038 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800400a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800402c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004034:	b29b      	uxth	r3, r3
 8004036:	8013      	strh	r3, [r2, #0]
=======
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d021      	beq.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800403e:	2b01      	cmp	r3, #1
 8004040:	f040 82ae 	bne.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800404c:	441a      	add	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800405a:	441a      	add	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d30b      	bcc.n	8004084 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407c:	1ad2      	subs	r2, r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	621a      	str	r2, [r3, #32]
 8004082:	e017      	b.n	80040b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d108      	bne.n	800409e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800408c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800409c:	e00a      	b.n	80040b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
=======
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	f040 82ae 	bne.w	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fd8:	441a      	add	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d30b      	bcc.n	8004010 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004008:	1ad2      	subs	r2, r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	621a      	str	r2, [r3, #32]
 800400e:	e017      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004018:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800401c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004028:	e00a      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x2ae>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          ep->xfer_fill_db = 0U;
<<<<<<< HEAD
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2200      	movs	r2, #0
 80040b2:	621a      	str	r2, [r3, #32]
=======
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	621a      	str	r2, [r3, #32]
>>>>>>> 2814753 (long press added)
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d165      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0x382>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d0:	4413      	add	r3, r2
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	011a      	lsls	r2, r3, #4
 80040da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040dc:	4413      	add	r3, r2
 80040de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f2:	801a      	strh	r2, [r3, #0]
 80040f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80040fa:	d91d      	bls.n	8004138 <HAL_PCD_EP_DB_Transmit+0x332>
 80040fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0x310>
 8004110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004112:	3b01      	subs	r3, #1
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29a      	uxth	r2, r3
 800411c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411e:	b29b      	uxth	r3, r3
 8004120:	029b      	lsls	r3, r3, #10
 8004122:	b29b      	uxth	r3, r3
 8004124:	4313      	orrs	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004130:	b29a      	uxth	r2, r3
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e044      	b.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_PCD_EP_DB_Transmit+0x350>
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414e:	b29a      	uxth	r2, r3
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e035      	b.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_PCD_EP_DB_Transmit+0x36a>
 800416a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800416c:	3301      	adds	r3, #1
 800416e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29a      	uxth	r2, r3
 8004176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004178:	b29b      	uxth	r3, r3
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	b29b      	uxth	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	e01c      	b.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d118      	bne.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a4:	4413      	add	r3, r2
 80041a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	011a      	lsls	r2, r3, #4
 80041ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80041b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6959      	ldr	r1, [r3, #20]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	891a      	ldrh	r2, [r3, #8]
 80041ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f004 fd9b 	bl	8008d0e <USB_WritePMA>
 80041d8:	e1e2      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
=======
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d165      	bne.n	8004114 <HAL_PCD_EP_DB_Transmit+0x382>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405c:	4413      	add	r3, r2
 800405e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	011a      	lsls	r2, r3, #4
 8004066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004068:	4413      	add	r3, r2
 800406a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800407a:	b29a      	uxth	r2, r3
 800407c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004084:	2b3e      	cmp	r3, #62	@ 0x3e
 8004086:	d91d      	bls.n	80040c4 <HAL_PCD_EP_DB_Transmit+0x332>
 8004088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <HAL_PCD_EP_DB_Transmit+0x310>
 800409c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800409e:	3b01      	subs	r3, #1
 80040a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	e044      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_PCD_EP_DB_Transmit+0x350>
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	e035      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_PCD_EP_DB_Transmit+0x36a>
 80040f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f8:	3301      	adds	r3, #1
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29a      	uxth	r2, r3
 8004102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004104:	b29b      	uxth	r3, r3
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	b29b      	uxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b29a      	uxth	r2, r3
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	e01c      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d118      	bne.n	800414e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	647b      	str	r3, [r7, #68]	@ 0x44
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004130:	4413      	add	r3, r2
 8004132:	647b      	str	r3, [r7, #68]	@ 0x44
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413c:	4413      	add	r3, r2
 800413e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004142:	643b      	str	r3, [r7, #64]	@ 0x40
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004148:	b29a      	uxth	r2, r3
 800414a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	891a      	ldrh	r2, [r3, #8]
 800415a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415e:	b29b      	uxth	r3, r3
 8004160:	f004 fd9b 	bl	8008c9a <USB_WritePMA>
 8004164:	e1e2      	b.n	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
>>>>>>> 2814753 (long press added)
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	3306      	adds	r3, #6
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004202:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800420e:	429a      	cmp	r2, r3
 8004210:	d307      	bcc.n	8004222 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800421a:	1ad2      	subs	r2, r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	619a      	str	r2, [r3, #24]
 8004220:	e002      	b.n	8004228 <HAL_PCD_EP_DB_Transmit+0x422>
=======
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	3306      	adds	r3, #6
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800419a:	429a      	cmp	r2, r3
 800419c:	d307      	bcc.n	80041ae <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	619a      	str	r2, [r3, #24]
 80041ac:	e002      	b.n	80041b4 <HAL_PCD_EP_DB_Transmit+0x422>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	619a      	str	r2, [r3, #24]
=======
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
>>>>>>> 2814753 (long press added)
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 80c0 	bne.w	80043b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d126      	bne.n	8004288 <HAL_PCD_EP_DB_Transmit+0x482>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800424e:	4413      	add	r3, r2
 8004250:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	011a      	lsls	r2, r3, #4
 8004258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800425a:	4413      	add	r3, r2
 800425c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426c:	b29a      	uxth	r2, r3
 800426e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	e01a      	b.n	80042be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d116      	bne.n	80042be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	667b      	str	r3, [r7, #100]	@ 0x64
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a4:	4413      	add	r3, r2
 80042a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b0:	4413      	add	r3, r2
 80042b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ba:	2200      	movs	r2, #0
 80042bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d12b      	bne.n	8004324 <HAL_PCD_EP_DB_Transmit+0x51e>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042da:	b29b      	uxth	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e0:	4413      	add	r3, r2
 80042e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	011a      	lsls	r2, r3, #4
 80042ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ec:	4413      	add	r3, r2
 80042ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004302:	b29a      	uxth	r2, r3
 8004304:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431a:	b29a      	uxth	r2, r3
 800431c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	e017      	b.n	8004354 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d113      	bne.n	8004354 <HAL_PCD_EP_DB_Transmit+0x54e>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800433a:	4413      	add	r3, r2
 800433c:	677b      	str	r3, [r7, #116]	@ 0x74
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	011a      	lsls	r2, r3, #4
 8004344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004346:	4413      	add	r3, r2
 8004348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800434c:	673b      	str	r3, [r7, #112]	@ 0x70
 800434e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004350:	2200      	movs	r2, #0
 8004352:	801a      	strh	r2, [r3, #0]
=======
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 80c0 	bne.w	800433e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d126      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0x482>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041da:	4413      	add	r3, r2
 80041dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	011a      	lsls	r2, r3, #4
 80041e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041e6:	4413      	add	r3, r2
 80041e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420c:	b29a      	uxth	r2, r3
 800420e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e01a      	b.n	800424a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d116      	bne.n	800424a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	667b      	str	r3, [r7, #100]	@ 0x64
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004230:	4413      	add	r3, r2
 8004232:	667b      	str	r3, [r7, #100]	@ 0x64
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	011a      	lsls	r2, r3, #4
 800423a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800423c:	4413      	add	r3, r2
 800423e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004242:	663b      	str	r3, [r7, #96]	@ 0x60
 8004244:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004246:	2200      	movs	r2, #0
 8004248:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d12b      	bne.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426c:	4413      	add	r3, r2
 800426e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	011a      	lsls	r2, r3, #4
 8004276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004278:	4413      	add	r3, r2
 800427a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800427e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004282:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800428e:	b29a      	uxth	r2, r3
 8004290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	e017      	b.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d113      	bne.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c6:	4413      	add	r3, r2
 80042c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	011a      	lsls	r2, r3, #4
 80042d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d2:	4413      	add	r3, r2
 80042d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042dc:	2200      	movs	r2, #0
 80042de:	801a      	strh	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4619      	mov	r1, r3
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f006 f925 	bl	800a5aa <HAL_PCD_DataInStageCallback>
=======
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f006 f925 	bl	800a536 <HAL_PCD_DataInStageCallback>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 811a 	bne.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800439c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	8013      	strh	r3, [r2, #0]
 80043b0:	e0f6      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
=======
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 811a 	bne.w	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004312:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004330:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]
 800433c:	e0f6      	b.n	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
>>>>>>> 2814753 (long press added)
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d121      	bne.n	8004400 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80043ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	8013      	strh	r3, [r2, #0]
=======
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d121      	bne.n	800438c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004362:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800437c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004388:	b29b      	uxth	r3, r3
 800438a:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004406:	2b01      	cmp	r3, #1
 8004408:	f040 80ca 	bne.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004414:	441a      	add	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004422:	441a      	add	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d30b      	bcc.n	800444c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004444:	1ad2      	subs	r2, r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	621a      	str	r2, [r3, #32]
 800444a:	e017      	b.n	800447c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004454:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004458:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004464:	e00a      	b.n	800447c <HAL_PCD_EP_DB_Transmit+0x676>
=======
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004392:	2b01      	cmp	r3, #1
 8004394:	f040 80ca 	bne.w	800452c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043a0:	441a      	add	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043ae:	441a      	add	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d30b      	bcc.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d0:	1ad2      	subs	r2, r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	621a      	str	r2, [r3, #32]
 80043d6:	e017      	b.n	8004408 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d108      	bne.n	80043f2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043f0:	e00a      	b.n	8004408 <HAL_PCD_EP_DB_Transmit+0x676>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
=======
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
>>>>>>> 2814753 (long press added)
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	657b      	str	r3, [r7, #84]	@ 0x54
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d165      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0x750>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004498:	b29b      	uxth	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800449e:	4413      	add	r3, r2
 80044a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	011a      	lsls	r2, r3, #4
 80044a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044aa:	4413      	add	r3, r2
 80044ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c0:	801a      	strh	r2, [r3, #0]
 80044c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80044c8:	d91d      	bls.n	8004506 <HAL_PCD_EP_DB_Transmit+0x700>
 80044ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80044de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044e0:	3b01      	subs	r3, #1
 80044e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	029b      	lsls	r3, r3, #10
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004502:	801a      	strh	r2, [r3, #0]
 8004504:	e041      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x784>
 8004506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <HAL_PCD_EP_DB_Transmit+0x71e>
 800450e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451c:	b29a      	uxth	r2, r3
 800451e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004520:	801a      	strh	r2, [r3, #0]
 8004522:	e032      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x784>
 8004524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800452c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_PCD_EP_DB_Transmit+0x738>
 8004538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800453a:	3301      	adds	r3, #1
 800453c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800453e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29a      	uxth	r2, r3
 8004544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004546:	b29b      	uxth	r3, r3
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	b29b      	uxth	r3, r3
 800454c:	4313      	orrs	r3, r2
 800454e:	b29a      	uxth	r2, r3
 8004550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e019      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x784>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d115      	bne.n	800458a <HAL_PCD_EP_DB_Transmit+0x784>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004566:	b29b      	uxth	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456c:	4413      	add	r3, r2
 800456e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	011a      	lsls	r2, r3, #4
 8004576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004578:	4413      	add	r3, r2
 800457a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800457e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004584:	b29a      	uxth	r2, r3
 8004586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004588:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6959      	ldr	r1, [r3, #20]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	895a      	ldrh	r2, [r3, #10]
 8004596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459a:	b29b      	uxth	r3, r3
 800459c:	f004 fbb7 	bl	8008d0e <USB_WritePMA>
=======
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	657b      	str	r3, [r7, #84]	@ 0x54
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d165      	bne.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x750>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800442a:	4413      	add	r3, r2
 800442c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004436:	4413      	add	r3, r2
 8004438:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800443c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800443e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004448:	b29a      	uxth	r2, r3
 800444a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004452:	2b3e      	cmp	r3, #62	@ 0x3e
 8004454:	d91d      	bls.n	8004492 <HAL_PCD_EP_DB_Transmit+0x700>
 8004456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800445e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_PCD_EP_DB_Transmit+0x6de>
 800446a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800446c:	3b01      	subs	r3, #1
 800446e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29a      	uxth	r2, r3
 8004476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004478:	b29b      	uxth	r3, r3
 800447a:	029b      	lsls	r3, r3, #10
 800447c:	b29b      	uxth	r3, r3
 800447e:	4313      	orrs	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e041      	b.n	8004516 <HAL_PCD_EP_DB_Transmit+0x784>
 8004492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_PCD_EP_DB_Transmit+0x71e>
 800449a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	e032      	b.n	8004516 <HAL_PCD_EP_DB_Transmit+0x784>
 80044b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_PCD_EP_DB_Transmit+0x738>
 80044c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044c6:	3301      	adds	r3, #1
 80044c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	029b      	lsls	r3, r3, #10
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4313      	orrs	r3, r2
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e019      	b.n	8004516 <HAL_PCD_EP_DB_Transmit+0x784>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d115      	bne.n	8004516 <HAL_PCD_EP_DB_Transmit+0x784>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f8:	4413      	add	r3, r2
 80044fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	011a      	lsls	r2, r3, #4
 8004502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004504:	4413      	add	r3, r2
 8004506:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800450a:	653b      	str	r3, [r7, #80]	@ 0x50
 800450c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004510:	b29a      	uxth	r2, r3
 8004512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004514:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6959      	ldr	r1, [r3, #20]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	895a      	ldrh	r2, [r3, #10]
 8004522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004526:	b29b      	uxth	r3, r3
 8004528:	f004 fbb7 	bl	8008c9a <USB_WritePMA>
>>>>>>> 2814753 (long press added)
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ba:	82bb      	strh	r3, [r7, #20]
 80045bc:	8abb      	ldrh	r3, [r7, #20]
 80045be:	f083 0310 	eor.w	r3, r3, #16
 80045c2:	82bb      	strh	r3, [r7, #20]
 80045c4:	8abb      	ldrh	r3, [r7, #20]
 80045c6:	f083 0320 	eor.w	r3, r3, #32
 80045ca:	82bb      	strh	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	8abb      	ldrh	r3, [r7, #20]
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3790      	adds	r7, #144	@ 0x90
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_PCDEx_PMAConfig>:
=======
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004546:	82bb      	strh	r3, [r7, #20]
 8004548:	8abb      	ldrh	r3, [r7, #20]
 800454a:	f083 0310 	eor.w	r3, r3, #16
 800454e:	82bb      	strh	r3, [r7, #20]
 8004550:	8abb      	ldrh	r3, [r7, #20]
 8004552:	f083 0320 	eor.w	r3, r3, #32
 8004556:	82bb      	strh	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	8abb      	ldrh	r3, [r7, #20]
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3790      	adds	r7, #144	@ 0x90
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_PCDEx_PMAConfig>:
>>>>>>> 2814753 (long press added)
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
<<<<<<< HEAD
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	817b      	strh	r3, [r7, #10]
 8004608:	4613      	mov	r3, r2
 800460a:	813b      	strh	r3, [r7, #8]
=======
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	817b      	strh	r3, [r7, #10]
 8004594:	4613      	mov	r3, r2
 8004596:	813b      	strh	r3, [r7, #8]
>>>>>>> 2814753 (long press added)
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
 800460c:	897b      	ldrh	r3, [r7, #10]
 800460e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	897b      	ldrh	r3, [r7, #10]
 800461a:	f003 0207 	and.w	r2, r3, #7
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	3310      	adds	r3, #16
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e009      	b.n	8004644 <HAL_PCDEx_PMAConfig+0x4a>
=======
 8004598:	897b      	ldrh	r3, [r7, #10]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a4:	897b      	ldrh	r3, [r7, #10]
 80045a6:	f003 0207 	and.w	r2, r3, #7
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	3310      	adds	r3, #16
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e009      	b.n	80045d0 <HAL_PCDEx_PMAConfig+0x4a>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 8004630:	897a      	ldrh	r2, [r7, #10]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
=======
 80045bc:	897a      	ldrh	r2, [r7, #10]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
>>>>>>> 2814753 (long press added)
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< HEAD
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	b29a      	uxth	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	80da      	strh	r2, [r3, #6]
 8004658:	e00b      	b.n	8004672 <HAL_PCDEx_PMAConfig+0x78>
=======
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	80da      	strh	r2, [r3, #6]
 80045e4:	e00b      	b.n	80045fe <HAL_PCDEx_PMAConfig+0x78>
>>>>>>> 2814753 (long press added)
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
<<<<<<< HEAD
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2201      	movs	r2, #1
 800465e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	b29a      	uxth	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	b29a      	uxth	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	815a      	strh	r2, [r3, #10]
=======
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2201      	movs	r2, #1
 80045ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	815a      	strh	r2, [r3, #10]
>>>>>>> 2814753 (long press added)
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< HEAD
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
	...

08004680 <HAL_RCC_OscConfig>:
=======
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
	...

0800460c <HAL_RCC_OscConfig>:
>>>>>>> 2814753 (long press added)
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
=======
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e272      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
=======
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e272      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8087 	beq.w	80047ae <HAL_RCC_OscConfig+0x12e>
=======
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8087 	beq.w	800473a <HAL_RCC_OscConfig+0x12e>
>>>>>>> 2814753 (long press added)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 80046a0:	4b92      	ldr	r3, [pc, #584]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d00c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046ac:	4b8f      	ldr	r3, [pc, #572]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d112      	bne.n	80046de <HAL_RCC_OscConfig+0x5e>
 80046b8:	4b8c      	ldr	r3, [pc, #560]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c4:	d10b      	bne.n	80046de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c6:	4b89      	ldr	r3, [pc, #548]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d06c      	beq.n	80047ac <HAL_RCC_OscConfig+0x12c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d168      	bne.n	80047ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e24c      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
=======
 800462c:	4b92      	ldr	r3, [pc, #584]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b04      	cmp	r3, #4
 8004636:	d00c      	beq.n	8004652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004638:	4b8f      	ldr	r3, [pc, #572]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d112      	bne.n	800466a <HAL_RCC_OscConfig+0x5e>
 8004644:	4b8c      	ldr	r3, [pc, #560]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d10b      	bne.n	800466a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004652:	4b89      	ldr	r3, [pc, #548]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d06c      	beq.n	8004738 <HAL_RCC_OscConfig+0x12c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d168      	bne.n	8004738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e24c      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x76>
 80046e8:	4b80      	ldr	r3, [pc, #512]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a7f      	ldr	r2, [pc, #508]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e02e      	b.n	8004754 <HAL_RCC_OscConfig+0xd4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x98>
 80046fe:	4b7b      	ldr	r3, [pc, #492]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a7a      	ldr	r2, [pc, #488]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b78      	ldr	r3, [pc, #480]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a77      	ldr	r2, [pc, #476]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004710:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xd4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0xbc>
 8004722:	4b72      	ldr	r3, [pc, #456]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a71      	ldr	r2, [pc, #452]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b6f      	ldr	r3, [pc, #444]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6e      	ldr	r2, [pc, #440]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xd4>
 800473c:	4b6b      	ldr	r3, [pc, #428]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6a      	ldr	r2, [pc, #424]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b68      	ldr	r3, [pc, #416]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a67      	ldr	r2, [pc, #412]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004752:	6013      	str	r3, [r2, #0]
=======
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x76>
 8004674:	4b80      	ldr	r3, [pc, #512]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7f      	ldr	r2, [pc, #508]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e02e      	b.n	80046e0 <HAL_RCC_OscConfig+0xd4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x98>
 800468a:	4b7b      	ldr	r3, [pc, #492]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a7a      	ldr	r2, [pc, #488]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b78      	ldr	r3, [pc, #480]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a77      	ldr	r2, [pc, #476]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800469c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e01d      	b.n	80046e0 <HAL_RCC_OscConfig+0xd4>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCC_OscConfig+0xbc>
 80046ae:	4b72      	ldr	r3, [pc, #456]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a71      	ldr	r2, [pc, #452]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6e      	ldr	r2, [pc, #440]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e00b      	b.n	80046e0 <HAL_RCC_OscConfig+0xd4>
 80046c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b68      	ldr	r3, [pc, #416]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a67      	ldr	r2, [pc, #412]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80046da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046de:	6013      	str	r3, [r2, #0]
>>>>>>> 2814753 (long press added)


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd f832 	bl	80017c4 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fd f82e 	bl	80017c4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	@ 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e200      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b5d      	ldr	r3, [pc, #372]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xe4>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x12e>
=======
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fd f832 	bl	8001750 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f0:	f7fd f82e 	bl	8001750 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	@ 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e200      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b5d      	ldr	r3, [pc, #372]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0xe4>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x12e>
>>>>>>> 2814753 (long press added)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004784:	f7fd f81e 	bl	80017c4 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd f81a 	bl	80017c4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1ec      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b53      	ldr	r3, [pc, #332]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x10c>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
=======
 8004710:	f7fd f81e 	bl	8001750 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd f81a 	bl	8001750 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	@ 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1ec      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	4b53      	ldr	r3, [pc, #332]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x10c>
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	bf00      	nop
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x202>
=======
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_OscConfig+0x202>
>>>>>>> 2814753 (long press added)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 80047ba:	4b4c      	ldr	r3, [pc, #304]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047c6:	4b49      	ldr	r3, [pc, #292]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x18c>
 80047d2:	4b46      	ldr	r3, [pc, #280]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b43      	ldr	r3, [pc, #268]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x176>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c0      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
=======
 8004746:	4b4c      	ldr	r3, [pc, #304]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004752:	4b49      	ldr	r3, [pc, #292]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b08      	cmp	r3, #8
 800475c:	d11c      	bne.n	8004798 <HAL_RCC_OscConfig+0x18c>
 800475e:	4b46      	ldr	r3, [pc, #280]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d116      	bne.n	8004798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476a:	4b43      	ldr	r3, [pc, #268]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_RCC_OscConfig+0x176>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e1c0      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 2814753 (long press added)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80047f6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4939      	ldr	r1, [pc, #228]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x202>
=======
 8004782:	4b3d      	ldr	r3, [pc, #244]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4939      	ldr	r1, [pc, #228]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004796:	e03a      	b.n	800480e <HAL_RCC_OscConfig+0x202>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b36      	ldr	r3, [pc, #216]	@ (80048f0 <HAL_RCC_OscConfig+0x270>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fc ffd3 	bl	80017c4 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004822:	f7fc ffcf 	bl	80017c4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a1      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b2d      	ldr	r3, [pc, #180]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x1a2>
=======
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a0:	4b36      	ldr	r3, [pc, #216]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a6:	f7fc ffd3 	bl	8001750 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ae:	f7fc ffcf 	bl	8001750 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e1a1      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 2814753 (long press added)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004840:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4927      	ldr	r1, [pc, #156]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x202>
=======
 80047cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4927      	ldr	r1, [pc, #156]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0x202>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004856:	4b26      	ldr	r3, [pc, #152]	@ (80048f0 <HAL_RCC_OscConfig+0x270>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fc ffb2 	bl	80017c4 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004864:	f7fc ffae 	bl	80017c4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e180      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1e4>
=======
 80047e2:	4b26      	ldr	r3, [pc, #152]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fc ffb2 	bl	8001750 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fc ffae 	bl	8001750 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e180      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	4b1d      	ldr	r3, [pc, #116]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03a      	beq.n	8004904 <HAL_RCC_OscConfig+0x284>
=======
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d03a      	beq.n	8004890 <HAL_RCC_OscConfig+0x284>
>>>>>>> 2814753 (long press added)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d019      	beq.n	80048ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b17      	ldr	r3, [pc, #92]	@ (80048f4 <HAL_RCC_OscConfig+0x274>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fc ff92 	bl	80017c4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fc ff8e 	bl	80017c4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e160      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <HAL_RCC_OscConfig+0x26c>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x224>
=======
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d019      	beq.n	8004856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <HAL_RCC_OscConfig+0x274>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004828:	f7fc ff92 	bl	8001750 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004830:	f7fc ff8e 	bl	8001750 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e160      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <HAL_RCC_OscConfig+0x26c>)
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x224>
>>>>>>> 2814753 (long press added)
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 80048c2:	2001      	movs	r0, #1
 80048c4:	f000 faba 	bl	8004e3c <RCC_Delay>
 80048c8:	e01c      	b.n	8004904 <HAL_RCC_OscConfig+0x284>
=======
 800484e:	2001      	movs	r0, #1
 8004850:	f000 faba 	bl	8004dc8 <RCC_Delay>
 8004854:	e01c      	b.n	8004890 <HAL_RCC_OscConfig+0x284>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80048ca:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <HAL_RCC_OscConfig+0x274>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d0:	f7fc ff78 	bl	80017c4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d6:	e00f      	b.n	80048f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fc ff74 	bl	80017c4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d908      	bls.n	80048f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e146      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	42420000 	.word	0x42420000
 80048f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	4b92      	ldr	r3, [pc, #584]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e9      	bne.n	80048d8 <HAL_RCC_OscConfig+0x258>
=======
 8004856:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_RCC_OscConfig+0x274>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485c:	f7fc ff78 	bl	8001750 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004862:	e00f      	b.n	8004884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004864:	f7fc ff74 	bl	8001750 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d908      	bls.n	8004884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e146      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	42420000 	.word	0x42420000
 8004880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	4b92      	ldr	r3, [pc, #584]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e9      	bne.n	8004864 <HAL_RCC_OscConfig+0x258>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a6 	beq.w	8004a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
=======
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a6 	beq.w	80049ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
>>>>>>> 2814753 (long press added)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8004916:	4b8b      	ldr	r3, [pc, #556]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b88      	ldr	r3, [pc, #544]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a87      	ldr	r2, [pc, #540]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]
 800492e:	4b85      	ldr	r3, [pc, #532]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	4b82      	ldr	r3, [pc, #520]	@ (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d118      	bne.n	800497c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004956:	f7fc ff35 	bl	80017c4 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495e:	f7fc ff31 	bl	80017c4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b64      	cmp	r3, #100	@ 0x64
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e103      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004970:	4b75      	ldr	r3, [pc, #468]	@ (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x2de>
=======
 80048a2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	4b88      	ldr	r3, [pc, #544]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	4a87      	ldr	r2, [pc, #540]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b8:	61d3      	str	r3, [r2, #28]
 80048ba:	4b85      	ldr	r3, [pc, #532]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b82      	ldr	r3, [pc, #520]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d118      	bne.n	8004908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c8>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7fc ff35 	bl	8001750 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7fc ff31 	bl	8001750 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	@ 0x64
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e103      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4b75      	ldr	r3, [pc, #468]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x2de>
>>>>>>> 2814753 (long press added)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d106      	bne.n	8004992 <HAL_RCC_OscConfig+0x312>
 8004984:	4b6f      	ldr	r3, [pc, #444]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4a6e      	ldr	r2, [pc, #440]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6213      	str	r3, [r2, #32]
 8004990:	e02d      	b.n	80049ee <HAL_RCC_OscConfig+0x36e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x334>
 800499a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4a69      	ldr	r2, [pc, #420]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	6213      	str	r3, [r2, #32]
 80049a6:	4b67      	ldr	r3, [pc, #412]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4a66      	ldr	r2, [pc, #408]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	f023 0304 	bic.w	r3, r3, #4
 80049b0:	6213      	str	r3, [r2, #32]
 80049b2:	e01c      	b.n	80049ee <HAL_RCC_OscConfig+0x36e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_OscConfig+0x356>
 80049bc:	4b61      	ldr	r3, [pc, #388]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4a60      	ldr	r2, [pc, #384]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6213      	str	r3, [r2, #32]
 80049c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6213      	str	r3, [r2, #32]
 80049d4:	e00b      	b.n	80049ee <HAL_RCC_OscConfig+0x36e>
 80049d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4a5a      	ldr	r2, [pc, #360]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6213      	str	r3, [r2, #32]
 80049e2:	4b58      	ldr	r3, [pc, #352]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	4a57      	ldr	r2, [pc, #348]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fc fee5 	bl	80017c4 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fc fee1 	bl	80017c4 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0b1      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	4b4b      	ldr	r3, [pc, #300]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ee      	beq.n	80049fe <HAL_RCC_OscConfig+0x37e>
 8004a20:	e014      	b.n	8004a4c <HAL_RCC_OscConfig+0x3cc>
=======
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x312>
 8004910:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6213      	str	r3, [r2, #32]
 800491c:	e02d      	b.n	800497a <HAL_RCC_OscConfig+0x36e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x334>
 8004926:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4a69      	ldr	r2, [pc, #420]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	6213      	str	r3, [r2, #32]
 8004932:	4b67      	ldr	r3, [pc, #412]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4a66      	ldr	r2, [pc, #408]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	f023 0304 	bic.w	r3, r3, #4
 800493c:	6213      	str	r3, [r2, #32]
 800493e:	e01c      	b.n	800497a <HAL_RCC_OscConfig+0x36e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d10c      	bne.n	8004962 <HAL_RCC_OscConfig+0x356>
 8004948:	4b61      	ldr	r3, [pc, #388]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	4a60      	ldr	r2, [pc, #384]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	6213      	str	r3, [r2, #32]
 8004954:	4b5e      	ldr	r3, [pc, #376]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6213      	str	r3, [r2, #32]
 8004960:	e00b      	b.n	800497a <HAL_RCC_OscConfig+0x36e>
 8004962:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6213      	str	r3, [r2, #32]
 800496e:	4b58      	ldr	r3, [pc, #352]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4a57      	ldr	r2, [pc, #348]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d015      	beq.n	80049ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004982:	f7fc fee5 	bl	8001750 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	f7fc fee1 	bl	8001750 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004998:	4293      	cmp	r3, r2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0b1      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ee      	beq.n	800498a <HAL_RCC_OscConfig+0x37e>
 80049ac:	e014      	b.n	80049d8 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004a22:	f7fc fecf 	bl	80017c4 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fc fecb 	bl	80017c4 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e09b      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a40:	4b40      	ldr	r3, [pc, #256]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ee      	bne.n	8004a2a <HAL_RCC_OscConfig+0x3aa>
=======
 80049ae:	f7fc fecf 	bl	8001750 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fc fecb 	bl	8001750 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e09b      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049cc:	4b40      	ldr	r3, [pc, #256]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ee      	bne.n	80049b6 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 2814753 (long press added)
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	4b3c      	ldr	r3, [pc, #240]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4a3b      	ldr	r2, [pc, #236]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	61d3      	str	r3, [r2, #28]
=======
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049de:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	61d3      	str	r3, [r2, #28]
>>>>>>> 2814753 (long press added)

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8087 	beq.w	8004b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a68:	4b36      	ldr	r3, [pc, #216]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d061      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d146      	bne.n	8004b0a <HAL_RCC_OscConfig+0x48a>
=======
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8087 	beq.w	8004b02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d061      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d146      	bne.n	8004a96 <HAL_RCC_OscConfig+0x48a>
>>>>>>> 2814753 (long press added)
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004a7c:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fc fe9f 	bl	80017c4 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fc fe9b 	bl	80017c4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e06d      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9c:	4b29      	ldr	r3, [pc, #164]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x40a>
=======
 8004a08:	4b33      	ldr	r3, [pc, #204]	@ (8004ad8 <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fc fe9f 	bl	8001750 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fc fe9b 	bl	8001750 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e06d      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a28:	4b29      	ldr	r3, [pc, #164]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x40a>
>>>>>>> 2814753 (long press added)
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x444>
=======
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3c:	d108      	bne.n	8004a50 <HAL_RCC_OscConfig+0x444>
>>>>>>> 2814753 (long press added)
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8004ab2:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4921      	ldr	r1, [pc, #132]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
=======
 8004a3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	4921      	ldr	r1, [pc, #132]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a19      	ldr	r1, [r3, #32]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	491b      	ldr	r1, [pc, #108]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004adc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fc fe6f 	bl	80017c4 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fc fe6b 	bl	80017c4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e03d      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004afc:	4b11      	ldr	r3, [pc, #68]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x46a>
 8004b08:	e035      	b.n	8004b76 <HAL_RCC_OscConfig+0x4f6>
=======
 8004a50:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a19      	ldr	r1, [r3, #32]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	430b      	orrs	r3, r1
 8004a62:	491b      	ldr	r1, [pc, #108]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <HAL_RCC_OscConfig+0x4cc>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fc fe6f 	bl	8001750 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fc fe6b 	bl	8001750 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e03d      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a88:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x46a>
 8004a94:	e035      	b.n	8004b02 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> 2814753 (long press added)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004b0a:	4b10      	ldr	r3, [pc, #64]	@ (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fc fe58 	bl	80017c4 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fc fe54 	bl	80017c4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e026      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x498>
 8004b36:	e01e      	b.n	8004b76 <HAL_RCC_OscConfig+0x4f6>
=======
 8004a96:	4b10      	ldr	r3, [pc, #64]	@ (8004ad8 <HAL_RCC_OscConfig+0x4cc>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fc fe58 	bl	8001750 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fc fe54 	bl	8001750 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e026      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab6:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x498>
 8004ac2:	e01e      	b.n	8004b02 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d107      	bne.n	8004b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e019      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	42420060 	.word	0x42420060
=======
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e019      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	42420060 	.word	0x42420060
>>>>>>> 2814753 (long press added)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCC_OscConfig+0x500>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d106      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
=======
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_OscConfig+0x500>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d106      	bne.n	8004afe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 2814753 (long press added)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000

08004b84 <HAL_RCC_ClockConfig>:
=======
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000

08004b10 <HAL_RCC_ClockConfig>:
>>>>>>> 2814753 (long press added)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
=======
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0d0      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
=======
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0d0      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 2814753 (long press added)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8004b98:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d910      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b67      	ldr	r3, [pc, #412]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 0207 	bic.w	r2, r3, #7
 8004bae:	4965      	ldr	r1, [pc, #404]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
=======
 8004b24:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d910      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b67      	ldr	r3, [pc, #412]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 0207 	bic.w	r2, r3, #7
 8004b3a:	4965      	ldr	r1, [pc, #404]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
>>>>>>> 2814753 (long press added)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8004bb6:	4b63      	ldr	r3, [pc, #396]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b8      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
=======
 8004b42:	4b63      	ldr	r3, [pc, #396]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 2814753 (long press added)
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x92>
=======
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x92>
>>>>>>> 2814753 (long press added)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be0:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a58      	ldr	r2, [pc, #352]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf8:	4b53      	ldr	r3, [pc, #332]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c02:	6053      	str	r3, [r2, #4]
=======
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a58      	ldr	r2, [pc, #352]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b84:	4b53      	ldr	r3, [pc, #332]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a52      	ldr	r2, [pc, #328]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b8e:	6053      	str	r3, [r2, #4]
>>>>>>> 2814753 (long press added)
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8004c04:	4b50      	ldr	r3, [pc, #320]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	494d      	ldr	r1, [pc, #308]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
=======
 8004b90:	4b50      	ldr	r3, [pc, #320]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	494d      	ldr	r1, [pc, #308]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d040      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x120>
=======
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d040      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 2814753 (long press added)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b47      	ldr	r3, [pc, #284]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d115      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
=======
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d115      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 2814753 (long press added)
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b41      	ldr	r3, [pc, #260]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e073      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
=======
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b41      	ldr	r3, [pc, #260]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e073      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 2814753 (long press added)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8004c52:	4b3d      	ldr	r3, [pc, #244]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06b      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b39      	ldr	r3, [pc, #228]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4936      	ldr	r1, [pc, #216]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fc fda6 	bl	80017c4 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fc fda2 	bl	80017c4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e053      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b2d      	ldr	r3, [pc, #180]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
=======
 8004bde:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06b      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b39      	ldr	r3, [pc, #228]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4936      	ldr	r1, [pc, #216]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c00:	f7fc fda6 	bl	8001750 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fc fda2 	bl	8001750 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e053      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 2814753 (long press added)
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8004ca4:	4b27      	ldr	r3, [pc, #156]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d210      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 0207 	bic.w	r2, r3, #7
 8004cba:	4922      	ldr	r1, [pc, #136]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]
=======
 8004c30:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d210      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4922      	ldr	r1, [pc, #136]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
>>>>>>> 2814753 (long press added)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8004cc2:	4b20      	ldr	r3, [pc, #128]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e032      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
=======
 8004c4e:	4b20      	ldr	r3, [pc, #128]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 2814753 (long press added)
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b19      	ldr	r3, [pc, #100]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4916      	ldr	r1, [pc, #88]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
=======
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4916      	ldr	r1, [pc, #88]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	490e      	ldr	r1, [pc, #56]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
=======
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	490e      	ldr	r1, [pc, #56]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8004d12:	f000 f821 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490a      	ldr	r1, [pc, #40]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <HAL_RCC_ClockConfig+0x1cc>)
 8004d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <HAL_RCC_ClockConfig+0x1d0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fc fd04 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40022000 	.word	0x40022000
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	0800b2e4 	.word	0x0800b2e4
 8004d50:	20000014 	.word	0x20000014
 8004d54:	20000018 	.word	0x20000018

08004d58 <HAL_RCC_GetSysClockFreq>:
=======
 8004c9e:	f000 f821 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	490a      	ldr	r1, [pc, #40]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	5ccb      	ldrb	r3, [r1, r3]
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x1cc>)
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cba:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fc fd04 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40022000 	.word	0x40022000
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800b270 	.word	0x0800b270
 8004cdc:	20000014 	.word	0x20000014
 8004ce0:	20000018 	.word	0x20000018

08004ce4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 2814753 (long press added)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
=======
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
=======
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
>>>>>>> 2814753 (long press added)
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8004d72:	4b1e      	ldr	r3, [pc, #120]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x94>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d002      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x30>
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0x36>
 8004d86:	e027      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x80>
=======
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x30>
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0x36>
 8004d12:	e027      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x80>
>>>>>>> 2814753 (long press added)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8004d88:	4b19      	ldr	r3, [pc, #100]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d8a:	613b      	str	r3, [r7, #16]
      break;
 8004d8c:	e027      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x86>
=======
 8004d14:	4b19      	ldr	r3, [pc, #100]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d16:	613b      	str	r3, [r7, #16]
      break;
 8004d18:	e027      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> 2814753 (long press added)
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	0c9b      	lsrs	r3, r3, #18
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	4a17      	ldr	r2, [pc, #92]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d98:	5cd3      	ldrb	r3, [r2, r3]
 8004d9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x70>
=======
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0c9b      	lsrs	r3, r3, #18
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x70>
>>>>>>> 2814753 (long press added)
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x94>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	0c5b      	lsrs	r3, r3, #17
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	4a11      	ldr	r2, [pc, #68]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004db2:	5cd3      	ldrb	r3, [r2, r3]
 8004db4:	60bb      	str	r3, [r7, #8]
=======
 8004d32:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	0c5b      	lsrs	r3, r3, #17
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	60bb      	str	r3, [r7, #8]
>>>>>>> 2814753 (long press added)
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a0d      	ldr	r2, [pc, #52]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dba:	fb03 f202 	mul.w	r2, r3, r2
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e004      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x7a>
=======
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a0d      	ldr	r2, [pc, #52]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d46:	fb03 f202 	mul.w	r2, r3, r2
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e004      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x7a>
>>>>>>> 2814753 (long press added)
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a0c      	ldr	r2, [pc, #48]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	613b      	str	r3, [r7, #16]
      break;
 8004dd6:	e002      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x86>
=======
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	613b      	str	r3, [r7, #16]
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> 2814753 (long press added)
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8004dd8:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dda:	613b      	str	r3, [r7, #16]
      break;
 8004ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dde:	693b      	ldr	r3, [r7, #16]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	007a1200 	.word	0x007a1200
 8004df4:	0800b2fc 	.word	0x0800b2fc
 8004df8:	0800b30c 	.word	0x0800b30c
 8004dfc:	003d0900 	.word	0x003d0900

08004e00 <HAL_RCC_GetHCLKFreq>:
=======
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d66:	613b      	str	r3, [r7, #16]
      break;
 8004d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6a:	693b      	ldr	r3, [r7, #16]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	007a1200 	.word	0x007a1200
 8004d80:	0800b288 	.word	0x0800b288
 8004d84:	0800b298 	.word	0x0800b298
 8004d88:	003d0900 	.word	0x003d0900

08004d8c <HAL_RCC_GetHCLKFreq>:
>>>>>>> 2814753 (long press added)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e04:	4b02      	ldr	r3, [pc, #8]	@ (8004e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	20000014 	.word	0x20000014

08004e14 <HAL_RCC_GetPCLK1Freq>:
=======
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b02      	ldr	r3, [pc, #8]	@ (8004d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	20000014 	.word	0x20000014

08004da0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 2814753 (long press added)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e18:	f7ff fff2 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	@ (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	0800b2f4 	.word	0x0800b2f4

08004e3c <RCC_Delay>:
=======
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da4:	f7ff fff2 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	0800b280 	.word	0x0800b280

08004dc8 <RCC_Delay>:
>>>>>>> 2814753 (long press added)
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <RCC_Delay+0x34>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <RCC_Delay+0x38>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0a5b      	lsrs	r3, r3, #9
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e58:	bf00      	nop
  }
  while (Delay --);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	60fa      	str	r2, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f9      	bne.n	8004e58 <RCC_Delay+0x1c>
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	20000014 	.word	0x20000014
 8004e74:	10624dd3 	.word	0x10624dd3

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <RCC_Delay+0x34>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004e00 <RCC_Delay+0x38>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0a5b      	lsrs	r3, r3, #9
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004de4:	bf00      	nop
  }
  while (Delay --);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f9      	bne.n	8004de4 <RCC_Delay+0x1c>
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	20000014 	.word	0x20000014
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 2814753 (long press added)
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
=======
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d07d      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
=======
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d07d      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
>>>>>>> 2814753 (long press added)
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8004e98:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	61d3      	str	r3, [r2, #28]
 8004eb0:	4b49      	ldr	r3, [pc, #292]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b46      	ldr	r3, [pc, #280]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d118      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed8:	f7fc fc74 	bl	80017c4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	e008      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee0:	f7fc fc70 	bl	80017c4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	@ 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e06d      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 8004e24:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e30:	4b4c      	ldr	r3, [pc, #304]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4a4b      	ldr	r2, [pc, #300]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	61d3      	str	r3, [r2, #28]
 8004e3c:	4b49      	ldr	r3, [pc, #292]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b46      	ldr	r3, [pc, #280]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d118      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e58:	4b43      	ldr	r3, [pc, #268]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a42      	ldr	r2, [pc, #264]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e64:	f7fc fc74 	bl	8001750 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fc fc70 	bl	8001750 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	@ 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e06d      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> 2814753 (long press added)
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8004efe:	4b36      	ldr	r3, [pc, #216]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02e      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d027      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f26:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f32:	4a29      	ldr	r2, [pc, #164]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d014      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fc fc3f 	bl	80017c4 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7fc fc3b 	bl	80017c4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e036      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ee      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
=======
 8004e8a:	4b36      	ldr	r3, [pc, #216]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d027      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ebe:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d014      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fc fc3f 	bl	8001750 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fc fc3b 	bl	8001750 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e036      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ee      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
>>>>>>> 2814753 (long press added)
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4917      	ldr	r1, [pc, #92]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f84:	4b14      	ldr	r3, [pc, #80]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	4a13      	ldr	r2, [pc, #76]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	61d3      	str	r3, [r2, #28]
=======
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4917      	ldr	r1, [pc, #92]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b14      	ldr	r3, [pc, #80]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4a13      	ldr	r2, [pc, #76]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	61d3      	str	r3, [r2, #28]
>>>>>>> 2814753 (long press added)
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> 2814753 (long press added)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	490b      	ldr	r1, [pc, #44]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
=======
 8004f28:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	490b      	ldr	r1, [pc, #44]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
=======
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
>>>>>>> 2814753 (long press added)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 8004fba:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4904      	ldr	r1, [pc, #16]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
=======
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4904      	ldr	r1, [pc, #16]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
>>>>>>> 2814753 (long press added)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
<<<<<<< HEAD
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	42420440 	.word	0x42420440

08004fe4 <HAL_TIM_Base_Init>:
=======
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	42420440 	.word	0x42420440

08004f70 <HAL_TIM_Base_Init>:
>>>>>>> 2814753 (long press added)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e041      	b.n	800507a <HAL_TIM_Base_Init+0x96>
=======
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e041      	b.n	8005006 <HAL_TIM_Base_Init+0x96>
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 2814753 (long press added)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc f93c 	bl	8001288 <HAL_TIM_Base_MspInit>
=======
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc f93c 	bl	8001214 <HAL_TIM_Base_MspInit>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f001 f852 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_OC_Init>:
=======
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f001 f852 	bl	8006058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_OC_Init>:
>>>>>>> 2814753 (long press added)
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e041      	b.n	8005118 <HAL_TIM_OC_Init+0x96>
=======
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e041      	b.n	80050a4 <HAL_TIM_OC_Init+0x96>
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 2814753 (long press added)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fc f8c9 	bl	8001240 <HAL_TIM_OC_MspInit>
=======
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fc f8c9 	bl	80011cc <HAL_TIM_OC_MspInit>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f001 f803 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_PWM_Init>:
=======
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f001 f803 	bl	8006058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_PWM_Init>:
>>>>>>> 2814753 (long press added)
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e041      	b.n	80051b6 <HAL_TIM_PWM_Init+0x96>
=======
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e041      	b.n	8005142 <HAL_TIM_PWM_Init+0x96>
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 2814753 (long press added)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f839 	bl	80051be <HAL_TIM_PWM_MspInit>
=======
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f839 	bl	800514a <HAL_TIM_PWM_MspInit>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 ffb4 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_PWM_MspInit>:
=======
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 ffb4 	bl	8006058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_PWM_MspInit>:
>>>>>>> 2814753 (long press added)
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
=======
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_PWM_Start_DMA>:
=======
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_PWM_Start_DMA>:
>>>>>>> 2814753 (long press added)
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
<<<<<<< HEAD
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
=======
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	75fb      	strb	r3, [r7, #23]
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
<<<<<<< HEAD
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start_DMA+0x2c>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e022      	b.n	8005242 <HAL_TIM_PWM_Start_DMA+0x72>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d109      	bne.n	8005216 <HAL_TIM_PWM_Start_DMA+0x46>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e015      	b.n	8005242 <HAL_TIM_PWM_Start_DMA+0x72>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start_DMA+0x60>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e008      	b.n	8005242 <HAL_TIM_PWM_Start_DMA+0x72>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	e153      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start_DMA+0x94>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e022      	b.n	80052aa <HAL_TIM_PWM_Start_DMA+0xda>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d109      	bne.n	800527e <HAL_TIM_PWM_Start_DMA+0xae>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e015      	b.n	80052aa <HAL_TIM_PWM_Start_DMA+0xda>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d109      	bne.n	8005298 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e008      	b.n	80052aa <HAL_TIM_PWM_Start_DMA+0xda>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d024      	beq.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_TIM_PWM_Start_DMA+0xea>
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e119      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
=======
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e022      	b.n	80051ce <HAL_TIM_PWM_Start_DMA+0x72>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b04      	cmp	r3, #4
 800518c:	d109      	bne.n	80051a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e015      	b.n	80051ce <HAL_TIM_PWM_Start_DMA+0x72>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start_DMA+0x60>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e008      	b.n	80051ce <HAL_TIM_PWM_Start_DMA+0x72>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	bf0c      	ite	eq
 80051c8:	2301      	moveq	r3, #1
 80051ca:	2300      	movne	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
 80051d4:	e153      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e022      	b.n	8005236 <HAL_TIM_PWM_Start_DMA+0xda>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d109      	bne.n	800520a <HAL_TIM_PWM_Start_DMA+0xae>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e015      	b.n	8005236 <HAL_TIM_PWM_Start_DMA+0xda>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d109      	bne.n	8005224 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e008      	b.n	8005236 <HAL_TIM_PWM_Start_DMA+0xda>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d024      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_TIM_PWM_Start_DMA+0xea>
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e119      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Start_DMA+0xfe>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052cc:	e016      	b.n	80052fc <HAL_TIM_PWM_Start_DMA+0x12c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_PWM_Start_DMA+0x10e>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052dc:	e00e      	b.n	80052fc <HAL_TIM_PWM_Start_DMA+0x12c>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_PWM_Start_DMA+0x11e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ec:	e006      	b.n	80052fc <HAL_TIM_PWM_Start_DMA+0x12c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f6:	e001      	b.n	80052fc <HAL_TIM_PWM_Start_DMA+0x12c>
=======
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005258:	e016      	b.n	8005288 <HAL_TIM_PWM_Start_DMA+0x12c>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005268:	e00e      	b.n	8005288 <HAL_TIM_PWM_Start_DMA+0x12c>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005278:	e006      	b.n	8005288 <HAL_TIM_PWM_Start_DMA+0x12c>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005282:	e001      	b.n	8005288 <HAL_TIM_PWM_Start_DMA+0x12c>
>>>>>>> 2814753 (long press added)
    }
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0fa      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	f200 80ae 	bhi.w	8005460 <HAL_TIM_PWM_Start_DMA+0x290>
 8005304:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005341 	.word	0x08005341
 8005310:	08005461 	.word	0x08005461
 8005314:	08005461 	.word	0x08005461
 8005318:	08005461 	.word	0x08005461
 800531c:	08005389 	.word	0x08005389
 8005320:	08005461 	.word	0x08005461
 8005324:	08005461 	.word	0x08005461
 8005328:	08005461 	.word	0x08005461
 800532c:	080053d1 	.word	0x080053d1
 8005330:	08005461 	.word	0x08005461
 8005334:	08005461 	.word	0x08005461
 8005338:	08005461 	.word	0x08005461
 800533c:	08005419 	.word	0x08005419
=======
 8005284:	2301      	movs	r3, #1
 8005286:	e0fa      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	f200 80ae 	bhi.w	80053ec <HAL_TIM_PWM_Start_DMA+0x290>
 8005290:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052cd 	.word	0x080052cd
 800529c:	080053ed 	.word	0x080053ed
 80052a0:	080053ed 	.word	0x080053ed
 80052a4:	080053ed 	.word	0x080053ed
 80052a8:	08005315 	.word	0x08005315
 80052ac:	080053ed 	.word	0x080053ed
 80052b0:	080053ed 	.word	0x080053ed
 80052b4:	080053ed 	.word	0x080053ed
 80052b8:	0800535d 	.word	0x0800535d
 80052bc:	080053ed 	.word	0x080053ed
 80052c0:	080053ed 	.word	0x080053ed
 80052c4:	080053ed 	.word	0x080053ed
 80052c8:	080053a5 	.word	0x080053a5
>>>>>>> 2814753 (long press added)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	4a6d      	ldr	r2, [pc, #436]	@ (80054fc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005346:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	4a6c      	ldr	r2, [pc, #432]	@ (8005500 <HAL_TIM_PWM_Start_DMA+0x330>)
 800534e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	4a6b      	ldr	r2, [pc, #428]	@ (8005504 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3334      	adds	r3, #52	@ 0x34
 8005364:	461a      	mov	r2, r3
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	f7fc fbc2 	bl	8001af0 <HAL_DMA_Start_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_TIM_PWM_Start_DMA+0x1a6>
=======
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	4a6d      	ldr	r2, [pc, #436]	@ (8005488 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80052d2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	4a6c      	ldr	r2, [pc, #432]	@ (800548c <HAL_TIM_PWM_Start_DMA+0x330>)
 80052da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005490 <HAL_TIM_PWM_Start_DMA+0x334>)
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3334      	adds	r3, #52	@ 0x34
 80052f0:	461a      	mov	r2, r3
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	f7fc fbc2 	bl	8001a7c <HAL_DMA_Start_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_PWM_Start_DMA+0x1a6>
>>>>>>> 2814753 (long press added)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 8005372:	2301      	movs	r3, #1
 8005374:	e0bd      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
=======
 80052fe:	2301      	movs	r3, #1
 8005300:	e0bd      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
>>>>>>> 2814753 (long press added)
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
<<<<<<< HEAD
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005384:	60da      	str	r2, [r3, #12]
      break;
 8005386:	e06e      	b.n	8005466 <HAL_TIM_PWM_Start_DMA+0x296>
=======
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005310:	60da      	str	r2, [r3, #12]
      break;
 8005312:	e06e      	b.n	80053f2 <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	4a5b      	ldr	r2, [pc, #364]	@ (80054fc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	4a5a      	ldr	r2, [pc, #360]	@ (8005500 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005396:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	4a59      	ldr	r2, [pc, #356]	@ (8005504 <HAL_TIM_PWM_Start_DMA+0x334>)
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3338      	adds	r3, #56	@ 0x38
 80053ac:	461a      	mov	r2, r3
 80053ae:	887b      	ldrh	r3, [r7, #2]
 80053b0:	f7fc fb9e 	bl	8001af0 <HAL_DMA_Start_IT>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_TIM_PWM_Start_DMA+0x1ee>
=======
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005318:	4a5b      	ldr	r2, [pc, #364]	@ (8005488 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	4a5a      	ldr	r2, [pc, #360]	@ (800548c <HAL_TIM_PWM_Start_DMA+0x330>)
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	4a59      	ldr	r2, [pc, #356]	@ (8005490 <HAL_TIM_PWM_Start_DMA+0x334>)
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3338      	adds	r3, #56	@ 0x38
 8005338:	461a      	mov	r2, r3
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	f7fc fb9e 	bl	8001a7c <HAL_DMA_Start_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_TIM_PWM_Start_DMA+0x1ee>
>>>>>>> 2814753 (long press added)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 80053ba:	2301      	movs	r3, #1
 80053bc:	e099      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053cc:	60da      	str	r2, [r3, #12]
      break;
 80053ce:	e04a      	b.n	8005466 <HAL_TIM_PWM_Start_DMA+0x296>
=======
 8005346:	2301      	movs	r3, #1
 8005348:	e099      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005358:	60da      	str	r2, [r3, #12]
      break;
 800535a:	e04a      	b.n	80053f2 <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	4a49      	ldr	r2, [pc, #292]	@ (80054fc <HAL_TIM_PWM_Start_DMA+0x32c>)
 80053d6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	4a48      	ldr	r2, [pc, #288]	@ (8005500 <HAL_TIM_PWM_Start_DMA+0x330>)
 80053de:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	4a47      	ldr	r2, [pc, #284]	@ (8005504 <HAL_TIM_PWM_Start_DMA+0x334>)
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	333c      	adds	r3, #60	@ 0x3c
 80053f4:	461a      	mov	r2, r3
 80053f6:	887b      	ldrh	r3, [r7, #2]
 80053f8:	f7fc fb7a 	bl	8001af0 <HAL_DMA_Start_IT>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_TIM_PWM_Start_DMA+0x236>
=======
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	4a49      	ldr	r2, [pc, #292]	@ (8005488 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005362:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	4a48      	ldr	r2, [pc, #288]	@ (800548c <HAL_TIM_PWM_Start_DMA+0x330>)
 800536a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	4a47      	ldr	r2, [pc, #284]	@ (8005490 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	333c      	adds	r3, #60	@ 0x3c
 8005380:	461a      	mov	r2, r3
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	f7fc fb7a 	bl	8001a7c <HAL_DMA_Start_IT>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_TIM_PWM_Start_DMA+0x236>
>>>>>>> 2814753 (long press added)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 8005402:	2301      	movs	r3, #1
 8005404:	e075      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e026      	b.n	8005466 <HAL_TIM_PWM_Start_DMA+0x296>
=======
 800538e:	2301      	movs	r3, #1
 8005390:	e075      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053a0:	60da      	str	r2, [r3, #12]
      break;
 80053a2:	e026      	b.n	80053f2 <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	4a37      	ldr	r2, [pc, #220]	@ (80054fc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800541e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	4a36      	ldr	r2, [pc, #216]	@ (8005500 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	4a35      	ldr	r2, [pc, #212]	@ (8005504 <HAL_TIM_PWM_Start_DMA+0x334>)
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3340      	adds	r3, #64	@ 0x40
 800543c:	461a      	mov	r2, r3
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	f7fc fb56 	bl	8001af0 <HAL_DMA_Start_IT>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_TIM_PWM_Start_DMA+0x27e>
=======
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	4a37      	ldr	r2, [pc, #220]	@ (8005488 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	4a36      	ldr	r2, [pc, #216]	@ (800548c <HAL_TIM_PWM_Start_DMA+0x330>)
 80053b2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	4a35      	ldr	r2, [pc, #212]	@ (8005490 <HAL_TIM_PWM_Start_DMA+0x334>)
 80053ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3340      	adds	r3, #64	@ 0x40
 80053c8:	461a      	mov	r2, r3
 80053ca:	887b      	ldrh	r3, [r7, #2]
 80053cc:	f7fc fb56 	bl	8001a7c <HAL_DMA_Start_IT>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_TIM_PWM_Start_DMA+0x27e>
>>>>>>> 2814753 (long press added)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 800544a:	2301      	movs	r3, #1
 800544c:	e051      	b.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800545c:	60da      	str	r2, [r3, #12]
      break;
 800545e:	e002      	b.n	8005466 <HAL_TIM_PWM_Start_DMA+0x296>
=======
 80053d6:	2301      	movs	r3, #1
 80053d8:	e051      	b.n	800547e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053e8:	60da      	str	r2, [r3, #12]
      break;
 80053ea:	e002      	b.n	80053f2 <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> 2814753 (long press added)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	bf00      	nop
  }

  if (status == HAL_OK)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d141      	bne.n	80054f0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f8b5 	bl	80065e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a22      	ldr	r2, [pc, #136]	@ (8005508 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d107      	bne.n	8005494 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005492:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
      break;
 80053f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d141      	bne.n	800547c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2201      	movs	r2, #1
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f001 f8b5 	bl	8006570 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a22      	ldr	r2, [pc, #136]	@ (8005494 <HAL_TIM_PWM_Start_DMA+0x338>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d107      	bne.n	8005420 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800541e:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 2814753 (long press added)
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	@ (8005508 <HAL_TIM_PWM_Start_DMA+0x338>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_TIM_PWM_Start_DMA+0x2ec>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a6:	d009      	beq.n	80054bc <HAL_TIM_PWM_Start_DMA+0x2ec>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a17      	ldr	r2, [pc, #92]	@ (800550c <HAL_TIM_PWM_Start_DMA+0x33c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_TIM_PWM_Start_DMA+0x2ec>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <HAL_TIM_PWM_Start_DMA+0x340>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d111      	bne.n	80054e0 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d010      	beq.n	80054f0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054de:	e007      	b.n	80054f0 <HAL_TIM_PWM_Start_DMA+0x320>
=======
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1b      	ldr	r2, [pc, #108]	@ (8005494 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005432:	d009      	beq.n	8005448 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a16      	ldr	r2, [pc, #88]	@ (800549c <HAL_TIM_PWM_Start_DMA+0x340>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d111      	bne.n	800546c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d010      	beq.n	800547c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	e007      	b.n	800547c <HAL_TIM_PWM_Start_DMA+0x320>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
=======
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
    }
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08005fbb 	.word	0x08005fbb
 8005500:	08006063 	.word	0x08006063
 8005504:	08005f29 	.word	0x08005f29
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800

08005514 <HAL_TIM_PWM_Stop_DMA>:
=======
 800547c:	7dfb      	ldrb	r3, [r7, #23]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	08005f47 	.word	0x08005f47
 800548c:	08005fef 	.word	0x08005fef
 8005490:	08005eb5 	.word	0x08005eb5
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800

080054a0 <HAL_TIM_PWM_Stop_DMA>:
>>>>>>> 2814753 (long press added)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
=======
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d855      	bhi.n	80055d4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005528:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005565 	.word	0x08005565
 8005534:	080055d5 	.word	0x080055d5
 8005538:	080055d5 	.word	0x080055d5
 800553c:	080055d5 	.word	0x080055d5
 8005540:	08005581 	.word	0x08005581
 8005544:	080055d5 	.word	0x080055d5
 8005548:	080055d5 	.word	0x080055d5
 800554c:	080055d5 	.word	0x080055d5
 8005550:	0800559d 	.word	0x0800559d
 8005554:	080055d5 	.word	0x080055d5
 8005558:	080055d5 	.word	0x080055d5
 800555c:	080055d5 	.word	0x080055d5
 8005560:	080055b9 	.word	0x080055b9
=======
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b0c      	cmp	r3, #12
 80054b2:	d855      	bhi.n	8005560 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054f1 	.word	0x080054f1
 80054c0:	08005561 	.word	0x08005561
 80054c4:	08005561 	.word	0x08005561
 80054c8:	08005561 	.word	0x08005561
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	08005561 	.word	0x08005561
 80054d4:	08005561 	.word	0x08005561
 80054d8:	08005561 	.word	0x08005561
 80054dc:	08005529 	.word	0x08005529
 80054e0:	08005561 	.word	0x08005561
 80054e4:	08005561 	.word	0x08005561
 80054e8:	08005561 	.word	0x08005561
 80054ec:	08005545 	.word	0x08005545
>>>>>>> 2814753 (long press added)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
<<<<<<< HEAD
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005572:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f7fc fb19 	bl	8001bb0 <HAL_DMA_Abort_IT>
      break;
 800557e:	e02c      	b.n	80055da <HAL_TIM_PWM_Stop_DMA+0xc6>
=======
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	4618      	mov	r0, r3
 8005506:	f7fc fb19 	bl	8001b3c <HAL_DMA_Abort_IT>
      break;
 800550a:	e02c      	b.n	8005566 <HAL_TIM_PWM_Stop_DMA+0xc6>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
<<<<<<< HEAD
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800558e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	4618      	mov	r0, r3
 8005596:	f7fc fb0b 	bl	8001bb0 <HAL_DMA_Abort_IT>
      break;
 800559a:	e01e      	b.n	80055da <HAL_TIM_PWM_Stop_DMA+0xc6>
=======
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	4618      	mov	r0, r3
 8005522:	f7fc fb0b 	bl	8001b3c <HAL_DMA_Abort_IT>
      break;
 8005526:	e01e      	b.n	8005566 <HAL_TIM_PWM_Stop_DMA+0xc6>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
<<<<<<< HEAD
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fc fafd 	bl	8001bb0 <HAL_DMA_Abort_IT>
      break;
 80055b6:	e010      	b.n	80055da <HAL_TIM_PWM_Stop_DMA+0xc6>
=======
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005536:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	4618      	mov	r0, r3
 800553e:	f7fc fafd 	bl	8001b3c <HAL_DMA_Abort_IT>
      break;
 8005542:	e010      	b.n	8005566 <HAL_TIM_PWM_Stop_DMA+0xc6>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
<<<<<<< HEAD
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fc faef 	bl	8001bb0 <HAL_DMA_Abort_IT>
      break;
 80055d2:	e002      	b.n	80055da <HAL_TIM_PWM_Stop_DMA+0xc6>
=======
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005552:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc faef 	bl	8001b3c <HAL_DMA_Abort_IT>
      break;
 800555e:	e002      	b.n	8005566 <HAL_TIM_PWM_Stop_DMA+0xc6>
>>>>>>> 2814753 (long press added)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      break;
 80055d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d157      	bne.n	8005690 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2200      	movs	r2, #0
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fffb 	bl	80065e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d117      	bne.n	8005628 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10f      	bne.n	8005628 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	bf00      	nop
  }

  if (status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d157      	bne.n	800561c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fffb 	bl	8006570 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2a      	ldr	r2, [pc, #168]	@ (8005628 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d117      	bne.n	80055b4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	f240 4344 	movw	r3, #1092	@ 0x444
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 2814753 (long press added)
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6a1a      	ldr	r2, [r3, #32]
 800562e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10f      	bne.n	8005658 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <HAL_TIM_PWM_Stop_DMA+0x154>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005666:	e013      	b.n	8005690 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b04      	cmp	r3, #4
 800566c:	d104      	bne.n	8005678 <HAL_TIM_PWM_Stop_DMA+0x164>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005676:	e00b      	b.n	8005690 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b08      	cmp	r3, #8
 800567c:	d104      	bne.n	8005688 <HAL_TIM_PWM_Stop_DMA+0x174>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005686:	e003      	b.n	8005690 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10f      	bne.n	80055e4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6a1a      	ldr	r2, [r3, #32]
 80055ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <HAL_TIM_PWM_Stop_DMA+0x154>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055f2:	e013      	b.n	800561c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d104      	bne.n	8005604 <HAL_TIM_PWM_Stop_DMA+0x164>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005602:	e00b      	b.n	800561c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b08      	cmp	r3, #8
 8005608:	d104      	bne.n	8005614 <HAL_TIM_PWM_Stop_DMA+0x174>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005612:	e003      	b.n	800561c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> 2814753 (long press added)
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00

080056a0 <HAL_TIM_Encoder_Init>:
=======
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40012c00 	.word	0x40012c00

0800562c <HAL_TIM_Encoder_Init>:
>>>>>>> 2814753 (long press added)
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
=======
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e093      	b.n	80057dc <HAL_TIM_Encoder_Init+0x13c>
=======
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e093      	b.n	8005768 <HAL_TIM_Encoder_Init+0x13c>
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 2814753 (long press added)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7fb fd79 	bl	80011c0 <HAL_TIM_Encoder_MspInit>
=======
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fb fd79 	bl	800114c <HAL_TIM_Encoder_MspInit>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056e4:	f023 0307 	bic.w	r3, r3, #7
 80056e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f000 fce9 	bl	80060cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	4313      	orrs	r3, r2
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005740:	f023 030c 	bic.w	r3, r3, #12
 8005744:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800574c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	4313      	orrs	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	031b      	lsls	r3, r3, #12
 8005770:	4313      	orrs	r3, r2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4313      	orrs	r3, r2
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_Encoder_Start>:
=======
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f000 fce9 	bl	8006058 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	4313      	orrs	r3, r2
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056cc:	f023 030c 	bic.w	r3, r3, #12
 80056d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4313      	orrs	r3, r2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	031b      	lsls	r3, r3, #12
 80056fc:	4313      	orrs	r3, r2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4313      	orrs	r3, r2
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_Encoder_Start>:
>>>>>>> 2814753 (long press added)
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005804:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800580c:	733b      	strb	r3, [r7, #12]
=======
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005798:	733b      	strb	r3, [r7, #12]
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
<<<<<<< HEAD
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800581a:	7b7b      	ldrb	r3, [r7, #13]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e069      	b.n	80058f8 <HAL_TIM_Encoder_Start+0x114>
=======
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d110      	bne.n	80057c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d102      	bne.n	80057ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057a6:	7b7b      	ldrb	r3, [r7, #13]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e069      	b.n	8005884 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005834:	e031      	b.n	800589a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d110      	bne.n	800585e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d102      	bne.n	8005848 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005842:	7b3b      	ldrb	r3, [r7, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d001      	beq.n	800584c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e055      	b.n	80058f8 <HAL_TIM_Encoder_Start+0x114>
=======
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c0:	e031      	b.n	8005826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d110      	bne.n	80057ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d102      	bne.n	80057d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ce:	7b3b      	ldrb	r3, [r7, #12]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d001      	beq.n	80057d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e055      	b.n	8005884 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800585c:	e01d      	b.n	800589a <HAL_TIM_Encoder_Start+0xb6>
=======
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e8:	e01d      	b.n	8005826 <HAL_TIM_Encoder_Start+0xb6>
>>>>>>> 2814753 (long press added)
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d105      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800586a:	7b7b      	ldrb	r3, [r7, #13]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005870:	7b3b      	ldrb	r3, [r7, #12]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d001      	beq.n	800587a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e03e      	b.n	80058f8 <HAL_TIM_Encoder_Start+0x114>
=======
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d108      	bne.n	8005802 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f6:	7b7b      	ldrb	r3, [r7, #13]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057fc:	7b3b      	ldrb	r3, [r7, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d001      	beq.n	8005806 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e03e      	b.n	8005884 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
=======
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
>>>>>>> 2814753 (long press added)
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_TIM_Encoder_Start+0xc4>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d008      	beq.n	80058b8 <HAL_TIM_Encoder_Start+0xd4>
 80058a6:	e00f      	b.n	80058c8 <HAL_TIM_Encoder_Start+0xe4>
=======
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_TIM_Encoder_Start+0xc4>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b04      	cmp	r3, #4
 8005830:	d008      	beq.n	8005844 <HAL_TIM_Encoder_Start+0xd4>
 8005832:	e00f      	b.n	8005854 <HAL_TIM_Encoder_Start+0xe4>
>>>>>>> 2814753 (long press added)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fe97 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 80058b6:	e016      	b.n	80058e6 <HAL_TIM_Encoder_Start+0x102>
=======
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2201      	movs	r2, #1
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fe97 	bl	8006570 <TIM_CCxChannelCmd>
      break;
 8005842:	e016      	b.n	8005872 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> 2814753 (long press added)
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	2104      	movs	r1, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fe8f 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 80058c6:	e00e      	b.n	80058e6 <HAL_TIM_Encoder_Start+0x102>
=======
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	2104      	movs	r1, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fe8f 	bl	8006570 <TIM_CCxChannelCmd>
      break;
 8005852:	e00e      	b.n	8005872 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> 2814753 (long press added)
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2201      	movs	r2, #1
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fe87 	bl	80065e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2201      	movs	r2, #1
 80058dc:	2104      	movs	r1, #4
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe80 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 80058e4:	bf00      	nop
=======
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fe87 	bl	8006570 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	2104      	movs	r1, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fe80 	bl	8006570 <TIM_CCxChannelCmd>
      break;
 8005870:	bf00      	nop
>>>>>>> 2814753 (long press added)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_IRQHandler>:
=======
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_TIM_IRQHandler>:
>>>>>>> 2814753 (long press added)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d020      	beq.n	8005964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0202 	mvn.w	r2, #2
 8005934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x52>
=======
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d020      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01b      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0202 	mvn.w	r2, #2
 80058c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_TIM_IRQHandler+0x52>
>>>>>>> 2814753 (long press added)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fabf 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0x5e>
=======
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fabf 	bl	8005e5a <HAL_TIM_IC_CaptureCallback>
 80058dc:	e005      	b.n	80058ea <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 2814753 (long press added)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fab2 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fac1 	bl	8005ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
=======
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fab2 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fac1 	bl	8005e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
>>>>>>> 2814753 (long press added)
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d020      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01b      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0204 	mvn.w	r2, #4
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0x9e>
=======
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d020      	beq.n	800593c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0204 	mvn.w	r2, #4
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 2814753 (long press added)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa99 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xaa>
=======
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa99 	bl	8005e5a <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 2814753 (long press added)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa8c 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa9b 	bl	8005ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
=======
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa8c 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa9b 	bl	8005e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
>>>>>>> 2814753 (long press added)
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0208 	mvn.w	r2, #8
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2204      	movs	r2, #4
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0xea>
=======
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01b      	beq.n	8005988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0208 	mvn.w	r2, #8
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2204      	movs	r2, #4
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0xea>
>>>>>>> 2814753 (long press added)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa73 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0xf6>
=======
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa73 	bl	8005e5a <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> 2814753 (long press added)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa66 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa75 	bl	8005ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
=======
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa66 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa75 	bl	8005e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
>>>>>>> 2814753 (long press added)
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d020      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0210 	mvn.w	r2, #16
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x136>
=======
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b00      	cmp	r3, #0
 8005990:	d020      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0210 	mvn.w	r2, #16
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2208      	movs	r2, #8
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x136>
>>>>>>> 2814753 (long press added)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa4d 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0x142>
=======
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa4d 	bl	8005e5a <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0x142>
>>>>>>> 2814753 (long press added)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa40 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fa4f 	bl	8005ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
=======
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa40 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa4f 	bl	8005e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
>>>>>>> 2814753 (long press added)
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
=======
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0201 	mvn.w	r2, #1
 80059f0:	611a      	str	r2, [r3, #16]
>>>>>>> 2814753 (long press added)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa1f 	bl	8005eaa <HAL_TIM_PeriodElapsedCallback>
=======
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa1f 	bl	8005e36 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a88:	611a      	str	r2, [r3, #16]
=======
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a14:	611a      	str	r2, [r3, #16]
>>>>>>> 2814753 (long press added)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fe35 	bl	80066fa <HAL_TIMEx_BreakCallback>
=======
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fe35 	bl	8006686 <HAL_TIMEx_BreakCallback>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005aac:	611a      	str	r2, [r3, #16]
=======
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a38:	611a      	str	r2, [r3, #16]
>>>>>>> 2814753 (long press added)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa28 	bl	8005f04 <HAL_TIM_TriggerCallback>
=======
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa28 	bl	8005e90 <HAL_TIM_TriggerCallback>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0220 	mvn.w	r2, #32
 8005ad0:	611a      	str	r2, [r3, #16]
=======
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0220 	mvn.w	r2, #32
 8005a5c:	611a      	str	r2, [r3, #16]
>>>>>>> 2814753 (long press added)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fe08 	bl	80066e8 <HAL_TIMEx_CommutCallback>
=======
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fe08 	bl	8006674 <HAL_TIMEx_CommutCallback>
>>>>>>> 2814753 (long press added)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_OC_ConfigChannel>:
=======
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_OC_ConfigChannel>:
>>>>>>> 2814753 (long press added)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	75fb      	strb	r3, [r7, #23]
=======
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75fb      	strb	r3, [r7, #23]
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_OC_ConfigChannel+0x1e>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e048      	b.n	8005b90 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d839      	bhi.n	8005b80 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005b81 	.word	0x08005b81
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005b81 	.word	0x08005b81
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b81 	.word	0x08005b81
 8005b3c:	08005b81 	.word	0x08005b81
 8005b40:	08005b81 	.word	0x08005b81
 8005b44:	08005b73 	.word	0x08005b73
=======
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e048      	b.n	8005b1c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d839      	bhi.n	8005b0c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005a98:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005b0d 	.word	0x08005b0d
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	08005ae3 	.word	0x08005ae3
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005b0d 	.word	0x08005b0d
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005b0d 	.word	0x08005b0d
 8005ac8:	08005b0d 	.word	0x08005b0d
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005aff 	.word	0x08005aff
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fb2a 	bl	80061a8 <TIM_OC1_SetConfig>
      break;
 8005b54:	e017      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fb2a 	bl	8006134 <TIM_OC1_SetConfig>
      break;
 8005ae0:	e017      	b.n	8005b12 <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fb89 	bl	8006274 <TIM_OC2_SetConfig>
      break;
 8005b62:	e010      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fb89 	bl	8006200 <TIM_OC2_SetConfig>
      break;
 8005aee:	e010      	b.n	8005b12 <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fbec 	bl	8006348 <TIM_OC3_SetConfig>
      break;
 8005b70:	e009      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fbec 	bl	80062d4 <TIM_OC3_SetConfig>
      break;
 8005afc:	e009      	b.n	8005b12 <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fc4f 	bl	800641c <TIM_OC4_SetConfig>
      break;
 8005b7e:	e002      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fc4f 	bl	80063a8 <TIM_OC4_SetConfig>
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 2814753 (long press added)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
      break;
 8005b84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_PWM_ConfigChannel>:
=======
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 2814753 (long press added)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	75fb      	strb	r3, [r7, #23]
=======
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	75fb      	strb	r3, [r7, #23]
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0ae      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	f200 809f 	bhi.w	8005d04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005d05 	.word	0x08005d05
 8005bd4:	08005d05 	.word	0x08005d05
 8005bd8:	08005d05 	.word	0x08005d05
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005d05 	.word	0x08005d05
 8005be4:	08005d05 	.word	0x08005d05
 8005be8:	08005d05 	.word	0x08005d05
 8005bec:	08005c83 	.word	0x08005c83
 8005bf0:	08005d05 	.word	0x08005d05
 8005bf4:	08005d05 	.word	0x08005d05
 8005bf8:	08005d05 	.word	0x08005d05
 8005bfc:	08005cc3 	.word	0x08005cc3
=======
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0ae      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	f200 809f 	bhi.w	8005c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005c91 	.word	0x08005c91
 8005b60:	08005c91 	.word	0x08005c91
 8005b64:	08005c91 	.word	0x08005c91
 8005b68:	08005bcd 	.word	0x08005bcd
 8005b6c:	08005c91 	.word	0x08005c91
 8005b70:	08005c91 	.word	0x08005c91
 8005b74:	08005c91 	.word	0x08005c91
 8005b78:	08005c0f 	.word	0x08005c0f
 8005b7c:	08005c91 	.word	0x08005c91
 8005b80:	08005c91 	.word	0x08005c91
 8005b84:	08005c91 	.word	0x08005c91
 8005b88:	08005c4f 	.word	0x08005c4f
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 face 	bl	80061a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
      break;
 8005c3e:	e064      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 face 	bl	8006134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	619a      	str	r2, [r3, #24]
      break;
 8005bca:	e064      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fb14 	bl	8006274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      break;
 8005c80:	e043      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb14 	bl	8006200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6999      	ldr	r1, [r3, #24]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	619a      	str	r2, [r3, #24]
      break;
 8005c0c:	e043      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb5d 	bl	8006348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      break;
 8005cc0:	e023      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fb5d 	bl	80062d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0204 	bic.w	r2, r2, #4
 8005c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	61da      	str	r2, [r3, #28]
      break;
 8005c4c:	e023      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 2814753 (long press added)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fba7 	bl	800641c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fba7 	bl	80063a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69d9      	ldr	r1, [r3, #28]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	021a      	lsls	r2, r3, #8
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	61da      	str	r2, [r3, #28]
      break;
 8005c8e:	e002      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 2814753 (long press added)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
      break;
 8005d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_ConfigClockSource>:
=======
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
      break;
 8005c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_TIM_ConfigClockSource>:
>>>>>>> 2814753 (long press added)
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
=======
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
>>>>>>> 2814753 (long press added)
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_ConfigClockSource+0x1c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0b4      	b.n	8005ea2 <HAL_TIM_ConfigClockSource+0x186>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e0b4      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x186>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d70:	d03e      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d76:	f200 8087 	bhi.w	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x172>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d86:	d87f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b70      	cmp	r3, #112	@ 0x70
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d8c:	2b70      	cmp	r3, #112	@ 0x70
 8005d8e:	d87b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b60      	cmp	r3, #96	@ 0x60
 8005d92:	d050      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x11a>
 8005d94:	2b60      	cmp	r3, #96	@ 0x60
 8005d96:	d877      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b50      	cmp	r3, #80	@ 0x50
 8005d9a:	d03c      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0xfa>
 8005d9c:	2b50      	cmp	r3, #80	@ 0x50
 8005d9e:	d873      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d058      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x13a>
 8005da4:	2b40      	cmp	r3, #64	@ 0x40
 8005da6:	d86f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b30      	cmp	r3, #48	@ 0x30
 8005daa:	d064      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dac:	2b30      	cmp	r3, #48	@ 0x30
 8005dae:	d86b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d060      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d867      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d05a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	e062      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfc:	d03e      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0xd4>
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d02:	f200 8087 	bhi.w	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0a:	f000 8086 	beq.w	8005e1a <HAL_TIM_ConfigClockSource+0x172>
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d12:	d87f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b70      	cmp	r3, #112	@ 0x70
 8005d16:	d01a      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0xa6>
 8005d18:	2b70      	cmp	r3, #112	@ 0x70
 8005d1a:	d87b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b60      	cmp	r3, #96	@ 0x60
 8005d1e:	d050      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d20:	2b60      	cmp	r3, #96	@ 0x60
 8005d22:	d877      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b50      	cmp	r3, #80	@ 0x50
 8005d26:	d03c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d28:	2b50      	cmp	r3, #80	@ 0x50
 8005d2a:	d873      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b40      	cmp	r3, #64	@ 0x40
 8005d2e:	d058      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d86f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b30      	cmp	r3, #48	@ 0x30
 8005d36:	d064      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d38:	2b30      	cmp	r3, #48	@ 0x30
 8005d3a:	d86b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d060      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d867      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05c      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d05a      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d4c:	e062      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> 2814753 (long press added)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd2:	f000 fbe8 	bl	80065a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	609a      	str	r2, [r3, #8]
      break;
 8005dee:	e04f      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d5e:	f000 fbe8 	bl	8006532 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	609a      	str	r2, [r3, #8]
      break;
 8005d7a:	e04f      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 2814753 (long press added)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	f000 fbd1 	bl	80065a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e12:	609a      	str	r2, [r3, #8]
      break;
 8005e14:	e03c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d8c:	f000 fbd1 	bl	8006532 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d9e:	609a      	str	r2, [r3, #8]
      break;
 8005da0:	e03c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 2814753 (long press added)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fb48 	bl	80064b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2150      	movs	r1, #80	@ 0x50
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fb9f 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005e34:	e02c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fb48 	bl	8006444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2150      	movs	r1, #80	@ 0x50
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fb9f 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e02c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 2814753 (long press added)

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 fb66 	bl	8006514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2160      	movs	r1, #96	@ 0x60
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fb8f 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005e54:	e01c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fb66 	bl	80064a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2160      	movs	r1, #96	@ 0x60
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fb8f 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005de0:	e01c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 2814753 (long press added)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	461a      	mov	r2, r3
 8005e64:	f000 fb28 	bl	80064b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2140      	movs	r1, #64	@ 0x40
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fb7f 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 fb28 	bl	8006444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2140      	movs	r1, #64	@ 0x40
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb7f 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005e00:	e00c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 2814753 (long press added)
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f000 fb76 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f000 fb76 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005e12:	e003      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 2814753 (long press added)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_TIM_PeriodElapsedCallback>:
=======
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
=======
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
=======
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr

08005ece <HAL_TIM_IC_CaptureCallback>:
=======
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
=======
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
=======
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
=======
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
=======
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIM_TriggerCallback>:
=======
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIM_TriggerCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
=======
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_ErrorCallback>:
=======
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_TIM_ErrorCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
=======
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <TIM_DMAError>:
=======
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_DMAError>:
>>>>>>> 2814753 (long press added)
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d107      	bne.n	8005f50 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f4e:	e02a      	b.n	8005fa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d107      	bne.n	8005f6a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f68:	e01d      	b.n	8005fa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d107      	bne.n	8005f84 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2204      	movs	r2, #4
 8005f78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f82:	e010      	b.n	8005fa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d107      	bne.n	8005f9e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2208      	movs	r2, #8
 8005f92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f9c:	e003      	b.n	8005fa6 <TIM_DMAError+0x7e>
=======
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d107      	bne.n	8005edc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eda:	e02a      	b.n	8005f32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d107      	bne.n	8005ef6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef4:	e01d      	b.n	8005f32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d107      	bne.n	8005f10 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2204      	movs	r2, #4
 8005f04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f0e:	e010      	b.n	8005f32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d107      	bne.n	8005f2a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f28:	e003      	b.n	8005f32 <TIM_DMAError+0x7e>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> 2814753 (long press added)
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
<<<<<<< HEAD
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff ffb5 	bl	8005f16 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	771a      	strb	r2, [r3, #28]
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <TIM_DMADelayPulseCplt>:
=======
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff ffb5 	bl	8005ea2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	771a      	strb	r2, [r3, #28]
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <TIM_DMADelayPulseCplt>:
>>>>>>> 2814753 (long press added)
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d10b      	bne.n	8005fea <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d136      	bne.n	800604e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe8:	e031      	b.n	800604e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d10b      	bne.n	800600c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d125      	bne.n	800604e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800600a:	e020      	b.n	800604e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d10b      	bne.n	800602e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2204      	movs	r2, #4
 800601a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d114      	bne.n	800604e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800602c:	e00f      	b.n	800604e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d10a      	bne.n	800604e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2208      	movs	r2, #8
 800603c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d10b      	bne.n	8005f76 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d136      	bne.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f74:	e031      	b.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d10b      	bne.n	8005f98 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2202      	movs	r2, #2
 8005f84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d125      	bne.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f96:	e020      	b.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d10b      	bne.n	8005fba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d114      	bne.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fb8:	e00f      	b.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d10a      	bne.n	8005fda <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> 2814753 (long press added)
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff ff46 	bl	8005ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <TIM_DMADelayPulseHalfCplt>:
=======
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff ff46 	bl	8005e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	771a      	strb	r2, [r3, #28]
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <TIM_DMADelayPulseHalfCplt>:
>>>>>>> 2814753 (long press added)
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d103      	bne.n	8006082 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	771a      	strb	r2, [r3, #28]
 8006080:	e019      	b.n	80060b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d103      	bne.n	8006094 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2202      	movs	r2, #2
 8006090:	771a      	strb	r2, [r3, #28]
 8006092:	e010      	b.n	80060b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d103      	bne.n	80060a6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2204      	movs	r2, #4
 80060a2:	771a      	strb	r2, [r3, #28]
 80060a4:	e007      	b.n	80060b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d102      	bne.n	80060b6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2208      	movs	r2, #8
 80060b4:	771a      	strb	r2, [r3, #28]
=======
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d103      	bne.n	800600e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	771a      	strb	r2, [r3, #28]
 800600c:	e019      	b.n	8006042 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d103      	bne.n	8006020 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2202      	movs	r2, #2
 800601c:	771a      	strb	r2, [r3, #28]
 800601e:	e010      	b.n	8006042 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	429a      	cmp	r2, r3
 8006028:	d103      	bne.n	8006032 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2204      	movs	r2, #4
 800602e:	771a      	strb	r2, [r3, #28]
 8006030:	e007      	b.n	8006042 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d102      	bne.n	8006042 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2208      	movs	r2, #8
 8006040:	771a      	strb	r2, [r3, #28]
>>>>>>> 2814753 (long press added)
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
<<<<<<< HEAD
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ff1b 	bl	8005ef2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	771a      	strb	r2, [r3, #28]
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <TIM_Base_SetConfig>:
=======
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff ff1b 	bl	8005e7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	771a      	strb	r2, [r3, #28]
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <TIM_Base_SetConfig>:
>>>>>>> 2814753 (long press added)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a2f      	ldr	r2, [pc, #188]	@ (800619c <TIM_Base_SetConfig+0xd0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_Base_SetConfig+0x30>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ea:	d007      	beq.n	80060fc <TIM_Base_SetConfig+0x30>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a2c      	ldr	r2, [pc, #176]	@ (80061a0 <TIM_Base_SetConfig+0xd4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0x30>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2b      	ldr	r2, [pc, #172]	@ (80061a4 <TIM_Base_SetConfig+0xd8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a22      	ldr	r2, [pc, #136]	@ (800619c <TIM_Base_SetConfig+0xd0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00b      	beq.n	800612e <TIM_Base_SetConfig+0x62>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611c:	d007      	beq.n	800612e <TIM_Base_SetConfig+0x62>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1f      	ldr	r2, [pc, #124]	@ (80061a0 <TIM_Base_SetConfig+0xd4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_Base_SetConfig+0x62>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1e      	ldr	r2, [pc, #120]	@ (80061a4 <TIM_Base_SetConfig+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
=======
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a2f      	ldr	r2, [pc, #188]	@ (8006128 <TIM_Base_SetConfig+0xd0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0x30>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0x30>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a2c      	ldr	r2, [pc, #176]	@ (800612c <TIM_Base_SetConfig+0xd4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x30>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a2b      	ldr	r2, [pc, #172]	@ (8006130 <TIM_Base_SetConfig+0xd8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a22      	ldr	r2, [pc, #136]	@ (8006128 <TIM_Base_SetConfig+0xd0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_Base_SetConfig+0x62>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a8:	d007      	beq.n	80060ba <TIM_Base_SetConfig+0x62>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <TIM_Base_SetConfig+0xd4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_Base_SetConfig+0x62>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006130 <TIM_Base_SetConfig+0xd8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d108      	bne.n	80060cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
>>>>>>> 2814753 (long press added)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a0d      	ldr	r2, [pc, #52]	@ (800619c <TIM_Base_SetConfig+0xd0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d103      	bne.n	8006174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006128 <TIM_Base_SetConfig+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 2814753 (long press added)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	611a      	str	r2, [r3, #16]
  }
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800

080061a8 <TIM_OC1_SetConfig>:
=======
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	611a      	str	r2, [r3, #16]
  }
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800

08006134 <TIM_OC1_SetConfig>:
>>>>>>> 2814753 (long press added)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
=======
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f023 0201 	bic.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <TIM_OC1_SetConfig+0xc8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10c      	bne.n	800621e <TIM_OC1_SetConfig+0x76>
=======
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f023 0201 	bic.w	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a1c      	ldr	r2, [pc, #112]	@ (80061fc <TIM_OC1_SetConfig+0xc8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10c      	bne.n	80061aa <TIM_OC1_SetConfig+0x76>
>>>>>>> 2814753 (long press added)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0308 	bic.w	r3, r3, #8
 800620a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f023 0304 	bic.w	r3, r3, #4
 800621c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a13      	ldr	r2, [pc, #76]	@ (8006270 <TIM_OC1_SetConfig+0xc8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d111      	bne.n	800624a <TIM_OC1_SetConfig+0xa2>
=======
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0308 	bic.w	r3, r3, #8
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a13      	ldr	r2, [pc, #76]	@ (80061fc <TIM_OC1_SetConfig+0xc8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d111      	bne.n	80061d6 <TIM_OC1_SetConfig+0xa2>
>>>>>>> 2814753 (long press added)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800622c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
=======
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
>>>>>>> 2814753 (long press added)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40012c00 	.word	0x40012c00

08006274 <TIM_OC2_SetConfig>:
=======
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00

08006200 <TIM_OC2_SetConfig>:
>>>>>>> 2814753 (long press added)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
=======
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f023 0210 	bic.w	r2, r3, #16
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f023 0320 	bic.w	r3, r3, #32
 80062be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006344 <TIM_OC2_SetConfig+0xd0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10d      	bne.n	80062f0 <TIM_OC2_SetConfig+0x7c>
=======
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f023 0210 	bic.w	r2, r3, #16
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0320 	bic.w	r3, r3, #32
 800624a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a1d      	ldr	r2, [pc, #116]	@ (80062d0 <TIM_OC2_SetConfig+0xd0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10d      	bne.n	800627c <TIM_OC2_SetConfig+0x7c>
>>>>>>> 2814753 (long press added)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <TIM_OC2_SetConfig+0xd0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d113      	bne.n	8006320 <TIM_OC2_SetConfig+0xac>
=======
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800627a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a14      	ldr	r2, [pc, #80]	@ (80062d0 <TIM_OC2_SetConfig+0xd0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d113      	bne.n	80062ac <TIM_OC2_SetConfig+0xac>
>>>>>>> 2814753 (long press added)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
=======
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800628a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
>>>>>>> 2814753 (long press added)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	40012c00 	.word	0x40012c00

08006348 <TIM_OC3_SetConfig>:
=======
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	40012c00 	.word	0x40012c00

080062d4 <TIM_OC3_SetConfig>:
>>>>>>> 2814753 (long press added)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
=======
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0303 	bic.w	r3, r3, #3
 800637e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006418 <TIM_OC3_SetConfig+0xd0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d10d      	bne.n	80063c2 <TIM_OC3_SetConfig+0x7a>
=======
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <TIM_OC3_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10d      	bne.n	800634e <TIM_OC3_SetConfig+0x7a>
>>>>>>> 2814753 (long press added)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <TIM_OC3_SetConfig+0xd0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d113      	bne.n	80063f2 <TIM_OC3_SetConfig+0xaa>
=======
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	@ (80063a4 <TIM_OC3_SetConfig+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d113      	bne.n	800637e <TIM_OC3_SetConfig+0xaa>
>>>>>>> 2814753 (long press added)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
=======
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800635c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
>>>>>>> 2814753 (long press added)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00

0800641c <TIM_OC4_SetConfig>:
=======
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40012c00 	.word	0x40012c00

080063a8 <TIM_OC4_SetConfig>:
>>>>>>> 2814753 (long press added)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
=======
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	031b      	lsls	r3, r3, #12
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a0f      	ldr	r2, [pc, #60]	@ (80064b4 <TIM_OC4_SetConfig+0x98>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d109      	bne.n	8006490 <TIM_OC4_SetConfig+0x74>
=======
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	031b      	lsls	r3, r3, #12
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0f      	ldr	r2, [pc, #60]	@ (8006440 <TIM_OC4_SetConfig+0x98>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d109      	bne.n	800641c <TIM_OC4_SetConfig+0x74>
>>>>>>> 2814753 (long press added)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	019b      	lsls	r3, r3, #6
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
=======
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800640e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
>>>>>>> 2814753 (long press added)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00

080064b8 <TIM_TI1_ConfigInputStage>:
=======
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr
 8006440:	40012c00 	.word	0x40012c00

08006444 <TIM_TI1_ConfigInputStage>:
>>>>>>> 2814753 (long press added)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
=======
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0201 	bic.w	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f023 030a 	bic.w	r3, r3, #10
 80064f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <TIM_TI2_ConfigInputStage>:
=======
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800646e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f023 030a 	bic.w	r3, r3, #10
 8006480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr

080064a0 <TIM_TI2_ConfigInputStage>:
>>>>>>> 2814753 (long press added)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
=======
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 0210 	bic.w	r2, r3, #16
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800653e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	031b      	lsls	r3, r3, #12
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006550:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	621a      	str	r2, [r3, #32]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <TIM_ITRx_SetConfig>:
=======
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0210 	bic.w	r2, r3, #16
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	031b      	lsls	r3, r3, #12
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]
}
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr

080064fe <TIM_ITRx_SetConfig>:
>>>>>>> 2814753 (long press added)
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
=======
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	f043 0307 	orr.w	r3, r3, #7
 8006594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	609a      	str	r2, [r3, #8]
}
 800659c:	bf00      	nop
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr

080065a6 <TIM_ETR_SetConfig>:
=======
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	f043 0307 	orr.w	r3, r3, #7
 8006520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <TIM_ETR_SetConfig>:
>>>>>>> 2814753 (long press added)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80065a6:	b480      	push	{r7}
 80065a8:	b087      	sub	sp, #28
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	021a      	lsls	r2, r3, #8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	609a      	str	r2, [r3, #8]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <TIM_CCxChannelCmd>:
=======
 8006532:	b480      	push	{r7}
 8006534:	b087      	sub	sp, #28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	021a      	lsls	r2, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	431a      	orrs	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	609a      	str	r2, [r3, #8]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <TIM_CCxChannelCmd>:
>>>>>>> 2814753 (long press added)
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
=======
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
>>>>>>> 2814753 (long press added)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2201      	movs	r2, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 031f 	and.w	r3, r3, #31
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2201      	movs	r2, #1
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	43db      	mvns	r3, r3
 8006592:	401a      	ands	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 2814753 (long press added)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
=======
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006640:	2302      	movs	r3, #2
 8006642:	e046      	b.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d009      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a12      	ldr	r2, [pc, #72]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a10      	ldr	r2, [pc, #64]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10c      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	609a      	str	r2, [r3, #8]
=======
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e046      	b.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a16      	ldr	r2, [pc, #88]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661c:	d009      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a12      	ldr	r2, [pc, #72]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a10      	ldr	r2, [pc, #64]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10c      	bne.n	800664c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4313      	orrs	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	609a      	str	r2, [r3, #8]
>>>>>>> 2814753 (long press added)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800

080066e8 <HAL_TIMEx_CommutCallback>:
=======
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800

08006674 <HAL_TIMEx_CommutCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
=======
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <HAL_TIMEx_BreakCallback>:
=======
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <HAL_TIMEx_BreakCallback>:
>>>>>>> 2814753 (long press added)
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
=======
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <USB_CoreInit>:
=======
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <USB_CoreInit>:
>>>>>>> 2814753 (long press added)
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	4638      	mov	r0, r7
 8006716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	4638      	mov	r0, r7
 80066a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 2814753 (long press added)
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <USB_EnableGlobalInt>:
=======
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <USB_EnableGlobalInt>:
>>>>>>> 2814753 (long press added)
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
=======
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< HEAD
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006736:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800673a:	60fb      	str	r3, [r7, #12]
=======
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066c2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80066c6:	60fb      	str	r3, [r7, #12]
>>>>>>> 2814753 (long press added)
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< HEAD
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr

08006752 <USB_DisableGlobalInt>:
=======
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <USB_DisableGlobalInt>:
>>>>>>> 2814753 (long press added)
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
=======
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 800675a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800675e:	60fb      	str	r3, [r7, #12]
=======
 80066e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80066ea:	60fb      	str	r3, [r7, #12]
>>>>>>> 2814753 (long press added)
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	b29b      	uxth	r3, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	b29b      	uxth	r3, r3
 8006770:	4013      	ands	r3, r2
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <USB_SetCurrentMode>:
=======
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	4013      	ands	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <USB_SetCurrentMode>:
>>>>>>> 2814753 (long press added)
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
<<<<<<< HEAD
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
=======
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
>>>>>>> 2814753 (long press added)

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
<<<<<<< HEAD
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <USB_DevInit>:
=======
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr

0800672a <USB_DevInit>:
>>>>>>> 2814753 (long press added)
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	4638      	mov	r0, r7
 80067a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	4638      	mov	r0, r7
 8006734:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 2814753 (long press added)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <USB_ActivateEndpoint>:
=======
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <USB_ActivateEndpoint>:
>>>>>>> 2814753 (long press added)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 80067d8:	b480      	push	{r7}
 80067da:	b09d      	sub	sp, #116	@ 0x74
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80067fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	78db      	ldrb	r3, [r3, #3]
 8006806:	2b03      	cmp	r3, #3
 8006808:	d81f      	bhi.n	800684a <USB_ActivateEndpoint+0x72>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <USB_ActivateEndpoint+0x38>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006821 	.word	0x08006821
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006853 	.word	0x08006853
 800681c:	0800682f 	.word	0x0800682f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006820:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006824:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006828:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800682c:	e012      	b.n	8006854 <USB_ActivateEndpoint+0x7c>
=======
 8006764:	b480      	push	{r7}
 8006766:	b09d      	sub	sp, #116	@ 0x74
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d81f      	bhi.n	80067d6 <USB_ActivateEndpoint+0x72>
 8006796:	a201      	add	r2, pc, #4	@ (adr r2, 800679c <USB_ActivateEndpoint+0x38>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067df 	.word	0x080067df
 80067a8:	080067bb 	.word	0x080067bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80067ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80067b8:	e012      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>
>>>>>>> 2814753 (long press added)
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
<<<<<<< HEAD
 800682e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006832:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006836:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800683a:	e00b      	b.n	8006854 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800683c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006844:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006848:	e004      	b.n	8006854 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006850:	e000      	b.n	8006854 <USB_ActivateEndpoint+0x7c>
      break;
 8006852:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688c:	b29b      	uxth	r3, r3
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	7812      	ldrb	r2, [r2, #0]
 8006892:	4313      	orrs	r3, r2
 8006894:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80068a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	7b1b      	ldrb	r3, [r3, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8178 	bne.w	8006bb4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8084 	beq.w	80069d6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068d8:	b29b      	uxth	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	4413      	add	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	011a      	lsls	r2, r3, #4
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	827b      	strh	r3, [r7, #18]
 8006910:	8a7b      	ldrh	r3, [r7, #18]
 8006912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01b      	beq.n	8006952 <USB_ActivateEndpoint+0x17a>
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006930:	823b      	strh	r3, [r7, #16]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8a3b      	ldrh	r3, [r7, #16]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	78db      	ldrb	r3, [r3, #3]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d020      	beq.n	800699c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006970:	81bb      	strh	r3, [r7, #12]
 8006972:	89bb      	ldrh	r3, [r7, #12]
 8006974:	f083 0320 	eor.w	r3, r3, #32
 8006978:	81bb      	strh	r3, [r7, #12]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	89bb      	ldrh	r3, [r7, #12]
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]
 800699a:	e2d5      	b.n	8006f48 <USB_ActivateEndpoint+0x770>
=======
 80067ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80067c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80067c6:	e00b      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80067c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80067d4:	e004      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80067dc:	e000      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>
      break;
 80067de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006818:	b29b      	uxth	r3, r3
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	7812      	ldrb	r2, [r2, #0]
 800681e:	4313      	orrs	r3, r2
 8006820:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800683a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800683e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006842:	b29b      	uxth	r3, r3
 8006844:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	7b1b      	ldrb	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 8178 	bne.w	8006b40 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8084 	beq.w	8006962 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	4413      	add	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	011a      	lsls	r2, r3, #4
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b29b      	uxth	r3, r3
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	827b      	strh	r3, [r7, #18]
 800689c:	8a7b      	ldrh	r3, [r7, #18]
 800689e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01b      	beq.n	80068de <USB_ActivateEndpoint+0x17a>
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068bc:	823b      	strh	r3, [r7, #16]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	441a      	add	r2, r3
 80068c8:	8a3b      	ldrh	r3, [r7, #16]
 80068ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	78db      	ldrb	r3, [r3, #3]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d020      	beq.n	8006928 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068fc:	81bb      	strh	r3, [r7, #12]
 80068fe:	89bb      	ldrh	r3, [r7, #12]
 8006900:	f083 0320 	eor.w	r3, r3, #32
 8006904:	81bb      	strh	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	441a      	add	r2, r3
 8006910:	89bb      	ldrh	r3, [r7, #12]
 8006912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800691a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800691e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006922:	b29b      	uxth	r3, r3
 8006924:	8013      	strh	r3, [r2, #0]
 8006926:	e2d5      	b.n	8006ed4 <USB_ActivateEndpoint+0x770>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b2:	81fb      	strh	r3, [r7, #14]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	441a      	add	r2, r3
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]
 80069d4:	e2b8      	b.n	8006f48 <USB_ActivateEndpoint+0x770>
=======
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800693a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800693e:	81fb      	strh	r3, [r7, #14]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	89fb      	ldrh	r3, [r7, #14]
 800694c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695c:	b29b      	uxth	r3, r3
 800695e:	8013      	strh	r3, [r2, #0]
 8006960:	e2b8      	b.n	8006ed4 <USB_ActivateEndpoint+0x770>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< HEAD
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	4413      	add	r3, r2
 80069e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	011a      	lsls	r2, r3, #4
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	88db      	ldrh	r3, [r3, #6]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	4413      	add	r3, r2
 8006a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	011a      	lsls	r2, r3, #4
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	4413      	add	r3, r2
 8006a28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a44:	d91d      	bls.n	8006a82 <USB_ActivateEndpoint+0x2aa>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <USB_ActivateEndpoint+0x288>
 8006a5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e026      	b.n	8006ad0 <USB_ActivateEndpoint+0x2f8>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <USB_ActivateEndpoint+0x2c8>
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e017      	b.n	8006ad0 <USB_ActivateEndpoint+0x2f8>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <USB_ActivateEndpoint+0x2e2>
 8006ab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01b      	beq.n	8006b20 <USB_ActivateEndpoint+0x348>
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afe:	843b      	strh	r3, [r7, #32]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	8c3b      	ldrh	r3, [r7, #32]
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d124      	bne.n	8006b72 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3e:	83bb      	strh	r3, [r7, #28]
 8006b40:	8bbb      	ldrh	r3, [r7, #28]
 8006b42:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b46:	83bb      	strh	r3, [r7, #28]
 8006b48:	8bbb      	ldrh	r3, [r7, #28]
 8006b4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b4e:	83bb      	strh	r3, [r7, #28]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	8bbb      	ldrh	r3, [r7, #28]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]
 8006b70:	e1ea      	b.n	8006f48 <USB_ActivateEndpoint+0x770>
=======
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	633b      	str	r3, [r7, #48]	@ 0x30
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800696c:	b29b      	uxth	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	4413      	add	r3, r2
 8006974:	633b      	str	r3, [r7, #48]	@ 0x30
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	011a      	lsls	r2, r3, #4
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	4413      	add	r3, r2
 8006980:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	88db      	ldrh	r3, [r3, #6]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a6:	4413      	add	r3, r2
 80069a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	011a      	lsls	r2, r3, #4
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	4413      	add	r3, r2
 80069b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80069d0:	d91d      	bls.n	8006a0e <USB_ActivateEndpoint+0x2aa>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <USB_ActivateEndpoint+0x288>
 80069e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069e8:	3b01      	subs	r3, #1
 80069ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e026      	b.n	8006a5c <USB_ActivateEndpoint+0x2f8>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <USB_ActivateEndpoint+0x2c8>
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e017      	b.n	8006a5c <USB_ActivateEndpoint+0x2f8>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <USB_ActivateEndpoint+0x2e2>
 8006a40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a42:	3301      	adds	r3, #1
 8006a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	029b      	lsls	r3, r3, #10
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006a6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <USB_ActivateEndpoint+0x348>
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8a:	843b      	strh	r3, [r7, #32]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	8c3b      	ldrh	r3, [r7, #32]
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d124      	bne.n	8006afe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aca:	83bb      	strh	r3, [r7, #28]
 8006acc:	8bbb      	ldrh	r3, [r7, #28]
 8006ace:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ad2:	83bb      	strh	r3, [r7, #28]
 8006ad4:	8bbb      	ldrh	r3, [r7, #28]
 8006ad6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ada:	83bb      	strh	r3, [r7, #28]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	8bbb      	ldrh	r3, [r7, #28]
 8006ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	8013      	strh	r3, [r2, #0]
 8006afc:	e1ea      	b.n	8006ed4 <USB_ActivateEndpoint+0x770>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
<<<<<<< HEAD
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	83fb      	strh	r3, [r7, #30]
 8006b8a:	8bfb      	ldrh	r3, [r7, #30]
 8006b8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b90:	83fb      	strh	r3, [r7, #30]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	8bfb      	ldrh	r3, [r7, #30]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
 8006bb2:	e1c9      	b.n	8006f48 <USB_ActivateEndpoint+0x770>
=======
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b14:	83fb      	strh	r3, [r7, #30]
 8006b16:	8bfb      	ldrh	r3, [r7, #30]
 8006b18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b1c:	83fb      	strh	r3, [r7, #30]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	8bfb      	ldrh	r3, [r7, #30]
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
 8006b3e:	e1c9      	b.n	8006ed4 <USB_ActivateEndpoint+0x770>
>>>>>>> 2814753 (long press added)
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	78db      	ldrb	r3, [r3, #3]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d11e      	bne.n	8006bfa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	441a      	add	r2, r3
 8006be0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]
 8006bf8:	e01d      	b.n	8006c36 <USB_ActivateEndpoint+0x45e>
=======
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d11e      	bne.n	8006b86 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b78:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
 8006b84:	e01d      	b.n	8006bc2 <USB_ActivateEndpoint+0x45e>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
<<<<<<< HEAD
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c10:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]
=======
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
<<<<<<< HEAD
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c46:	4413      	add	r3, r2
 8006c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	011a      	lsls	r2, r3, #4
 8006c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	891b      	ldrh	r3, [r3, #8]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c7a:	4413      	add	r3, r2
 8006c7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	011a      	lsls	r2, r3, #4
 8006c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	895b      	ldrh	r3, [r3, #10]
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c9c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 8093 	bne.w	8006dce <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006cb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01b      	beq.n	8006cfc <USB_ActivateEndpoint+0x524>
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006d0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01b      	beq.n	8006d4c <USB_ActivateEndpoint+0x574>
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d62:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006d64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006d66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006d6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006d6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006daa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]
 8006dcc:	e0bc      	b.n	8006f48 <USB_ActivateEndpoint+0x770>
=======
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bd2:	4413      	add	r3, r2
 8006bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	011a      	lsls	r2, r3, #4
 8006bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	891b      	ldrh	r3, [r3, #8]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c06:	4413      	add	r3, r2
 8006c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	011a      	lsls	r2, r3, #4
 8006c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	895b      	ldrh	r3, [r3, #10]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c28:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8093 	bne.w	8006d5a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01b      	beq.n	8006c88 <USB_ActivateEndpoint+0x524>
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006c96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <USB_ActivateEndpoint+0x574>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cee:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006cf0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006cf2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006cf6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006cf8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006cfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006cfe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
 8006d58:	e0bc      	b.n	8006ed4 <USB_ActivateEndpoint+0x770>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
=======
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01d      	beq.n	8006db2 <USB_ActivateEndpoint+0x64e>
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01d      	beq.n	8006e0a <USB_ActivateEndpoint+0x6a6>
>>>>>>> 2814753 (long press added)
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
<<<<<<< HEAD
 8006dda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01d      	beq.n	8006e26 <USB_ActivateEndpoint+0x64e>
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e00:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006e36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01d      	beq.n	8006e7e <USB_ActivateEndpoint+0x6a6>
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e58:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	78db      	ldrb	r3, [r3, #3]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d024      	beq.n	8006ed0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e9c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006ea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006ea4:	f083 0320 	eor.w	r3, r3, #32
 8006ea8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]
 8006ece:	e01d      	b.n	8006f0c <USB_ActivateEndpoint+0x734>
=======
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	441a      	add	r2, r3
 8006df2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d024      	beq.n	8006e5c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006e30:	f083 0320 	eor.w	r3, r3, #32
 8006e34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	8013      	strh	r3, [r2, #0]
 8006e5a:	e01d      	b.n	8006e98 <USB_ActivateEndpoint+0x734>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ee6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	441a      	add	r2, r3
 8006ef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]
=======
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
<<<<<<< HEAD
 8006f48:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3774      	adds	r7, #116	@ 0x74
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop

08006f58 <USB_DeactivateEndpoint>:
=======
 8006ed4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3774      	adds	r7, #116	@ 0x74
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop

08006ee4 <USB_DeactivateEndpoint>:
>>>>>>> 2814753 (long press added)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8006f58:	b480      	push	{r7}
 8006f5a:	b08d      	sub	sp, #52	@ 0x34
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	7b1b      	ldrb	r3, [r3, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f040 808e 	bne.w	8007088 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d044      	beq.n	8006ffe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	81bb      	strh	r3, [r7, #12]
 8006f82:	89bb      	ldrh	r3, [r7, #12]
 8006f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01b      	beq.n	8006fc4 <USB_DeactivateEndpoint+0x6c>
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	817b      	strh	r3, [r7, #10]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fda:	813b      	strh	r3, [r7, #8]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
 8006ffc:	e192      	b.n	8007324 <USB_DeactivateEndpoint+0x3cc>
=======
 8006ee4:	b480      	push	{r7}
 8006ee6:	b08d      	sub	sp, #52	@ 0x34
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	7b1b      	ldrb	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 808e 	bne.w	8007014 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d044      	beq.n	8006f8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	81bb      	strh	r3, [r7, #12]
 8006f0e:	89bb      	ldrh	r3, [r7, #12]
 8006f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01b      	beq.n	8006f50 <USB_DeactivateEndpoint+0x6c>
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2e:	817b      	strh	r3, [r7, #10]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	897b      	ldrh	r3, [r7, #10]
 8006f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f66:	813b      	strh	r3, [r7, #8]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	893b      	ldrh	r3, [r7, #8]
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
 8006f88:	e192      	b.n	80072b0 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> 2814753 (long press added)
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	827b      	strh	r3, [r7, #18]
 800700c:	8a7b      	ldrh	r3, [r7, #18]
 800700e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01b      	beq.n	800704e <USB_DeactivateEndpoint+0xf6>
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	b29b      	uxth	r3, r3
 8007024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702c:	823b      	strh	r3, [r7, #16]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	441a      	add	r2, r3
 8007038:	8a3b      	ldrh	r3, [r7, #16]
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007064:	81fb      	strh	r3, [r7, #14]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800707e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007082:	b29b      	uxth	r3, r3
 8007084:	8013      	strh	r3, [r2, #0]
 8007086:	e14d      	b.n	8007324 <USB_DeactivateEndpoint+0x3cc>
=======
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	827b      	strh	r3, [r7, #18]
 8006f98:	8a7b      	ldrh	r3, [r7, #18]
 8006f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01b      	beq.n	8006fda <USB_DeactivateEndpoint+0xf6>
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb8:	823b      	strh	r3, [r7, #16]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	441a      	add	r2, r3
 8006fc4:	8a3b      	ldrh	r3, [r7, #16]
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff0:	81fb      	strh	r3, [r7, #14]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	441a      	add	r2, r3
 8006ffc:	89fb      	ldrh	r3, [r7, #14]
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]
 8007012:	e14d      	b.n	80072b0 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> 2814753 (long press added)
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
<<<<<<< HEAD
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 80a5 	bne.w	80071dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	843b      	strh	r3, [r7, #32]
 80070a0:	8c3b      	ldrh	r3, [r7, #32]
 80070a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01b      	beq.n	80070e2 <USB_DeactivateEndpoint+0x18a>
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c0:	83fb      	strh	r3, [r7, #30]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	8bfb      	ldrh	r3, [r7, #30]
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	83bb      	strh	r3, [r7, #28]
 80070f0:	8bbb      	ldrh	r3, [r7, #28]
 80070f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01b      	beq.n	8007132 <USB_DeactivateEndpoint+0x1da>
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800710c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007110:	837b      	strh	r3, [r7, #26]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	441a      	add	r2, r3
 800711c:	8b7b      	ldrh	r3, [r7, #26]
 800711e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800712e:	b29b      	uxth	r3, r3
 8007130:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007148:	833b      	strh	r3, [r7, #24]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	8b3b      	ldrh	r3, [r7, #24]
 8007156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800715a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800715e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007162:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007166:	b29b      	uxth	r3, r3
 8007168:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800717c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007180:	82fb      	strh	r3, [r7, #22]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	8afb      	ldrh	r3, [r7, #22]
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800719a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b8:	82bb      	strh	r3, [r7, #20]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	441a      	add	r2, r3
 80071c4:	8abb      	ldrh	r3, [r7, #20]
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]
 80071da:	e0a3      	b.n	8007324 <USB_DeactivateEndpoint+0x3cc>
=======
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 80a5 	bne.w	8007168 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	843b      	strh	r3, [r7, #32]
 800702c:	8c3b      	ldrh	r3, [r7, #32]
 800702e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01b      	beq.n	800706e <USB_DeactivateEndpoint+0x18a>
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704c:	83fb      	strh	r3, [r7, #30]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	8bfb      	ldrh	r3, [r7, #30]
 800705a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800705e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	b29b      	uxth	r3, r3
 800706c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	83bb      	strh	r3, [r7, #28]
 800707c:	8bbb      	ldrh	r3, [r7, #28]
 800707e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01b      	beq.n	80070be <USB_DeactivateEndpoint+0x1da>
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709c:	837b      	strh	r3, [r7, #26]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	441a      	add	r2, r3
 80070a8:	8b7b      	ldrh	r3, [r7, #26]
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d4:	833b      	strh	r3, [r7, #24]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	441a      	add	r2, r3
 80070e0:	8b3b      	ldrh	r3, [r7, #24]
 80070e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29b      	uxth	r3, r3
 8007104:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800710c:	82fb      	strh	r3, [r7, #22]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	441a      	add	r2, r3
 8007118:	8afb      	ldrh	r3, [r7, #22]
 800711a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800711e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800712a:	b29b      	uxth	r3, r3
 800712c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007144:	82bb      	strh	r3, [r7, #20]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	441a      	add	r2, r3
 8007150:	8abb      	ldrh	r3, [r7, #20]
 8007152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800715a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800715e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007162:	b29b      	uxth	r3, r3
 8007164:	8013      	strh	r3, [r2, #0]
 8007166:	e0a3      	b.n	80072b0 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80071ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80071ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01b      	beq.n	800722c <USB_DeactivateEndpoint+0x2d4>
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	441a      	add	r2, r3
 8007216:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800721c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800723a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800723c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <USB_DeactivateEndpoint+0x324>
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007274:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007302:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	441a      	add	r2, r3
 800730e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800731c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007320:	b29b      	uxth	r3, r3
 8007322:	8013      	strh	r3, [r2, #0]
=======
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007176:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d01b      	beq.n	80071b8 <USB_DeactivateEndpoint+0x2d4>
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007196:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80071c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01b      	beq.n	8007208 <USB_DeactivateEndpoint+0x324>
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	441a      	add	r2, r3
 80071f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007200:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007204:	b29b      	uxth	r3, r3
 8007206:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800721a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	441a      	add	r2, r3
 800722a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800722c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723c:	b29b      	uxth	r3, r3
 800723e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007256:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007274:	b29b      	uxth	r3, r3
 8007276:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	441a      	add	r2, r3
 800729a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800729c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< HEAD
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3734      	adds	r7, #52	@ 0x34
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <USB_EPStartXfer>:
=======
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3734      	adds	r7, #52	@ 0x34
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr

080072bc <USB_EPStartXfer>:
>>>>>>> 2814753 (long press added)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007330:	b580      	push	{r7, lr}
 8007332:	b0c2      	sub	sp, #264	@ 0x108
 8007334:	af00      	add	r7, sp, #0
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800733e:	6018      	str	r0, [r3, #0]
 8007340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007348:	6019      	str	r1, [r3, #0]
=======
 80072bc:	b580      	push	{r7, lr}
 80072be:	b0c2      	sub	sp, #264	@ 0x108
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ca:	6018      	str	r0, [r3, #0]
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	6019      	str	r1, [r3, #0]
>>>>>>> 2814753 (long press added)
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b01      	cmp	r3, #1
 8007358:	f040 86b7 	bne.w	80080ca <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800735c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007388:	e007      	b.n	800739a <USB_EPStartXfer+0x6a>
=======
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	f040 86b7 	bne.w	8008056 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	429a      	cmp	r2, r3
 8007302:	d908      	bls.n	8007316 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007314:	e007      	b.n	8007326 <USB_EPStartXfer+0x6a>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      len = ep->xfer_len;
<<<<<<< HEAD
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
=======
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
>>>>>>> 2814753 (long press added)
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	7b1b      	ldrb	r3, [r3, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d13a      	bne.n	8007420 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6959      	ldr	r1, [r3, #20]
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	88da      	ldrh	r2, [r3, #6]
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073d0:	6800      	ldr	r0, [r0, #0]
 80073d2:	f001 fc9c 	bl	8008d0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4413      	add	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	011a      	lsls	r2, r3, #4
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4413      	add	r3, r2
 800740c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	f000 be1f 	b.w	800805e <USB_EPStartXfer+0xd2e>
=======
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	7b1b      	ldrb	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d13a      	bne.n	80073ac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6959      	ldr	r1, [r3, #20]
 8007342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	88da      	ldrh	r2, [r3, #6]
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	b29b      	uxth	r3, r3
 8007354:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007358:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f001 fc9c 	bl	8008c9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	011a      	lsls	r2, r3, #4
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	f000 be1f 	b.w	8007fea <USB_EPStartXfer+0xd2e>
>>>>>>> 2814753 (long press added)
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	78db      	ldrb	r3, [r3, #3]
 800742c:	2b02      	cmp	r3, #2
 800742e:	f040 8462 	bne.w	8007cf6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	429a      	cmp	r2, r3
 800744c:	f240 83df 	bls.w	8007c0e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007476:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074a0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80074a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 81c7 	beq.w	8007880 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d177      	bne.n	80075fe <USB_EPStartXfer+0x2ce>
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007528:	b29b      	uxth	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	4413      	add	r3, r2
 8007530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	011a      	lsls	r2, r3, #4
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	4413      	add	r3, r2
 8007544:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007554:	b29a      	uxth	r2, r3
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007560:	d921      	bls.n	80075a6 <USB_EPStartXfer+0x276>
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <USB_EPStartXfer+0x252>
 8007578:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800757c:	3b01      	subs	r3, #1
 800757e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800758c:	b29b      	uxth	r3, r3
 800758e:	029b      	lsls	r3, r3, #10
 8007590:	b29b      	uxth	r3, r3
 8007592:	4313      	orrs	r3, r2
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e050      	b.n	8007648 <USB_EPStartXfer+0x318>
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <USB_EPStartXfer+0x294>
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075bc:	b29a      	uxth	r2, r3
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	e041      	b.n	8007648 <USB_EPStartXfer+0x318>
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	085b      	lsrs	r3, r3, #1
 80075ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80075ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <USB_EPStartXfer+0x2b4>
 80075da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80075de:	3301      	adds	r3, #1
 80075e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	029b      	lsls	r3, r3, #10
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e024      	b.n	8007648 <USB_EPStartXfer+0x318>
 80075fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d11c      	bne.n	8007648 <USB_EPStartXfer+0x318>
 800760e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800761c:	b29b      	uxth	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	4413      	add	r3, r2
 8007624:	633b      	str	r3, [r7, #48]	@ 0x30
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	011a      	lsls	r2, r3, #4
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	4413      	add	r3, r2
 8007638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800763c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	b29a      	uxth	r2, r3
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	895b      	ldrh	r3, [r3, #10]
 8007654:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6959      	ldr	r1, [r3, #20]
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007668:	b29b      	uxth	r3, r3
 800766a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800766e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007672:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007676:	6800      	ldr	r0, [r0, #0]
 8007678:	f001 fb49 	bl	8008d0e <USB_WritePMA>
            ep->xfer_buff += len;
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768c:	441a      	add	r2, r3
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90f      	bls.n	80076d6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	621a      	str	r2, [r3, #32]
 80076d4:	e00e      	b.n	80076f4 <USB_EPStartXfer+0x3c4>
=======
 80073ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	78db      	ldrb	r3, [r3, #3]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f040 8462 	bne.w	8007c82 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80073be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	f240 83df 	bls.w	8007b9a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80073dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007402:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007434:	b29b      	uxth	r3, r3
 8007436:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	1ad2      	subs	r2, r2, r3
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 81c7 	beq.w	800780c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	633b      	str	r3, [r7, #48]	@ 0x30
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d177      	bne.n	800758a <USB_EPStartXfer+0x2ce>
 800749a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	4413      	add	r3, r2
 80074bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	011a      	lsls	r2, r3, #4
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	4413      	add	r3, r2
 80074d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80074ec:	d921      	bls.n	8007532 <USB_EPStartXfer+0x276>
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <USB_EPStartXfer+0x252>
 8007504:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007508:	3b01      	subs	r3, #1
 800750a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29a      	uxth	r2, r3
 8007514:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007518:	b29b      	uxth	r3, r3
 800751a:	029b      	lsls	r3, r3, #10
 800751c:	b29b      	uxth	r3, r3
 800751e:	4313      	orrs	r3, r2
 8007520:	b29b      	uxth	r3, r3
 8007522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752a:	b29a      	uxth	r2, r3
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	e050      	b.n	80075d4 <USB_EPStartXfer+0x318>
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <USB_EPStartXfer+0x294>
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007548:	b29a      	uxth	r2, r3
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	e041      	b.n	80075d4 <USB_EPStartXfer+0x318>
 8007550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <USB_EPStartXfer+0x2b4>
 8007566:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800756a:	3301      	adds	r3, #1
 800756c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800757a:	b29b      	uxth	r3, r3
 800757c:	029b      	lsls	r3, r3, #10
 800757e:	b29b      	uxth	r3, r3
 8007580:	4313      	orrs	r3, r2
 8007582:	b29a      	uxth	r2, r3
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	e024      	b.n	80075d4 <USB_EPStartXfer+0x318>
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d11c      	bne.n	80075d4 <USB_EPStartXfer+0x318>
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	4413      	add	r3, r2
 80075b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	011a      	lsls	r2, r3, #4
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	895b      	ldrh	r3, [r3, #10]
 80075e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6959      	ldr	r1, [r3, #20]
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	f001 fb49 	bl	8008c9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	695a      	ldr	r2, [r3, #20]
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	441a      	add	r2, r3
 800761a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a1a      	ldr	r2, [r3, #32]
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	d90f      	bls.n	8007662 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007652:	1ad2      	subs	r2, r2, r3
 8007654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	621a      	str	r2, [r3, #32]
 8007660:	e00e      	b.n	8007680 <USB_EPStartXfer+0x3c4>
>>>>>>> 2814753 (long press added)
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 80076d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	621a      	str	r2, [r3, #32]
=======
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2200      	movs	r2, #0
 800767e:	621a      	str	r2, [r3, #32]
>>>>>>> 2814753 (long press added)
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d177      	bne.n	80077f4 <USB_EPStartXfer+0x4c4>
 8007704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	61bb      	str	r3, [r7, #24]
 8007710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	4413      	add	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	011a      	lsls	r2, r3, #4
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	4413      	add	r3, r2
 800773a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774a:	b29a      	uxth	r2, r3
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	2b3e      	cmp	r3, #62	@ 0x3e
 8007756:	d921      	bls.n	800779c <USB_EPStartXfer+0x46c>
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <USB_EPStartXfer+0x448>
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007772:	3b01      	subs	r3, #1
 8007774:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007782:	b29b      	uxth	r3, r3
 8007784:	029b      	lsls	r3, r3, #10
 8007786:	b29b      	uxth	r3, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	b29b      	uxth	r3, r3
 800778c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007794:	b29a      	uxth	r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e056      	b.n	800784a <USB_EPStartXfer+0x51a>
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <USB_EPStartXfer+0x48a>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	e047      	b.n	800784a <USB_EPStartXfer+0x51a>
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <USB_EPStartXfer+0x4aa>
 80077d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077d4:	3301      	adds	r3, #1
 80077d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	029b      	lsls	r3, r3, #10
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e02a      	b.n	800784a <USB_EPStartXfer+0x51a>
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d122      	bne.n	800784a <USB_EPStartXfer+0x51a>
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	623b      	str	r3, [r7, #32]
 8007810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	4413      	add	r3, r2
 8007826:	623b      	str	r3, [r7, #32]
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	011a      	lsls	r2, r3, #4
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	4413      	add	r3, r2
 800783a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007844:	b29a      	uxth	r2, r3
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800784a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	891b      	ldrh	r3, [r3, #8]
 8007856:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800785a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6959      	ldr	r1, [r3, #20]
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786a:	b29b      	uxth	r3, r3
 800786c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007870:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007874:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007878:	6800      	ldr	r0, [r0, #0]
 800787a:	f001 fa48 	bl	8008d0e <USB_WritePMA>
 800787e:	e3ee      	b.n	800805e <USB_EPStartXfer+0xd2e>
=======
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d177      	bne.n	8007780 <USB_EPStartXfer+0x4c4>
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4413      	add	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	4413      	add	r3, r2
 80076c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80076e2:	d921      	bls.n	8007728 <USB_EPStartXfer+0x46c>
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <USB_EPStartXfer+0x448>
 80076fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fe:	3b01      	subs	r3, #1
 8007700:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800770e:	b29b      	uxth	r3, r3
 8007710:	029b      	lsls	r3, r3, #10
 8007712:	b29b      	uxth	r3, r3
 8007714:	4313      	orrs	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e056      	b.n	80077d6 <USB_EPStartXfer+0x51a>
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <USB_EPStartXfer+0x48a>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773e:	b29a      	uxth	r2, r3
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e047      	b.n	80077d6 <USB_EPStartXfer+0x51a>
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <USB_EPStartXfer+0x4aa>
 800775c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007760:	3301      	adds	r3, #1
 8007762:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29a      	uxth	r2, r3
 800776c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007770:	b29b      	uxth	r3, r3
 8007772:	029b      	lsls	r3, r3, #10
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e02a      	b.n	80077d6 <USB_EPStartXfer+0x51a>
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d122      	bne.n	80077d6 <USB_EPStartXfer+0x51a>
 8007790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007794:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	4413      	add	r3, r2
 80077b2:	623b      	str	r3, [r7, #32]
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	011a      	lsls	r2, r3, #4
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	4413      	add	r3, r2
 80077c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	891b      	ldrh	r3, [r3, #8]
 80077e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6959      	ldr	r1, [r3, #20]
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007800:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007804:	6800      	ldr	r0, [r0, #0]
 8007806:	f001 fa48 	bl	8008c9a <USB_WritePMA>
 800780a:	e3ee      	b.n	8007fea <USB_EPStartXfer+0xd2e>
>>>>>>> 2814753 (long press added)
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d177      	bne.n	8007980 <USB_EPStartXfer+0x650>
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b0:	4413      	add	r3, r2
 80078b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	011a      	lsls	r2, r3, #4
 80078c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078c4:	4413      	add	r3, r2
 80078c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80078cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80078e2:	d921      	bls.n	8007928 <USB_EPStartXfer+0x5f8>
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <USB_EPStartXfer+0x5d4>
 80078fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078fe:	3b01      	subs	r3, #1
 8007900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29a      	uxth	r2, r3
 800790a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800790e:	b29b      	uxth	r3, r3
 8007910:	029b      	lsls	r3, r3, #10
 8007912:	b29b      	uxth	r3, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	e056      	b.n	80079d6 <USB_EPStartXfer+0x6a6>
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <USB_EPStartXfer+0x616>
 8007930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793e:	b29a      	uxth	r2, r3
 8007940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	e047      	b.n	80079d6 <USB_EPStartXfer+0x6a6>
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <USB_EPStartXfer+0x636>
 800795c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007960:	3301      	adds	r3, #1
 8007962:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007970:	b29b      	uxth	r3, r3
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	b29b      	uxth	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	b29a      	uxth	r2, r3
 800797a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	e02a      	b.n	80079d6 <USB_EPStartXfer+0x6a6>
 8007980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d122      	bne.n	80079d6 <USB_EPStartXfer+0x6a6>
 8007990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	653b      	str	r3, [r7, #80]	@ 0x50
 800799c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b0:	4413      	add	r3, r2
 80079b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	011a      	lsls	r2, r3, #4
 80079c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80079d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	891b      	ldrh	r3, [r3, #8]
 80079e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6959      	ldr	r1, [r3, #20]
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a04:	6800      	ldr	r0, [r0, #0]
 8007a06:	f001 f982 	bl	8008d0e <USB_WritePMA>
            ep->xfer_buff += len;
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695a      	ldr	r2, [r3, #20]
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1a:	441a      	add	r2, r3
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d90f      	bls.n	8007a64 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a54:	1ad2      	subs	r2, r2, r3
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	621a      	str	r2, [r3, #32]
 8007a62:	e00e      	b.n	8007a82 <USB_EPStartXfer+0x752>
=======
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d177      	bne.n	800790c <USB_EPStartXfer+0x650>
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800783c:	4413      	add	r3, r2
 800783e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	011a      	lsls	r2, r3, #4
 800784e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007850:	4413      	add	r3, r2
 8007852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007856:	647b      	str	r3, [r7, #68]	@ 0x44
 8007858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007862:	b29a      	uxth	r2, r3
 8007864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	2b3e      	cmp	r3, #62	@ 0x3e
 800786e:	d921      	bls.n	80078b4 <USB_EPStartXfer+0x5f8>
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	f003 031f 	and.w	r3, r3, #31
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <USB_EPStartXfer+0x5d4>
 8007886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800788a:	3b01      	subs	r3, #1
 800788c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4313      	orrs	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	e056      	b.n	8007962 <USB_EPStartXfer+0x6a6>
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <USB_EPStartXfer+0x616>
 80078bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	e047      	b.n	8007962 <USB_EPStartXfer+0x6a6>
 80078d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <USB_EPStartXfer+0x636>
 80078e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078ec:	3301      	adds	r3, #1
 80078ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	029b      	lsls	r3, r3, #10
 8007900:	b29b      	uxth	r3, r3
 8007902:	4313      	orrs	r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e02a      	b.n	8007962 <USB_EPStartXfer+0x6a6>
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d122      	bne.n	8007962 <USB_EPStartXfer+0x6a6>
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	653b      	str	r3, [r7, #80]	@ 0x50
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800793c:	4413      	add	r3, r2
 800793e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	011a      	lsls	r2, r3, #4
 800794e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007950:	4413      	add	r3, r2
 8007952:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795c:	b29a      	uxth	r2, r3
 800795e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	891b      	ldrh	r3, [r3, #8]
 800796e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6959      	ldr	r1, [r3, #20]
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007982:	b29b      	uxth	r3, r3
 8007984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007988:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800798c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007990:	6800      	ldr	r0, [r0, #0]
 8007992:	f001 f982 	bl	8008c9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a6:	441a      	add	r2, r3
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6a1a      	ldr	r2, [r3, #32]
 80079c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d90f      	bls.n	80079f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	1ad2      	subs	r2, r2, r3
 80079e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	621a      	str	r2, [r3, #32]
 80079ee:	e00e      	b.n	8007a0e <USB_EPStartXfer+0x752>
>>>>>>> 2814753 (long press added)
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	621a      	str	r2, [r3, #32]
=======
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	621a      	str	r2, [r3, #32]
>>>>>>> 2814753 (long press added)
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d177      	bne.n	8007b8e <USB_EPStartXfer+0x85e>
 8007a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	4413      	add	r3, r2
 8007ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	011a      	lsls	r2, r3, #4
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8007af0:	d921      	bls.n	8007b36 <USB_EPStartXfer+0x806>
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <USB_EPStartXfer+0x7e2>
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	029b      	lsls	r3, r3, #10
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	4313      	orrs	r3, r2
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	e050      	b.n	8007bd8 <USB_EPStartXfer+0x8a8>
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <USB_EPStartXfer+0x824>
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e041      	b.n	8007bd8 <USB_EPStartXfer+0x8a8>
 8007b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <USB_EPStartXfer+0x844>
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	3301      	adds	r3, #1
 8007b70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	029b      	lsls	r3, r3, #10
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4313      	orrs	r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	e024      	b.n	8007bd8 <USB_EPStartXfer+0x8a8>
 8007b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d11c      	bne.n	8007bd8 <USB_EPStartXfer+0x8a8>
 8007b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb2:	4413      	add	r3, r2
 8007bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	011a      	lsls	r2, r3, #4
 8007bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	895b      	ldrh	r3, [r3, #10]
 8007be4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6959      	ldr	r1, [r3, #20]
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bfe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	f001 f881 	bl	8008d0e <USB_WritePMA>
 8007c0c:	e227      	b.n	800805e <USB_EPStartXfer+0xd2e>
=======
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d177      	bne.n	8007b1a <USB_EPStartXfer+0x85e>
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4a:	4413      	add	r3, r2
 8007a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	011a      	lsls	r2, r3, #4
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5e:	4413      	add	r3, r2
 8007a60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a7c:	d921      	bls.n	8007ac2 <USB_EPStartXfer+0x806>
 8007a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <USB_EPStartXfer+0x7e2>
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e050      	b.n	8007b64 <USB_EPStartXfer+0x8a8>
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <USB_EPStartXfer+0x824>
 8007aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e041      	b.n	8007b64 <USB_EPStartXfer+0x8a8>
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <USB_EPStartXfer+0x844>
 8007af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afa:	3301      	adds	r3, #1
 8007afc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	029b      	lsls	r3, r3, #10
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	4313      	orrs	r3, r2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e024      	b.n	8007b64 <USB_EPStartXfer+0x8a8>
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d11c      	bne.n	8007b64 <USB_EPStartXfer+0x8a8>
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3e:	4413      	add	r3, r2
 8007b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	011a      	lsls	r2, r3, #4
 8007b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	895b      	ldrh	r3, [r3, #10]
 8007b70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6959      	ldr	r1, [r3, #20]
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b92:	6800      	ldr	r0, [r0, #0]
 8007b94:	f001 f881 	bl	8008c9a <USB_WritePMA>
 8007b98:	e227      	b.n	8007fea <USB_EPStartXfer+0xd2e>
>>>>>>> 2814753 (long press added)
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 8007c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c44:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c9a:	4413      	add	r3, r2
 8007c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	011a      	lsls	r2, r3, #4
 8007cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cae:	4413      	add	r3, r2
 8007cb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	891b      	ldrh	r3, [r3, #8]
 8007ccc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6959      	ldr	r1, [r3, #20]
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ce6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007cea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007cee:	6800      	ldr	r0, [r0, #0]
 8007cf0:	f001 f80d 	bl	8008d0e <USB_WritePMA>
 8007cf4:	e1b3      	b.n	800805e <USB_EPStartXfer+0xd2e>
=======
 8007b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	441a      	add	r2, r3
 8007bee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c26:	4413      	add	r3, r2
 8007c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	011a      	lsls	r2, r3, #4
 8007c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	891b      	ldrh	r3, [r3, #8]
 8007c58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6959      	ldr	r1, [r3, #20]
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	f001 f80d 	bl	8008c9a <USB_WritePMA>
 8007c80:	e1b3      	b.n	8007fea <USB_EPStartXfer+0xd2e>
>>>>>>> 2814753 (long press added)
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
<<<<<<< HEAD
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1a      	ldr	r2, [r3, #32]
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80c6 	beq.w	8007ec8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d177      	bne.n	8007e48 <USB_EPStartXfer+0xb18>
 8007d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d78:	4413      	add	r3, r2
 8007d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	011a      	lsls	r2, r3, #4
 8007d8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d92:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007daa:	d921      	bls.n	8007df0 <USB_EPStartXfer+0xac0>
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dba:	f003 031f 	and.w	r3, r3, #31
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <USB_EPStartXfer+0xa9c>
 8007dc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e050      	b.n	8007e92 <USB_EPStartXfer+0xb62>
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <USB_EPStartXfer+0xade>
 8007df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	e041      	b.n	8007e92 <USB_EPStartXfer+0xb62>
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <USB_EPStartXfer+0xafe>
 8007e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	029b      	lsls	r3, r3, #10
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	e024      	b.n	8007e92 <USB_EPStartXfer+0xb62>
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d11c      	bne.n	8007e92 <USB_EPStartXfer+0xb62>
 8007e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e6c:	4413      	add	r3, r2
 8007e6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	011a      	lsls	r2, r3, #4
 8007e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e80:	4413      	add	r3, r2
 8007e82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	895b      	ldrh	r3, [r3, #10]
 8007e9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6959      	ldr	r1, [r3, #20]
 8007eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007eb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ebc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ec0:	6800      	ldr	r0, [r0, #0]
 8007ec2:	f000 ff24 	bl	8008d0e <USB_WritePMA>
 8007ec6:	e0ca      	b.n	800805e <USB_EPStartXfer+0xd2e>
=======
 8007c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6a1a      	ldr	r2, [r3, #32]
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c92:	1ad2      	subs	r2, r2, r3
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 80c6 	beq.w	8007e54 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d177      	bne.n	8007dd4 <USB_EPStartXfer+0xb18>
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d04:	4413      	add	r3, r2
 8007d06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	011a      	lsls	r2, r3, #4
 8007d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d18:	4413      	add	r3, r2
 8007d1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d36:	d921      	bls.n	8007d7c <USB_EPStartXfer+0xac0>
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <USB_EPStartXfer+0xa9c>
 8007d4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d52:	3b01      	subs	r3, #1
 8007d54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e050      	b.n	8007e1e <USB_EPStartXfer+0xb62>
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <USB_EPStartXfer+0xade>
 8007d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d96:	801a      	strh	r2, [r3, #0]
 8007d98:	e041      	b.n	8007e1e <USB_EPStartXfer+0xb62>
 8007d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <USB_EPStartXfer+0xafe>
 8007db0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	e024      	b.n	8007e1e <USB_EPStartXfer+0xb62>
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d11c      	bne.n	8007e1e <USB_EPStartXfer+0xb62>
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007df8:	4413      	add	r3, r2
 8007dfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	011a      	lsls	r2, r3, #4
 8007e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	895b      	ldrh	r3, [r3, #10]
 8007e2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6959      	ldr	r1, [r3, #20]
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f000 ff24 	bl	8008c9a <USB_WritePMA>
 8007e52:	e0ca      	b.n	8007fea <USB_EPStartXfer+0xd2e>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d177      	bne.n	8007fc8 <USB_EPStartXfer+0xc98>
 8007ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ef8:	4413      	add	r3, r2
 8007efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	011a      	lsls	r2, r3, #4
 8007f0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f2a:	d921      	bls.n	8007f70 <USB_EPStartXfer+0xc40>
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <USB_EPStartXfer+0xc1c>
 8007f42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007f46:	3b01      	subs	r3, #1
 8007f48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	e05c      	b.n	800802a <USB_EPStartXfer+0xcfa>
 8007f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <USB_EPStartXfer+0xc5e>
 8007f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	e04d      	b.n	800802a <USB_EPStartXfer+0xcfa>
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f92:	085b      	lsrs	r3, r3, #1
 8007f94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <USB_EPStartXfer+0xc7e>
 8007fa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	029b      	lsls	r3, r3, #10
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	e030      	b.n	800802a <USB_EPStartXfer+0xcfa>
 8007fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d128      	bne.n	800802a <USB_EPStartXfer+0xcfa>
 8007fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	011a      	lsls	r2, r3, #4
 8008010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008014:	4413      	add	r3, r2
 8008016:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800801a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800801e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008022:	b29a      	uxth	r2, r3
 8008024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008028:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800802a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	891b      	ldrh	r3, [r3, #8]
 8008036:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6959      	ldr	r1, [r3, #20]
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	b29b      	uxth	r3, r3
 800804c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008050:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008054:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008058:	6800      	ldr	r0, [r0, #0]
 800805a:	f000 fe58 	bl	8008d0e <USB_WritePMA>
=======
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d177      	bne.n	8007f54 <USB_EPStartXfer+0xc98>
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e84:	4413      	add	r3, r2
 8007e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	011a      	lsls	r2, r3, #4
 8007e96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eb6:	d921      	bls.n	8007efc <USB_EPStartXfer+0xc40>
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <USB_EPStartXfer+0xc1c>
 8007ece:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	029b      	lsls	r3, r3, #10
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	e05c      	b.n	8007fb6 <USB_EPStartXfer+0xcfa>
 8007efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <USB_EPStartXfer+0xc5e>
 8007f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	e04d      	b.n	8007fb6 <USB_EPStartXfer+0xcfa>
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <USB_EPStartXfer+0xc7e>
 8007f30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007f34:	3301      	adds	r3, #1
 8007f36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	029b      	lsls	r3, r3, #10
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f50:	801a      	strh	r2, [r3, #0]
 8007f52:	e030      	b.n	8007fb6 <USB_EPStartXfer+0xcfa>
 8007f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d128      	bne.n	8007fb6 <USB_EPStartXfer+0xcfa>
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f88:	4413      	add	r3, r2
 8007f8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	011a      	lsls	r2, r3, #4
 8007f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	891b      	ldrh	r3, [r3, #8]
 8007fc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6959      	ldr	r1, [r3, #20]
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007fdc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007fe0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fe4:	6800      	ldr	r0, [r0, #0]
 8007fe6:	f000 fe58 	bl	8008c9a <USB_WritePMA>
>>>>>>> 2814753 (long press added)
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 800805e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008084:	817b      	strh	r3, [r7, #10]
 8008086:	897b      	ldrh	r3, [r7, #10]
 8008088:	f083 0310 	eor.w	r3, r3, #16
 800808c:	817b      	strh	r3, [r7, #10]
 800808e:	897b      	ldrh	r3, [r7, #10]
 8008090:	f083 0320 	eor.w	r3, r3, #32
 8008094:	817b      	strh	r3, [r7, #10]
 8008096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	897b      	ldrh	r3, [r7, #10]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]
 80080c6:	f000 bcde 	b.w	8008a86 <USB_EPStartXfer+0x1756>
=======
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800800c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008010:	817b      	strh	r3, [r7, #10]
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	f083 0310 	eor.w	r3, r3, #16
 8008018:	817b      	strh	r3, [r7, #10]
 800801a:	897b      	ldrh	r3, [r7, #10]
 800801c:	f083 0320 	eor.w	r3, r3, #32
 8008020:	817b      	strh	r3, [r7, #10]
 8008022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	441a      	add	r2, r3
 800803c:	897b      	ldrh	r3, [r7, #10]
 800803e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800804a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800804e:	b29b      	uxth	r3, r3
 8008050:	8013      	strh	r3, [r2, #0]
 8008052:	f000 bcde 	b.w	8008a12 <USB_EPStartXfer+0x1756>
>>>>>>> 2814753 (long press added)
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	7b1b      	ldrb	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f040 80bb 	bne.w	8008252 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80080dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d917      	bls.n	8008128 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80080f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008118:	1ad2      	subs	r2, r2, r3
 800811a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	619a      	str	r2, [r3, #24]
 8008126:	e00e      	b.n	8008146 <USB_EPStartXfer+0xe16>
=======
 8008056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	7b1b      	ldrb	r3, [r3, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f040 80bb 	bne.w	80081de <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	429a      	cmp	r2, r3
 8008082:	d917      	bls.n	80080b4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a4:	1ad2      	subs	r2, r2, r3
 80080a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	619a      	str	r2, [r3, #24]
 80080b2:	e00e      	b.n	80080d2 <USB_EPStartXfer+0xe16>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        len = ep->xfer_len;
<<<<<<< HEAD
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008162:	b29b      	uxth	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800816a:	4413      	add	r3, r2
 800816c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	011a      	lsls	r2, r3, #4
 800817e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008182:	4413      	add	r3, r2
 8008184:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800818c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008198:	b29a      	uxth	r2, r3
 800819a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80081a6:	d924      	bls.n	80081f2 <USB_EPStartXfer+0xec2>
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	095b      	lsrs	r3, r3, #5
 80081ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <USB_EPStartXfer+0xe98>
 80081be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80081c2:	3b01      	subs	r3, #1
 80081c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	029b      	lsls	r3, r3, #10
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b29b      	uxth	r3, r3
 80081de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	f000 bc10 	b.w	8008a12 <USB_EPStartXfer+0x16e2>
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10c      	bne.n	8008214 <USB_EPStartXfer+0xee4>
 80081fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e3fe      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <USB_EPStartXfer+0xf04>
 800822a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800822e:	3301      	adds	r3, #1
 8008230:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29a      	uxth	r2, r3
 800823c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008240:	b29b      	uxth	r3, r3
 8008242:	029b      	lsls	r3, r3, #10
 8008244:	b29b      	uxth	r3, r3
 8008246:	4313      	orrs	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	e3df      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
=======
 80080b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80080c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80080d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080f6:	4413      	add	r3, r2
 80080f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	011a      	lsls	r2, r3, #4
 800810a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800810e:	4413      	add	r3, r2
 8008110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008130:	2b3e      	cmp	r3, #62	@ 0x3e
 8008132:	d924      	bls.n	800817e <USB_EPStartXfer+0xec2>
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800813e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	2b00      	cmp	r3, #0
 8008148:	d104      	bne.n	8008154 <USB_EPStartXfer+0xe98>
 800814a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800814e:	3b01      	subs	r3, #1
 8008150:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008160:	b29b      	uxth	r3, r3
 8008162:	029b      	lsls	r3, r3, #10
 8008164:	b29b      	uxth	r3, r3
 8008166:	4313      	orrs	r3, r2
 8008168:	b29b      	uxth	r3, r3
 800816a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008172:	b29a      	uxth	r2, r3
 8008174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	f000 bc10 	b.w	800899e <USB_EPStartXfer+0x16e2>
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10c      	bne.n	80081a0 <USB_EPStartXfer+0xee4>
 8008186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008196:	b29a      	uxth	r2, r3
 8008198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800819c:	801a      	strh	r2, [r3, #0]
 800819e:	e3fe      	b.n	800899e <USB_EPStartXfer+0x16e2>
 80081a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a4:	085b      	lsrs	r3, r3, #1
 80081a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <USB_EPStartXfer+0xf04>
 80081b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80081ba:	3301      	adds	r3, #1
 80081bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	029b      	lsls	r3, r3, #10
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	e3df      	b.n	800899e <USB_EPStartXfer+0x16e2>
>>>>>>> 2814753 (long press added)
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	78db      	ldrb	r3, [r3, #3]
 800825e:	2b02      	cmp	r3, #2
 8008260:	f040 8218 	bne.w	8008694 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 809d 	bne.w	80083b0 <USB_EPStartXfer+0x1080>
 8008276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008292:	b29b      	uxth	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800829a:	4413      	add	r3, r2
 800829c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	011a      	lsls	r2, r3, #4
 80082ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082b2:	4413      	add	r3, r2
 80082b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80082de:	d92b      	bls.n	8008338 <USB_EPStartXfer+0x1008>
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <USB_EPStartXfer+0xfe0>
 8008306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800830a:	3b01      	subs	r3, #1
 800830c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29a      	uxth	r2, r3
 8008318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831c:	b29b      	uxth	r3, r3
 800831e:	029b      	lsls	r3, r3, #10
 8008320:	b29b      	uxth	r3, r3
 8008322:	4313      	orrs	r3, r2
 8008324:	b29b      	uxth	r3, r3
 8008326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800832a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832e:	b29a      	uxth	r2, r3
 8008330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	e070      	b.n	800841a <USB_EPStartXfer+0x10ea>
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10c      	bne.n	8008362 <USB_EPStartXfer+0x1032>
 8008348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008358:	b29a      	uxth	r2, r3
 800835a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800835e:	801a      	strh	r2, [r3, #0]
 8008360:	e05b      	b.n	800841a <USB_EPStartXfer+0x10ea>
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <USB_EPStartXfer+0x1062>
 8008388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800838c:	3301      	adds	r3, #1
 800838e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800839e:	b29b      	uxth	r3, r3
 80083a0:	029b      	lsls	r3, r3, #10
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e034      	b.n	800841a <USB_EPStartXfer+0x10ea>
 80083b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d12c      	bne.n	800841a <USB_EPStartXfer+0x10ea>
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083e4:	4413      	add	r3, r2
 80083e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	011a      	lsls	r2, r3, #4
 80083f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	b29a      	uxth	r2, r3
 8008414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 809d 	bne.w	8008574 <USB_EPStartXfer+0x1244>
 800843a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800845e:	4413      	add	r3, r2
 8008460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	011a      	lsls	r2, r3, #4
 8008472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008476:	4413      	add	r3, r2
 8008478:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800847c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800848c:	b29a      	uxth	r2, r3
 800848e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80084a2:	d92b      	bls.n	80084fc <USB_EPStartXfer+0x11cc>
 80084a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f003 031f 	and.w	r3, r3, #31
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d104      	bne.n	80084d4 <USB_EPStartXfer+0x11a4>
 80084ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ce:	3b01      	subs	r3, #1
 80084d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	e069      	b.n	80085d0 <USB_EPStartXfer+0x12a0>
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <USB_EPStartXfer+0x11f6>
 800850c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e054      	b.n	80085d0 <USB_EPStartXfer+0x12a0>
 8008526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <USB_EPStartXfer+0x1226>
 800854c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008550:	3301      	adds	r3, #1
 8008552:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008556:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008562:	b29b      	uxth	r3, r3
 8008564:	029b      	lsls	r3, r3, #10
 8008566:	b29b      	uxth	r3, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	b29a      	uxth	r2, r3
 800856c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	e02d      	b.n	80085d0 <USB_EPStartXfer+0x12a0>
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d125      	bne.n	80085d0 <USB_EPStartXfer+0x12a0>
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008592:	b29b      	uxth	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800859a:	4413      	add	r3, r2
 800859c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	011a      	lsls	r2, r3, #4
 80085ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80085b2:	4413      	add	r3, r2
 80085b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80085b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085ce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80085d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8218 	beq.w	8008a12 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80085e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008602:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <USB_EPStartXfer+0x12ea>
 800860e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10d      	bne.n	8008636 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800861a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800861e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008622:	2b00      	cmp	r3, #0
 8008624:	f040 81f5 	bne.w	8008a12 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008628:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800862c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 81ee 	bne.w	8008a12 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800865c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800867e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800868a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800868e:	b29b      	uxth	r3, r3
 8008690:	8013      	strh	r3, [r2, #0]
 8008692:	e1be      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
=======
 80081de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	78db      	ldrb	r3, [r3, #3]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	f040 8218 	bne.w	8008620 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80081f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 809d 	bne.w	800833c <USB_EPStartXfer+0x1080>
 8008202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008226:	4413      	add	r3, r2
 8008228:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800822c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	011a      	lsls	r2, r3, #4
 800823a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800823e:	4413      	add	r3, r2
 8008240:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b3e      	cmp	r3, #62	@ 0x3e
 800826a:	d92b      	bls.n	80082c4 <USB_EPStartXfer+0x1008>
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800827e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 031f 	and.w	r3, r3, #31
 800828e:	2b00      	cmp	r3, #0
 8008290:	d104      	bne.n	800829c <USB_EPStartXfer+0xfe0>
 8008292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008296:	3b01      	subs	r3, #1
 8008298:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800829c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	029b      	lsls	r3, r3, #10
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	e070      	b.n	80083a6 <USB_EPStartXfer+0x10ea>
 80082c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10c      	bne.n	80082ee <USB_EPStartXfer+0x1032>
 80082d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	e05b      	b.n	80083a6 <USB_EPStartXfer+0x10ea>
 80082ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <USB_EPStartXfer+0x1062>
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008318:	3301      	adds	r3, #1
 800831a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800831e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	b29a      	uxth	r2, r3
 8008326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800832a:	b29b      	uxth	r3, r3
 800832c:	029b      	lsls	r3, r3, #10
 800832e:	b29b      	uxth	r3, r3
 8008330:	4313      	orrs	r3, r2
 8008332:	b29a      	uxth	r2, r3
 8008334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008338:	801a      	strh	r2, [r3, #0]
 800833a:	e034      	b.n	80083a6 <USB_EPStartXfer+0x10ea>
 800833c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d12c      	bne.n	80083a6 <USB_EPStartXfer+0x10ea>
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800835a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008368:	b29b      	uxth	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008370:	4413      	add	r3, r2
 8008372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	011a      	lsls	r2, r3, #4
 8008384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008388:	4413      	add	r3, r2
 800838a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800838e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	b29a      	uxth	r2, r3
 80083a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80083a4:	801a      	strh	r2, [r3, #0]
 80083a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 809d 	bne.w	8008500 <USB_EPStartXfer+0x1244>
 80083c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083ea:	4413      	add	r3, r2
 80083ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	011a      	lsls	r2, r3, #4
 80083fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008402:	4413      	add	r3, r2
 8008404:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800840c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008418:	b29a      	uxth	r2, r3
 800841a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	2b3e      	cmp	r3, #62	@ 0x3e
 800842e:	d92b      	bls.n	8008488 <USB_EPStartXfer+0x11cc>
 8008430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <USB_EPStartXfer+0x11a4>
 8008456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800845a:	3b01      	subs	r3, #1
 800845c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29a      	uxth	r2, r3
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846c:	b29b      	uxth	r3, r3
 800846e:	029b      	lsls	r3, r3, #10
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847e:	b29a      	uxth	r2, r3
 8008480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e069      	b.n	800855c <USB_EPStartXfer+0x12a0>
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10c      	bne.n	80084b2 <USB_EPStartXfer+0x11f6>
 8008498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084ae:	801a      	strh	r2, [r3, #0]
 80084b0:	e054      	b.n	800855c <USB_EPStartXfer+0x12a0>
 80084b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d004      	beq.n	80084e2 <USB_EPStartXfer+0x1226>
 80084d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084dc:	3301      	adds	r3, #1
 80084de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	029b      	lsls	r3, r3, #10
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	4313      	orrs	r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084fc:	801a      	strh	r2, [r3, #0]
 80084fe:	e02d      	b.n	800855c <USB_EPStartXfer+0x12a0>
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d125      	bne.n	800855c <USB_EPStartXfer+0x12a0>
 8008510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800851e:	b29b      	uxth	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008526:	4413      	add	r3, r2
 8008528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800852c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	011a      	lsls	r2, r3, #4
 800853a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800853e:	4413      	add	r3, r2
 8008540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008544:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	b29a      	uxth	r2, r3
 8008556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800855a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800855c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 8218 	beq.w	800899e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800856e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800858e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <USB_EPStartXfer+0x12ea>
 800859a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800859e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80085aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 81f5 	bne.w	800899e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80085b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 81ee 	bne.w	800899e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80085c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80085ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800860a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800860e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008616:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800861a:	b29b      	uxth	r3, r3
 800861c:	8013      	strh	r3, [r2, #0]
 800861e:	e1be      	b.n	800899e <USB_EPStartXfer+0x16e2>
>>>>>>> 2814753 (long press added)
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
 8008694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	78db      	ldrb	r3, [r3, #3]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f040 81b4 	bne.w	8008a0e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80086a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d917      	bls.n	80086f2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80086c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	619a      	str	r2, [r3, #24]
 80086f0:	e00e      	b.n	8008710 <USB_EPStartXfer+0x13e0>
=======
 8008620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	78db      	ldrb	r3, [r3, #3]
 800862c:	2b01      	cmp	r3, #1
 800862e:	f040 81b4 	bne.w	800899a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	429a      	cmp	r2, r3
 800864c:	d917      	bls.n	800867e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800864e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800865e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	619a      	str	r2, [r3, #24]
 800867c:	e00e      	b.n	800869c <USB_EPStartXfer+0x13e0>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          len = ep->xfer_len;
<<<<<<< HEAD
 80086f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2200      	movs	r2, #0
 800870e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8085 	bne.w	800882c <USB_EPStartXfer+0x14fc>
 8008722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800873e:	b29b      	uxth	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008746:	4413      	add	r3, r2
 8008748:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	011a      	lsls	r2, r3, #4
 800875a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800875e:	4413      	add	r3, r2
 8008760:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008774:	b29a      	uxth	r2, r3
 8008776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	2b3e      	cmp	r3, #62	@ 0x3e
 8008782:	d923      	bls.n	80087cc <USB_EPStartXfer+0x149c>
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800878e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008792:	f003 031f 	and.w	r3, r3, #31
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <USB_EPStartXfer+0x1474>
 800879a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800879e:	3b01      	subs	r3, #1
 80087a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	029b      	lsls	r3, r3, #10
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	e060      	b.n	800888e <USB_EPStartXfer+0x155e>
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10c      	bne.n	80087ee <USB_EPStartXfer+0x14be>
 80087d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087ea:	801a      	strh	r2, [r3, #0]
 80087ec:	e04f      	b.n	800888e <USB_EPStartXfer+0x155e>
 80087ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <USB_EPStartXfer+0x14de>
 8008804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008808:	3301      	adds	r3, #1
 800880a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800880e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	b29a      	uxth	r2, r3
 8008816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800881a:	b29b      	uxth	r3, r3
 800881c:	029b      	lsls	r3, r3, #10
 800881e:	b29b      	uxth	r3, r3
 8008820:	4313      	orrs	r3, r2
 8008822:	b29a      	uxth	r2, r3
 8008824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008828:	801a      	strh	r2, [r3, #0]
 800882a:	e030      	b.n	800888e <USB_EPStartXfer+0x155e>
 800882c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d128      	bne.n	800888e <USB_EPStartXfer+0x155e>
 800883c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800884a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008858:	b29b      	uxth	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008860:	4413      	add	r3, r2
 8008862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	011a      	lsls	r2, r3, #4
 8008874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008878:	4413      	add	r3, r2
 800887a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800887e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008886:	b29a      	uxth	r2, r3
 8008888:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800889c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f040 8085 	bne.w	80089b8 <USB_EPStartXfer+0x1688>
 80088ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80088d2:	4413      	add	r3, r2
 80088d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	011a      	lsls	r2, r3, #4
 80088e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80088ea:	4413      	add	r3, r2
 80088ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008900:	b29a      	uxth	r2, r3
 8008902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008906:	801a      	strh	r2, [r3, #0]
 8008908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890c:	2b3e      	cmp	r3, #62	@ 0x3e
 800890e:	d923      	bls.n	8008958 <USB_EPStartXfer+0x1628>
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <USB_EPStartXfer+0x1600>
 8008926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800892a:	3b01      	subs	r3, #1
 800892c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29a      	uxth	r2, r3
 8008938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800893c:	b29b      	uxth	r3, r3
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	b29b      	uxth	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b29b      	uxth	r3, r3
 8008946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894e:	b29a      	uxth	r2, r3
 8008950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	e05c      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
 8008958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10c      	bne.n	800897a <USB_EPStartXfer+0x164a>
 8008960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008970:	b29a      	uxth	r2, r3
 8008972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	e04b      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
 800897a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <USB_EPStartXfer+0x166a>
 8008990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008994:	3301      	adds	r3, #1
 8008996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800899a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	029b      	lsls	r3, r3, #10
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	e02c      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
 80089b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d124      	bne.n	8008a12 <USB_EPStartXfer+0x16e2>
 80089c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80089de:	4413      	add	r3, r2
 80089e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	011a      	lsls	r2, r3, #4
 80089f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80089f6:	4413      	add	r3, r2
 80089f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a0a:	801a      	strh	r2, [r3, #0]
 8008a0c:	e001      	b.n	8008a12 <USB_EPStartXfer+0x16e2>
=======
 800867e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800868e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800869c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	785b      	ldrb	r3, [r3, #1]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f040 8085 	bne.w	80087b8 <USB_EPStartXfer+0x14fc>
 80086ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086d2:	4413      	add	r3, r2
 80086d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	011a      	lsls	r2, r3, #4
 80086e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086ea:	4413      	add	r3, r2
 80086ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008700:	b29a      	uxth	r2, r3
 8008702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870c:	2b3e      	cmp	r3, #62	@ 0x3e
 800870e:	d923      	bls.n	8008758 <USB_EPStartXfer+0x149c>
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <USB_EPStartXfer+0x1474>
 8008726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872a:	3b01      	subs	r3, #1
 800872c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800873c:	b29b      	uxth	r3, r3
 800873e:	029b      	lsls	r3, r3, #10
 8008740:	b29b      	uxth	r3, r3
 8008742:	4313      	orrs	r3, r2
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	e060      	b.n	800881a <USB_EPStartXfer+0x155e>
 8008758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10c      	bne.n	800877a <USB_EPStartXfer+0x14be>
 8008760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800876c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008770:	b29a      	uxth	r2, r3
 8008772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008776:	801a      	strh	r2, [r3, #0]
 8008778:	e04f      	b.n	800881a <USB_EPStartXfer+0x155e>
 800877a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <USB_EPStartXfer+0x14de>
 8008790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008794:	3301      	adds	r3, #1
 8008796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800879a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	029b      	lsls	r3, r3, #10
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087b4:	801a      	strh	r2, [r3, #0]
 80087b6:	e030      	b.n	800881a <USB_EPStartXfer+0x155e>
 80087b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d128      	bne.n	800881a <USB_EPStartXfer+0x155e>
 80087c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80087d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087ec:	4413      	add	r3, r2
 80087ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80087f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	011a      	lsls	r2, r3, #4
 8008800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008804:	4413      	add	r3, r2
 8008806:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800880a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800880e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008812:	b29a      	uxth	r2, r3
 8008814:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008818:	801a      	strh	r2, [r3, #0]
 800881a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 8085 	bne.w	8008944 <USB_EPStartXfer+0x1688>
 800883a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008856:	b29b      	uxth	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800885e:	4413      	add	r3, r2
 8008860:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	011a      	lsls	r2, r3, #4
 8008872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008876:	4413      	add	r3, r2
 8008878:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800887c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800888c:	b29a      	uxth	r2, r3
 800888e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	2b3e      	cmp	r3, #62	@ 0x3e
 800889a:	d923      	bls.n	80088e4 <USB_EPStartXfer+0x1628>
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088aa:	f003 031f 	and.w	r3, r3, #31
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <USB_EPStartXfer+0x1600>
 80088b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088b6:	3b01      	subs	r3, #1
 80088b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	029b      	lsls	r3, r3, #10
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	4313      	orrs	r3, r2
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088da:	b29a      	uxth	r2, r3
 80088dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	e05c      	b.n	800899e <USB_EPStartXfer+0x16e2>
 80088e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10c      	bne.n	8008906 <USB_EPStartXfer+0x164a>
 80088ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008902:	801a      	strh	r2, [r3, #0]
 8008904:	e04b      	b.n	800899e <USB_EPStartXfer+0x16e2>
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <USB_EPStartXfer+0x166a>
 800891c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008920:	3301      	adds	r3, #1
 8008922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29a      	uxth	r2, r3
 800892e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008932:	b29b      	uxth	r3, r3
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	b29b      	uxth	r3, r3
 8008938:	4313      	orrs	r3, r2
 800893a:	b29a      	uxth	r2, r3
 800893c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	e02c      	b.n	800899e <USB_EPStartXfer+0x16e2>
 8008944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	785b      	ldrb	r3, [r3, #1]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d124      	bne.n	800899e <USB_EPStartXfer+0x16e2>
 8008954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008958:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800896a:	4413      	add	r3, r2
 800896c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	011a      	lsls	r2, r3, #4
 800897e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008982:	4413      	add	r3, r2
 8008984:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008990:	b29a      	uxth	r2, r3
 8008992:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e001      	b.n	800899e <USB_EPStartXfer+0x16e2>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e03a      	b.n	8008a88 <USB_EPStartXfer+0x1758>
=======
 800899a:	2301      	movs	r3, #1
 800899c:	e03a      	b.n	8008a14 <USB_EPStartXfer+0x1758>
>>>>>>> 2814753 (long press added)
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
<<<<<<< HEAD
 8008a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008a3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008a40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008a48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008a4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	441a      	add	r2, r3
 8008a6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USB_EPSetStall>:
=======
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80089c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80089cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80089d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80089d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80089e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	441a      	add	r2, r3
 80089fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80089fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USB_EPSetStall>:
>>>>>>> 2814753 (long press added)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d020      	beq.n	8008ae6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aba:	81bb      	strh	r3, [r7, #12]
 8008abc:	89bb      	ldrh	r3, [r7, #12]
 8008abe:	f083 0310 	eor.w	r3, r3, #16
 8008ac2:	81bb      	strh	r3, [r7, #12]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	441a      	add	r2, r3
 8008ace:	89bb      	ldrh	r3, [r7, #12]
 8008ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	8013      	strh	r3, [r2, #0]
 8008ae4:	e01f      	b.n	8008b26 <USB_EPSetStall+0x94>
=======
 8008a1e:	b480      	push	{r7}
 8008a20:	b085      	sub	sp, #20
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d020      	beq.n	8008a72 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a46:	81bb      	strh	r3, [r7, #12]
 8008a48:	89bb      	ldrh	r3, [r7, #12]
 8008a4a:	f083 0310 	eor.w	r3, r3, #16
 8008a4e:	81bb      	strh	r3, [r7, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	89bb      	ldrh	r3, [r7, #12]
 8008a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
 8008a70:	e01f      	b.n	8008ab2 <USB_EPSetStall+0x94>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
<<<<<<< HEAD
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afc:	81fb      	strh	r3, [r7, #14]
 8008afe:	89fb      	ldrh	r3, [r7, #14]
 8008b00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b04:	81fb      	strh	r3, [r7, #14]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	89fb      	ldrh	r3, [r7, #14]
 8008b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <USB_EPClearStall>:
=======
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a88:	81fb      	strh	r3, [r7, #14]
 8008a8a:	89fb      	ldrh	r3, [r7, #14]
 8008a8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a90:	81fb      	strh	r3, [r7, #14]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	89fb      	ldrh	r3, [r7, #14]
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr

08008abe <USB_EPClearStall>:
>>>>>>> 2814753 (long press added)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8008b32:	b480      	push	{r7}
 8008b34:	b087      	sub	sp, #28
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	7b1b      	ldrb	r3, [r3, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f040 809d 	bne.w	8008c80 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d04c      	beq.n	8008be8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	823b      	strh	r3, [r7, #16]
 8008b5c:	8a3b      	ldrh	r3, [r7, #16]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01b      	beq.n	8008b9e <USB_EPClearStall+0x6c>
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b7c:	81fb      	strh	r3, [r7, #14]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	441a      	add	r2, r3
 8008b88:	89fb      	ldrh	r3, [r7, #14]
 8008b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	78db      	ldrb	r3, [r3, #3]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d06c      	beq.n	8008c80 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bbc:	81bb      	strh	r3, [r7, #12]
 8008bbe:	89bb      	ldrh	r3, [r7, #12]
 8008bc0:	f083 0320 	eor.w	r3, r3, #32
 8008bc4:	81bb      	strh	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	89bb      	ldrh	r3, [r7, #12]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]
 8008be6:	e04b      	b.n	8008c80 <USB_EPClearStall+0x14e>
=======
 8008abe:	b480      	push	{r7}
 8008ac0:	b087      	sub	sp, #28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	7b1b      	ldrb	r3, [r3, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 809d 	bne.w	8008c0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04c      	beq.n	8008b74 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	823b      	strh	r3, [r7, #16]
 8008ae8:	8a3b      	ldrh	r3, [r7, #16]
 8008aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d01b      	beq.n	8008b2a <USB_EPClearStall+0x6c>
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b08:	81fb      	strh	r3, [r7, #14]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	441a      	add	r2, r3
 8008b14:	89fb      	ldrh	r3, [r7, #14]
 8008b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	78db      	ldrb	r3, [r3, #3]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d06c      	beq.n	8008c0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b48:	81bb      	strh	r3, [r7, #12]
 8008b4a:	89bb      	ldrh	r3, [r7, #12]
 8008b4c:	f083 0320 	eor.w	r3, r3, #32
 8008b50:	81bb      	strh	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	441a      	add	r2, r3
 8008b5c:	89bb      	ldrh	r3, [r7, #12]
 8008b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	8013      	strh	r3, [r2, #0]
 8008b72:	e04b      	b.n	8008c0c <USB_EPClearStall+0x14e>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	82fb      	strh	r3, [r7, #22]
 8008bf6:	8afb      	ldrh	r3, [r7, #22]
 8008bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01b      	beq.n	8008c38 <USB_EPClearStall+0x106>
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c16:	82bb      	strh	r3, [r7, #20]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	441a      	add	r2, r3
 8008c22:	8abb      	ldrh	r3, [r7, #20]
 8008c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c4e:	827b      	strh	r3, [r7, #18]
 8008c50:	8a7b      	ldrh	r3, [r7, #18]
 8008c52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c56:	827b      	strh	r3, [r7, #18]
 8008c58:	8a7b      	ldrh	r3, [r7, #18]
 8008c5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c5e:	827b      	strh	r3, [r7, #18]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	441a      	add	r2, r3
 8008c6a:	8a7b      	ldrh	r3, [r7, #18]
 8008c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	8013      	strh	r3, [r2, #0]
=======
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	82fb      	strh	r3, [r7, #22]
 8008b82:	8afb      	ldrh	r3, [r7, #22]
 8008b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01b      	beq.n	8008bc4 <USB_EPClearStall+0x106>
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	82bb      	strh	r3, [r7, #20]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	441a      	add	r2, r3
 8008bae:	8abb      	ldrh	r3, [r7, #20]
 8008bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bda:	827b      	strh	r3, [r7, #18]
 8008bdc:	8a7b      	ldrh	r3, [r7, #18]
 8008bde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008be2:	827b      	strh	r3, [r7, #18]
 8008be4:	8a7b      	ldrh	r3, [r7, #18]
 8008be6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bea:	827b      	strh	r3, [r7, #18]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	441a      	add	r2, r3
 8008bf6:	8a7b      	ldrh	r3, [r7, #18]
 8008bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	8013      	strh	r3, [r2, #0]
>>>>>>> 2814753 (long press added)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr

08008c8c <USB_SetDevAddress>:
=======
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <USB_SetDevAddress>:
>>>>>>> 2814753 (long press added)
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2280      	movs	r2, #128	@ 0x80
 8008ca2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <USB_DevConnect>:
=======
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2280      	movs	r2, #128	@ 0x80
 8008c2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <USB_DevConnect>:
>>>>>>> 2814753 (long press added)
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
=======
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr

08008cc6 <USB_DevDisconnect>:
=======
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr

08008c52 <USB_DevDisconnect>:
>>>>>>> 2814753 (long press added)
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
=======
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bc80      	pop	{r7}
 8008cd8:	4770      	bx	lr

08008cda <USB_ReadInterrupts>:
=======
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr

08008c66 <USB_ReadInterrupts>:
>>>>>>> 2814753 (long press added)
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
<<<<<<< HEAD
 8008cda:	b480      	push	{r7}
 8008cdc:	b085      	sub	sp, #20
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008cec:	68fb      	ldr	r3, [r7, #12]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr

08008cf8 <USB_EP0_OutStart>:
=======
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008c78:	68fb      	ldr	r3, [r7, #12]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <USB_EP0_OutStart>:
>>>>>>> 2814753 (long press added)
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
<<<<<<< HEAD
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
=======
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
>>>>>>> 2814753 (long press added)
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
<<<<<<< HEAD
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <USB_WritePMA>:
=======
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr

08008c9a <USB_WritePMA>:
>>>>>>> 2814753 (long press added)
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 8008d0e:	b480      	push	{r7}
 8008d10:	b08b      	sub	sp, #44	@ 0x2c
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	80fb      	strh	r3, [r7, #6]
 8008d20:	4613      	mov	r3, r2
 8008d22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d24:	88bb      	ldrh	r3, [r7, #4]
 8008d26:	3301      	adds	r3, #1
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	617b      	str	r3, [r7, #20]
=======
 8008c9a:	b480      	push	{r7}
 8008c9c:	b08b      	sub	sp, #44	@ 0x2c
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	460b      	mov	r3, r1
 8008caa:	80fb      	strh	r3, [r7, #6]
 8008cac:	4613      	mov	r3, r2
 8008cae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008cb0:	88bb      	ldrh	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	617b      	str	r3, [r7, #20]
>>>>>>> 2814753 (long press added)
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< HEAD
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d34:	88fb      	ldrh	r3, [r7, #6]
 8008d36:	005a      	lsls	r2, r3, #1
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d46:	e01f      	b.n	8008d88 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	3301      	adds	r3, #1
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	b21b      	sxth	r3, r3
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	b21a      	sxth	r2, r3
 8008d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	b21b      	sxth	r3, r3
 8008d62:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	8a7a      	ldrh	r2, [r7, #18]
 8008d68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	3302      	adds	r3, #2
 8008d74:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	3b01      	subs	r3, #1
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1dc      	bne.n	8008d48 <USB_WritePMA+0x3a>
  }
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	372c      	adds	r7, #44	@ 0x2c
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <USB_ReadPMA>:
=======
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008cc0:	88fb      	ldrh	r3, [r7, #6]
 8008cc2:	005a      	lsls	r2, r3, #1
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ccc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cd2:	e01f      	b.n	8008d14 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	b21b      	sxth	r3, r3
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	b21a      	sxth	r2, r3
 8008ce6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	b21b      	sxth	r3, r3
 8008cee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	8a7a      	ldrh	r2, [r7, #18]
 8008cf4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	3302      	adds	r3, #2
 8008d00:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	3301      	adds	r3, #1
 8008d06:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	3b01      	subs	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1dc      	bne.n	8008cd4 <USB_WritePMA+0x3a>
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
 8008d1e:	372c      	adds	r7, #44	@ 0x2c
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr

08008d26 <USB_ReadPMA>:
>>>>>>> 2814753 (long press added)
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 8008d9a:	b480      	push	{r7}
 8008d9c:	b08b      	sub	sp, #44	@ 0x2c
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	4611      	mov	r1, r2
 8008da6:	461a      	mov	r2, r3
 8008da8:	460b      	mov	r3, r1
 8008daa:	80fb      	strh	r3, [r7, #6]
 8008dac:	4613      	mov	r3, r2
 8008dae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008db0:	88bb      	ldrh	r3, [r7, #4]
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	617b      	str	r3, [r7, #20]
=======
 8008d26:	b480      	push	{r7}
 8008d28:	b08b      	sub	sp, #44	@ 0x2c
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	4611      	mov	r1, r2
 8008d32:	461a      	mov	r2, r3
 8008d34:	460b      	mov	r3, r1
 8008d36:	80fb      	strh	r3, [r7, #6]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008d3c:	88bb      	ldrh	r3, [r7, #4]
 8008d3e:	085b      	lsrs	r3, r3, #1
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	617b      	str	r3, [r7, #20]
>>>>>>> 2814753 (long press added)
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< HEAD
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	005a      	lsls	r2, r3, #1
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dcc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd2:	e01b      	b.n	8008e0c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	3302      	adds	r3, #2
 8008de0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	3301      	adds	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	0a1b      	lsrs	r3, r3, #8
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	3302      	adds	r3, #2
 8008e04:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e0      	bne.n	8008dd4 <USB_ReadPMA+0x3a>
=======
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	005a      	lsls	r2, r3, #1
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d5e:	e01b      	b.n	8008d98 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	3302      	adds	r3, #2
 8008d90:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	3b01      	subs	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e0      	bne.n	8008d60 <USB_ReadPMA+0x3a>
>>>>>>> 2814753 (long press added)
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< HEAD
 8008e12:	88bb      	ldrh	r3, [r7, #4]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	701a      	strb	r2, [r3, #0]
  }
}
 8008e2e:	bf00      	nop
 8008e30:	372c      	adds	r7, #44	@ 0x2c
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bc80      	pop	{r7}
 8008e36:	4770      	bx	lr

08008e38 <USBD_HID_Init>:
=======
 8008d9e:	88bb      	ldrh	r3, [r7, #4]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d007      	beq.n	8008dba <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	701a      	strb	r2, [r3, #0]
  }
}
 8008dba:	bf00      	nop
 8008dbc:	372c      	adds	r7, #44	@ 0x2c
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <USBD_HID_Init>:
>>>>>>> 2814753 (long press added)
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008e44:	2304      	movs	r3, #4
 8008e46:	2203      	movs	r2, #3
 8008e48:	2181      	movs	r1, #129	@ 0x81
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 fc7f 	bl	800a74e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008e56:	2010      	movs	r0, #16
 8008e58:	f001 fd8c 	bl	800a974 <USBD_static_malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e005      	b.n	8008e7e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e78:	2200      	movs	r2, #0
 8008e7a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_HID_DeInit>:
=======
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	2181      	movs	r1, #129	@ 0x81
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 fc7f 	bl	800a6da <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008de2:	2010      	movs	r0, #16
 8008de4:	f001 fd8c 	bl	800a900 <USBD_static_malloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e005      	b.n	8008e0a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e04:	2200      	movs	r2, #0
 8008e06:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_HID_DeInit>:
>>>>>>> 2814753 (long press added)
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
<<<<<<< HEAD
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008e92:	2181      	movs	r1, #129	@ 0x81
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fc80 	bl	800a79a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fd6b 	bl	800a98c <USBD_static_free>
    pdev->pClassData = NULL;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_HID_Setup>:
=======
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008e1e:	2181      	movs	r1, #129	@ 0x81
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 fc80 	bl	800a726 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 fd6b 	bl	800a918 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_HID_Setup>:
>>>>>>> 2814753 (long press added)
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d045      	beq.n	8008f82 <USBD_HID_Setup+0xba>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	f040 80d3 	bne.w	80090a2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	3b02      	subs	r3, #2
 8008f02:	2b09      	cmp	r3, #9
 8008f04:	d835      	bhi.n	8008f72 <USBD_HID_Setup+0xaa>
 8008f06:	a201      	add	r2, pc, #4	@ (adr r2, 8008f0c <USBD_HID_Setup+0x44>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f63 	.word	0x08008f63
 8008f10:	08008f43 	.word	0x08008f43
 8008f14:	08008f73 	.word	0x08008f73
 8008f18:	08008f73 	.word	0x08008f73
 8008f1c:	08008f73 	.word	0x08008f73
 8008f20:	08008f73 	.word	0x08008f73
 8008f24:	08008f73 	.word	0x08008f73
 8008f28:	08008f73 	.word	0x08008f73
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f35 	.word	0x08008f35
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	601a      	str	r2, [r3, #0]
          break;
 8008f40:	e01e      	b.n	8008f80 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2201      	movs	r2, #1
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f941 	bl	800a1d0 <USBD_CtlSendData>
          break;
 8008f4e:	e017      	b.n	8008f80 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	885b      	ldrh	r3, [r3, #2]
 8008f54:	0a1b      	lsrs	r3, r3, #8
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	605a      	str	r2, [r3, #4]
          break;
 8008f60:	e00e      	b.n	8008f80 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3304      	adds	r3, #4
 8008f66:	2201      	movs	r2, #1
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 f930 	bl	800a1d0 <USBD_CtlSendData>
          break;
 8008f70:	e006      	b.n	8008f80 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f8c1 	bl	800a0fc <USBD_CtlError>
          ret = USBD_FAIL;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7e:	bf00      	nop
      }
      break;
 8008f80:	e096      	b.n	80090b0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	2b0b      	cmp	r3, #11
 8008f88:	f200 8083 	bhi.w	8009092 <USBD_HID_Setup+0x1ca>
 8008f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <USBD_HID_Setup+0xcc>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	08008fc5 	.word	0x08008fc5
 8008f98:	08009093 	.word	0x08009093
 8008f9c:	08009093 	.word	0x08009093
 8008fa0:	08009093 	.word	0x08009093
 8008fa4:	08009093 	.word	0x08009093
 8008fa8:	08009093 	.word	0x08009093
 8008fac:	08008fed 	.word	0x08008fed
 8008fb0:	08009093 	.word	0x08009093
 8008fb4:	08009093 	.word	0x08009093
 8008fb8:	08009093 	.word	0x08009093
 8008fbc:	08009045 	.word	0x08009045
 8008fc0:	0800906d 	.word	0x0800906d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d107      	bne.n	8008fde <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008fce:	f107 030e 	add.w	r3, r7, #14
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 f8fa 	bl	800a1d0 <USBD_CtlSendData>
=======
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e64:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d045      	beq.n	8008f0e <USBD_HID_Setup+0xba>
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	f040 80d3 	bne.w	800902e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	785b      	ldrb	r3, [r3, #1]
 8008e8c:	3b02      	subs	r3, #2
 8008e8e:	2b09      	cmp	r3, #9
 8008e90:	d835      	bhi.n	8008efe <USBD_HID_Setup+0xaa>
 8008e92:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <USBD_HID_Setup+0x44>)
 8008e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e98:	08008eef 	.word	0x08008eef
 8008e9c:	08008ecf 	.word	0x08008ecf
 8008ea0:	08008eff 	.word	0x08008eff
 8008ea4:	08008eff 	.word	0x08008eff
 8008ea8:	08008eff 	.word	0x08008eff
 8008eac:	08008eff 	.word	0x08008eff
 8008eb0:	08008eff 	.word	0x08008eff
 8008eb4:	08008eff 	.word	0x08008eff
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008ec1 	.word	0x08008ec1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	885b      	ldrh	r3, [r3, #2]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	601a      	str	r2, [r3, #0]
          break;
 8008ecc:	e01e      	b.n	8008f0c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f941 	bl	800a15c <USBD_CtlSendData>
          break;
 8008eda:	e017      	b.n	8008f0c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	885b      	ldrh	r3, [r3, #2]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	605a      	str	r2, [r3, #4]
          break;
 8008eec:	e00e      	b.n	8008f0c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 f930 	bl	800a15c <USBD_CtlSendData>
          break;
 8008efc:	e006      	b.n	8008f0c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 f8c1 	bl	800a088 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	75fb      	strb	r3, [r7, #23]
          break;
 8008f0a:	bf00      	nop
      }
      break;
 8008f0c:	e096      	b.n	800903c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	2b0b      	cmp	r3, #11
 8008f14:	f200 8083 	bhi.w	800901e <USBD_HID_Setup+0x1ca>
 8008f18:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <USBD_HID_Setup+0xcc>)
 8008f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1e:	bf00      	nop
 8008f20:	08008f51 	.word	0x08008f51
 8008f24:	0800901f 	.word	0x0800901f
 8008f28:	0800901f 	.word	0x0800901f
 8008f2c:	0800901f 	.word	0x0800901f
 8008f30:	0800901f 	.word	0x0800901f
 8008f34:	0800901f 	.word	0x0800901f
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	0800901f 	.word	0x0800901f
 8008f40:	0800901f 	.word	0x0800901f
 8008f44:	0800901f 	.word	0x0800901f
 8008f48:	08008fd1 	.word	0x08008fd1
 8008f4c:	08008ff9 	.word	0x08008ff9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d107      	bne.n	8008f6a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008f5a:	f107 030e 	add.w	r3, r7, #14
 8008f5e:	2202      	movs	r2, #2
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 f8fa 	bl	800a15c <USBD_CtlSendData>
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 8008fdc:	e060      	b.n	80090a0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f88b 	bl	800a0fc <USBD_CtlError>
            ret = USBD_FAIL;
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8008fea:	e059      	b.n	80090a0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	885b      	ldrh	r3, [r3, #2]
 8008ff0:	0a1b      	lsrs	r3, r3, #8
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b22      	cmp	r3, #34	@ 0x22
 8008ff6:	d108      	bne.n	800900a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	88db      	ldrh	r3, [r3, #6]
 8008ffc:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ffe:	bf28      	it	cs
 8009000:	233f      	movcs	r3, #63	@ 0x3f
 8009002:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8009004:	4b2d      	ldr	r3, [pc, #180]	@ (80090bc <USBD_HID_Setup+0x1f4>)
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	e015      	b.n	8009036 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	885b      	ldrh	r3, [r3, #2]
 800900e:	0a1b      	lsrs	r3, r3, #8
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b21      	cmp	r3, #33	@ 0x21
 8009014:	d108      	bne.n	8009028 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8009016:	4b2a      	ldr	r3, [pc, #168]	@ (80090c0 <USBD_HID_Setup+0x1f8>)
 8009018:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	2b09      	cmp	r3, #9
 8009020:	bf28      	it	cs
 8009022:	2309      	movcs	r3, #9
 8009024:	83fb      	strh	r3, [r7, #30]
 8009026:	e006      	b.n	8009036 <USBD_HID_Setup+0x16e>
=======
 8008f68:	e060      	b.n	800902c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f88b 	bl	800a088 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f72:	2302      	movs	r3, #2
 8008f74:	75fb      	strb	r3, [r7, #23]
          break;
 8008f76:	e059      	b.n	800902c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b22      	cmp	r3, #34	@ 0x22
 8008f82:	d108      	bne.n	8008f96 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	2b3f      	cmp	r3, #63	@ 0x3f
 8008f8a:	bf28      	it	cs
 8008f8c:	233f      	movcs	r3, #63	@ 0x3f
 8008f8e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008f90:	4b2d      	ldr	r3, [pc, #180]	@ (8009048 <USBD_HID_Setup+0x1f4>)
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	e015      	b.n	8008fc2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	885b      	ldrh	r3, [r3, #2]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b21      	cmp	r3, #33	@ 0x21
 8008fa0:	d108      	bne.n	8008fb4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800904c <USBD_HID_Setup+0x1f8>)
 8008fa4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	88db      	ldrh	r3, [r3, #6]
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	bf28      	it	cs
 8008fae:	2309      	movcs	r3, #9
 8008fb0:	83fb      	strh	r3, [r7, #30]
 8008fb2:	e006      	b.n	8008fc2 <USBD_HID_Setup+0x16e>
>>>>>>> 2814753 (long press added)
          }
          else
          {
            USBD_CtlError(pdev, req);
<<<<<<< HEAD
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 f866 	bl	800a0fc <USBD_CtlError>
            ret = USBD_FAIL;
 8009030:	2302      	movs	r3, #2
 8009032:	75fb      	strb	r3, [r7, #23]
            break;
 8009034:	e034      	b.n	80090a0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8009036:	8bfb      	ldrh	r3, [r7, #30]
 8009038:	461a      	mov	r2, r3
 800903a:	69b9      	ldr	r1, [r7, #24]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 f8c7 	bl	800a1d0 <USBD_CtlSendData>
          break;
 8009042:	e02d      	b.n	80090a0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904a:	2b03      	cmp	r3, #3
 800904c:	d107      	bne.n	800905e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3308      	adds	r3, #8
 8009052:	2201      	movs	r2, #1
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 f8ba 	bl	800a1d0 <USBD_CtlSendData>
=======
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f866 	bl	800a088 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	75fb      	strb	r3, [r7, #23]
            break;
 8008fc0:	e034      	b.n	800902c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008fc2:	8bfb      	ldrh	r3, [r7, #30]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	69b9      	ldr	r1, [r7, #24]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 f8c7 	bl	800a15c <USBD_CtlSendData>
          break;
 8008fce:	e02d      	b.n	800902c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d107      	bne.n	8008fea <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	3308      	adds	r3, #8
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 f8ba 	bl	800a15c <USBD_CtlSendData>
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 800905c:	e020      	b.n	80090a0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 f84b 	bl	800a0fc <USBD_CtlError>
            ret = USBD_FAIL;
 8009066:	2302      	movs	r3, #2
 8009068:	75fb      	strb	r3, [r7, #23]
          break;
 800906a:	e019      	b.n	80090a0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009072:	2b03      	cmp	r3, #3
 8009074:	d106      	bne.n	8009084 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	609a      	str	r2, [r3, #8]
=======
 8008fe8:	e020      	b.n	800902c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 f84b 	bl	800a088 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ff6:	e019      	b.n	800902c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d106      	bne.n	8009010 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	885b      	ldrh	r3, [r3, #2]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	461a      	mov	r2, r3
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	609a      	str	r2, [r3, #8]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 8009082:	e00d      	b.n	80090a0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 f838 	bl	800a0fc <USBD_CtlError>
            ret = USBD_FAIL;
 800908c:	2302      	movs	r3, #2
 800908e:	75fb      	strb	r3, [r7, #23]
          break;
 8009090:	e006      	b.n	80090a0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 f831 	bl	800a0fc <USBD_CtlError>
          ret = USBD_FAIL;
 800909a:	2302      	movs	r3, #2
 800909c:	75fb      	strb	r3, [r7, #23]
          break;
 800909e:	bf00      	nop
      }
      break;
 80090a0:	e006      	b.n	80090b0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f829 	bl	800a0fc <USBD_CtlError>
      ret = USBD_FAIL;
 80090aa:	2302      	movs	r3, #2
 80090ac:	75fb      	strb	r3, [r7, #23]
      break;
 80090ae:	bf00      	nop
  }

  return ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3720      	adds	r7, #32
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200000dc 	.word	0x200000dc
 80090c0:	200000c4 	.word	0x200000c4

080090c4 <USBD_HID_SendReport>:
=======
 800900e:	e00d      	b.n	800902c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f838 	bl	800a088 <USBD_CtlError>
            ret = USBD_FAIL;
 8009018:	2302      	movs	r3, #2
 800901a:	75fb      	strb	r3, [r7, #23]
          break;
 800901c:	e006      	b.n	800902c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f831 	bl	800a088 <USBD_CtlError>
          ret = USBD_FAIL;
 8009026:	2302      	movs	r3, #2
 8009028:	75fb      	strb	r3, [r7, #23]
          break;
 800902a:	bf00      	nop
      }
      break;
 800902c:	e006      	b.n	800903c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f829 	bl	800a088 <USBD_CtlError>
      ret = USBD_FAIL;
 8009036:	2302      	movs	r3, #2
 8009038:	75fb      	strb	r3, [r7, #23]
      break;
 800903a:	bf00      	nop
  }

  return ret;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3720      	adds	r7, #32
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200000dc 	.word	0x200000dc
 800904c:	200000c4 	.word	0x200000c4

08009050 <USBD_HID_SendReport>:
>>>>>>> 2814753 (long press added)
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
<<<<<<< HEAD
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d10c      	bne.n	80090fe <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	7b1b      	ldrb	r3, [r3, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d108      	bne.n	80090fe <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	2201      	movs	r2, #1
 80090f0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	2181      	movs	r1, #129	@ 0x81
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f001 fbf5 	bl	800a8e8 <USBD_LL_Transmit>
=======
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009064:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800906c:	2b03      	cmp	r3, #3
 800906e:	d10c      	bne.n	800908a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	7b1b      	ldrb	r3, [r3, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d108      	bne.n	800908a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2201      	movs	r2, #1
 800907c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	2181      	movs	r1, #129	@ 0x81
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f001 fbf5 	bl	800a874 <USBD_LL_Transmit>
>>>>>>> 2814753 (long press added)
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
<<<<<<< HEAD
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_HID_GetFSCfgDesc>:
=======
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_HID_GetFSCfgDesc>:
>>>>>>> 2814753 (long press added)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2222      	movs	r2, #34	@ 0x22
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	@ (8009124 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000058 	.word	0x20000058

08009128 <USBD_HID_GetHSCfgDesc>:
=======
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2222      	movs	r2, #34	@ 0x22
 80090a0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80090a2:	4b03      	ldr	r3, [pc, #12]	@ (80090b0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20000058 	.word	0x20000058

080090b4 <USBD_HID_GetHSCfgDesc>:
>>>>>>> 2814753 (long press added)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2222      	movs	r2, #34	@ 0x22
 8009134:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8009136:	4b03      	ldr	r3, [pc, #12]	@ (8009144 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8009138:	4618      	mov	r0, r3
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	bc80      	pop	{r7}
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	2000007c 	.word	0x2000007c

08009148 <USBD_HID_GetOtherSpeedCfgDesc>:
=======
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2222      	movs	r2, #34	@ 0x22
 80090c0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80090c2:	4b03      	ldr	r3, [pc, #12]	@ (80090d0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	2000007c 	.word	0x2000007c

080090d4 <USBD_HID_GetOtherSpeedCfgDesc>:
>>>>>>> 2814753 (long press added)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2222      	movs	r2, #34	@ 0x22
 8009154:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8009156:	4b03      	ldr	r3, [pc, #12]	@ (8009164 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	200000a0 	.word	0x200000a0

08009168 <USBD_HID_DataIn>:
=======
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2222      	movs	r2, #34	@ 0x22
 80090e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80090e2:	4b03      	ldr	r3, [pc, #12]	@ (80090f0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bc80      	pop	{r7}
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	200000a0 	.word	0x200000a0

080090f4 <USBD_HID_DataIn>:
>>>>>>> 2814753 (long press added)
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
<<<<<<< HEAD
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
=======
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
>>>>>>> 2814753 (long press added)

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
<<<<<<< HEAD
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800917a:	2200      	movs	r2, #0
 800917c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	bc80      	pop	{r7}
 8009188:	4770      	bx	lr
	...

0800918c <USBD_HID_GetDeviceQualifierDesc>:
=======
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009106:	2200      	movs	r2, #0
 8009108:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	bc80      	pop	{r7}
 8009114:	4770      	bx	lr
	...

08009118 <USBD_HID_GetDeviceQualifierDesc>:
>>>>>>> 2814753 (long press added)
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
<<<<<<< HEAD
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	220a      	movs	r2, #10
 8009198:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800919a:	4b03      	ldr	r3, [pc, #12]	@ (80091a8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bc80      	pop	{r7}
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	200000d0 	.word	0x200000d0

080091ac <USBD_Init>:
=======
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	220a      	movs	r2, #10
 8009124:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8009126:	4b03      	ldr	r3, [pc, #12]	@ (8009134 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	200000d0 	.word	0x200000d0

08009138 <USBD_Init>:
>>>>>>> 2814753 (long press added)
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <USBD_Init+0x18>
=======
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <USBD_Init+0x18>
>>>>>>> 2814753 (long press added)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 80091c0:	2302      	movs	r3, #2
 80091c2:	e01a      	b.n	80091fa <USBD_Init+0x4e>
=======
 800914c:	2302      	movs	r3, #2
 800914e:	e01a      	b.n	8009186 <USBD_Init+0x4e>
>>>>>>> 2814753 (long press added)
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
<<<<<<< HEAD
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
=======
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
>>>>>>> 2814753 (long press added)
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
<<<<<<< HEAD
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
=======
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
>>>>>>> 2814753 (long press added)
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	79fa      	ldrb	r2, [r7, #7]
 80091f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f001 fa48 	bl	800a688 <USBD_LL_Init>

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_RegisterClass>:
=======
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	79fa      	ldrb	r2, [r7, #7]
 800917c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f001 fa48 	bl	800a614 <USBD_LL_Init>

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_RegisterClass>:
>>>>>>> 2814753 (long press added)
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]
 8009222:	e001      	b.n	8009228 <USBD_RegisterClass+0x26>
=======
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d006      	beq.n	80091b0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
 80091ae:	e001      	b.n	80091b4 <USBD_RegisterClass+0x26>
>>>>>>> 2814753 (long press added)
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
<<<<<<< HEAD
 8009224:	2302      	movs	r3, #2
 8009226:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	bc80      	pop	{r7}
 8009232:	4770      	bx	lr

08009234 <USBD_Start>:
=======
 80091b0:	2302      	movs	r3, #2
 80091b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bc80      	pop	{r7}
 80091be:	4770      	bx	lr

080091c0 <USBD_Start>:
>>>>>>> 2814753 (long press added)
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fa6b 	bl	800a718 <USBD_LL_Start>

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_RunTestMode>:
=======
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 fa6b 	bl	800a6a4 <USBD_LL_Start>

  return USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_RunTestMode>:
>>>>>>> 2814753 (long press added)
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
=======
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <USBD_SetClassConfig>:
=======
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr

080091ec <USBD_SetClassConfig>:
>>>>>>> 2814753 (long press added)
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800926c:	2302      	movs	r3, #2
 800926e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	78fa      	ldrb	r2, [r7, #3]
 8009284:	4611      	mov	r1, r2
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
=======
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80091f8:	2302      	movs	r3, #2
 80091fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00c      	beq.n	8009220 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	78fa      	ldrb	r2, [r7, #3]
 8009210:	4611      	mov	r1, r2
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	4798      	blx	r3
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
>>>>>>> 2814753 (long press added)
    }
  }

  return ret;
<<<<<<< HEAD
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_ClrClassConfig>:
=======
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_ClrClassConfig>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_SetupStage>:
=======
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	4611      	mov	r1, r2
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_SetupStage>:
>>>>>>> 2814753 (long press added)
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fed7 	bl	800a08a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80092ea:	461a      	mov	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d016      	beq.n	800932e <USBD_LL_SetupStage+0x6a>
 8009300:	2b02      	cmp	r3, #2
 8009302:	d81c      	bhi.n	800933e <USBD_LL_SetupStage+0x7a>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <USBD_LL_SetupStage+0x4a>
 8009308:	2b01      	cmp	r3, #1
 800930a:	d008      	beq.n	800931e <USBD_LL_SetupStage+0x5a>
 800930c:	e017      	b.n	800933e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9ca 	bl	80096b0 <USBD_StdDevReq>
      break;
 800931c:	e01a      	b.n	8009354 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa2c 	bl	8009784 <USBD_StdItfReq>
      break;
 800932c:	e012      	b.n	8009354 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa6c 	bl	8009814 <USBD_StdEPReq>
      break;
 800933c:	e00a      	b.n	8009354 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009344:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009348:	b2db      	uxtb	r3, r3
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fa43 	bl	800a7d8 <USBD_LL_StallEP>
      break;
 8009352:	bf00      	nop
  }

  return USBD_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_DataOutStage>:
=======
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fed7 	bl	800a016 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	2b02      	cmp	r3, #2
 800928a:	d016      	beq.n	80092ba <USBD_LL_SetupStage+0x6a>
 800928c:	2b02      	cmp	r3, #2
 800928e:	d81c      	bhi.n	80092ca <USBD_LL_SetupStage+0x7a>
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <USBD_LL_SetupStage+0x4a>
 8009294:	2b01      	cmp	r3, #1
 8009296:	d008      	beq.n	80092aa <USBD_LL_SetupStage+0x5a>
 8009298:	e017      	b.n	80092ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f9ca 	bl	800963c <USBD_StdDevReq>
      break;
 80092a8:	e01a      	b.n	80092e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fa2c 	bl	8009710 <USBD_StdItfReq>
      break;
 80092b8:	e012      	b.n	80092e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa6c 	bl	80097a0 <USBD_StdEPReq>
      break;
 80092c8:	e00a      	b.n	80092e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 fa43 	bl	800a764 <USBD_LL_StallEP>
      break;
 80092de:	bf00      	nop
  }

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBD_LL_DataOutStage>:
>>>>>>> 2814753 (long press added)
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	460b      	mov	r3, r1
 8009368:	607a      	str	r2, [r7, #4]
 800936a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d14b      	bne.n	800940a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009378:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009380:	2b03      	cmp	r3, #3
 8009382:	d134      	bne.n	80093ee <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d919      	bls.n	80093c4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	1ad2      	subs	r2, r2, r3
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d203      	bcs.n	80093b2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	e002      	b.n	80093b8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 ff35 	bl	800a22c <USBD_CtlContinueRx>
 80093c2:	e038      	b.n	8009436 <USBD_LL_DataOutStage+0xd8>
=======
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	460b      	mov	r3, r1
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d14b      	bne.n	8009396 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009304:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800930c:	2b03      	cmp	r3, #3
 800930e:	d134      	bne.n	800937a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	429a      	cmp	r2, r3
 800931a:	d919      	bls.n	8009350 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	1ad2      	subs	r2, r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009332:	429a      	cmp	r2, r3
 8009334:	d203      	bcs.n	800933e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800933a:	b29b      	uxth	r3, r3
 800933c:	e002      	b.n	8009344 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	6879      	ldr	r1, [r7, #4]
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 ff35 	bl	800a1b8 <USBD_CtlContinueRx>
 800934e:	e038      	b.n	80093c2 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
<<<<<<< HEAD
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d105      	bne.n	80093e6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 ff32 	bl	800a250 <USBD_CtlSendStatus>
 80093ec:	e023      	b.n	8009436 <USBD_LL_DataOutStage+0xd8>
=======
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00a      	beq.n	8009372 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009362:	2b03      	cmp	r3, #3
 8009364:	d105      	bne.n	8009372 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 ff32 	bl	800a1dc <USBD_CtlSendStatus>
 8009378:	e023      	b.n	80093c2 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 2814753 (long press added)
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
<<<<<<< HEAD
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093f4:	2b05      	cmp	r3, #5
 80093f6:	d11e      	bne.n	8009436 <USBD_LL_DataOutStage+0xd8>
=======
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009380:	2b05      	cmp	r3, #5
 8009382:	d11e      	bne.n	80093c2 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 2814753 (long press added)
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
<<<<<<< HEAD
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009400:	2100      	movs	r1, #0
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f001 f9e8 	bl	800a7d8 <USBD_LL_StallEP>
 8009408:	e015      	b.n	8009436 <USBD_LL_DataOutStage+0xd8>
=======
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800938c:	2100      	movs	r1, #0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f001 f9e8 	bl	800a764 <USBD_LL_StallEP>
 8009394:	e015      	b.n	80093c2 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 2814753 (long press added)
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
<<<<<<< HEAD
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00d      	beq.n	8009432 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800941c:	2b03      	cmp	r3, #3
 800941e:	d108      	bne.n	8009432 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	7afa      	ldrb	r2, [r7, #11]
 800942a:	4611      	mov	r1, r2
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	4798      	blx	r3
 8009430:	e001      	b.n	8009436 <USBD_LL_DataOutStage+0xd8>
=======
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00d      	beq.n	80093be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d108      	bne.n	80093be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	7afa      	ldrb	r2, [r7, #11]
 80093b6:	4611      	mov	r1, r2
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	4798      	blx	r3
 80093bc:	e001      	b.n	80093c2 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
<<<<<<< HEAD
 8009432:	2302      	movs	r3, #2
 8009434:	e000      	b.n	8009438 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_LL_DataInStage>:
=======
 80093be:	2302      	movs	r3, #2
 80093c0:	e000      	b.n	80093c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_DataInStage>:
>>>>>>> 2814753 (long press added)
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	460b      	mov	r3, r1
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800944e:	7afb      	ldrb	r3, [r7, #11]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d17f      	bne.n	8009554 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3314      	adds	r3, #20
 8009458:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009460:	2b02      	cmp	r3, #2
 8009462:	d15c      	bne.n	800951e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	68da      	ldr	r2, [r3, #12]
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	429a      	cmp	r2, r3
 800946e:	d915      	bls.n	800949c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	1ad2      	subs	r2, r2, r3
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	b29b      	uxth	r3, r3
 8009484:	461a      	mov	r2, r3
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 febd 	bl	800a208 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948e:	2300      	movs	r3, #0
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f001 fa4a 	bl	800a92e <USBD_LL_PrepareReceive>
 800949a:	e04e      	b.n	800953a <USBD_LL_DataInStage+0xfa>
=======
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	460b      	mov	r3, r1
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093da:	7afb      	ldrb	r3, [r7, #11]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d17f      	bne.n	80094e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3314      	adds	r3, #20
 80093e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d15c      	bne.n	80094aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d915      	bls.n	8009428 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	1ad2      	subs	r2, r2, r3
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	b29b      	uxth	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 febd 	bl	800a194 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800941a:	2300      	movs	r3, #0
 800941c:	2200      	movs	r2, #0
 800941e:	2100      	movs	r1, #0
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f001 fa4a 	bl	800a8ba <USBD_LL_PrepareReceive>
 8009426:	e04e      	b.n	80094c6 <USBD_LL_DataInStage+0xfa>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
<<<<<<< HEAD
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	6912      	ldr	r2, [r2, #16]
 80094a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a8:	fb01 f202 	mul.w	r2, r1, r2
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d11c      	bne.n	80094ec <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d316      	bcc.n	80094ec <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d20f      	bcs.n	80094ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094cc:	2200      	movs	r2, #0
 80094ce:	2100      	movs	r1, #0
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fe99 	bl	800a208 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094de:	2300      	movs	r3, #0
 80094e0:	2200      	movs	r2, #0
 80094e2:	2100      	movs	r1, #0
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f001 fa22 	bl	800a92e <USBD_LL_PrepareReceive>
 80094ea:	e026      	b.n	800953a <USBD_LL_DataInStage+0xfa>
=======
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	6912      	ldr	r2, [r2, #16]
 8009430:	fbb3 f1f2 	udiv	r1, r3, r2
 8009434:	fb01 f202 	mul.w	r2, r1, r2
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d11c      	bne.n	8009478 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009446:	429a      	cmp	r2, r3
 8009448:	d316      	bcc.n	8009478 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009454:	429a      	cmp	r2, r3
 8009456:	d20f      	bcs.n	8009478 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fe99 	bl	800a194 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800946a:	2300      	movs	r3, #0
 800946c:	2200      	movs	r2, #0
 800946e:	2100      	movs	r1, #0
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 fa22 	bl	800a8ba <USBD_LL_PrepareReceive>
 8009476:	e026      	b.n	80094c6 <USBD_LL_DataInStage+0xfa>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
<<<<<<< HEAD
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d105      	bne.n	800950e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800950e:	2180      	movs	r1, #128	@ 0x80
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f001 f961 	bl	800a7d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 fead 	bl	800a276 <USBD_CtlReceiveStatus>
 800951c:	e00d      	b.n	800953a <USBD_LL_DataInStage+0xfa>
=======
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800948a:	2b03      	cmp	r3, #3
 800948c:	d105      	bne.n	800949a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800949a:	2180      	movs	r1, #128	@ 0x80
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f001 f961 	bl	800a764 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fead 	bl	800a202 <USBD_CtlReceiveStatus>
 80094a8:	e00d      	b.n	80094c6 <USBD_LL_DataInStage+0xfa>
>>>>>>> 2814753 (long press added)
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
<<<<<<< HEAD
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009524:	2b04      	cmp	r3, #4
 8009526:	d004      	beq.n	8009532 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009532:	2180      	movs	r1, #128	@ 0x80
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f001 f94f 	bl	800a7d8 <USBD_LL_StallEP>
=======
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d004      	beq.n	80094be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094be:	2180      	movs	r1, #128	@ 0x80
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f001 f94f 	bl	800a764 <USBD_LL_StallEP>
>>>>>>> 2814753 (long press added)
      }
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< HEAD
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009540:	2b01      	cmp	r3, #1
 8009542:	d11d      	bne.n	8009580 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff fe81 	bl	800924c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009552:	e015      	b.n	8009580 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00d      	beq.n	800957c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009566:	2b03      	cmp	r3, #3
 8009568:	d108      	bne.n	800957c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	7afa      	ldrb	r2, [r7, #11]
 8009574:	4611      	mov	r1, r2
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	4798      	blx	r3
 800957a:	e001      	b.n	8009580 <USBD_LL_DataInStage+0x140>
=======
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d11d      	bne.n	800950c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7ff fe81 	bl	80091d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094de:	e015      	b.n	800950c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d108      	bne.n	8009508 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	7afa      	ldrb	r2, [r7, #11]
 8009500:	4611      	mov	r1, r2
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	4798      	blx	r3
 8009506:	e001      	b.n	800950c <USBD_LL_DataInStage+0x140>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
<<<<<<< HEAD
 800957c:	2302      	movs	r3, #2
 800957e:	e000      	b.n	8009582 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_Reset>:
=======
 8009508:	2302      	movs	r3, #2
 800950a:	e000      	b.n	800950e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_Reset>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009592:	2340      	movs	r3, #64	@ 0x40
 8009594:	2200      	movs	r2, #0
 8009596:	2100      	movs	r1, #0
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f8d8 	bl	800a74e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2240      	movs	r2, #64	@ 0x40
 80095aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095ae:	2340      	movs	r3, #64	@ 0x40
 80095b0:	2200      	movs	r2, #0
 80095b2:	2180      	movs	r1, #128	@ 0x80
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 f8ca 	bl	800a74e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2240      	movs	r2, #64	@ 0x40
 80095c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6852      	ldr	r2, [r2, #4]
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	4611      	mov	r1, r2
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
  }

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_SetSpeed>:
=======
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800951e:	2340      	movs	r3, #64	@ 0x40
 8009520:	2200      	movs	r2, #0
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f8d8 	bl	800a6da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2240      	movs	r2, #64	@ 0x40
 8009536:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800953a:	2340      	movs	r3, #64	@ 0x40
 800953c:	2200      	movs	r2, #0
 800953e:	2180      	movs	r1, #128	@ 0x80
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 f8ca 	bl	800a6da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2240      	movs	r2, #64	@ 0x40
 8009550:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009576:	2b00      	cmp	r3, #0
 8009578:	d009      	beq.n	800958e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6852      	ldr	r2, [r2, #4]
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	4611      	mov	r1, r2
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
  }

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_SetSpeed>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	78fa      	ldrb	r2, [r7, #3]
 800961c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	bc80      	pop	{r7}
 8009628:	4770      	bx	lr

0800962a <USBD_LL_Suspend>:
=======
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <USBD_LL_Suspend>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2204      	movs	r2, #4
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr

08009652 <USBD_LL_Resume>:
=======
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2204      	movs	r2, #4
 80095ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	bc80      	pop	{r7}
 80095dc:	4770      	bx	lr

080095de <USBD_LL_Resume>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009660:	2b04      	cmp	r3, #4
 8009662:	d105      	bne.n	8009670 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr

0800967c <USBD_LL_SOF>:
=======
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d105      	bne.n	80095fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <USBD_LL_SOF>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800968a:	2b03      	cmp	r3, #3
 800968c:	d10b      	bne.n	80096a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
=======
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009616:	2b03      	cmp	r3, #3
 8009618:	d10b      	bne.n	8009632 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
>>>>>>> 2814753 (long press added)
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_StdDevReq>:
=======
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_StdDevReq>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096c6:	2b40      	cmp	r3, #64	@ 0x40
 80096c8:	d005      	beq.n	80096d6 <USBD_StdDevReq+0x26>
 80096ca:	2b40      	cmp	r3, #64	@ 0x40
 80096cc:	d84f      	bhi.n	800976e <USBD_StdDevReq+0xbe>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d009      	beq.n	80096e6 <USBD_StdDevReq+0x36>
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	d14b      	bne.n	800976e <USBD_StdDevReq+0xbe>
=======
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009652:	2b40      	cmp	r3, #64	@ 0x40
 8009654:	d005      	beq.n	8009662 <USBD_StdDevReq+0x26>
 8009656:	2b40      	cmp	r3, #64	@ 0x40
 8009658:	d84f      	bhi.n	80096fa <USBD_StdDevReq+0xbe>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d009      	beq.n	8009672 <USBD_StdDevReq+0x36>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d14b      	bne.n	80096fa <USBD_StdDevReq+0xbe>
>>>>>>> 2814753 (long press added)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
      break;
 80096e4:	e048      	b.n	8009778 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	785b      	ldrb	r3, [r3, #1]
 80096ea:	2b09      	cmp	r3, #9
 80096ec:	d839      	bhi.n	8009762 <USBD_StdDevReq+0xb2>
 80096ee:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <USBD_StdDevReq+0x44>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	08009745 	.word	0x08009745
 80096f8:	08009759 	.word	0x08009759
 80096fc:	08009763 	.word	0x08009763
 8009700:	0800974f 	.word	0x0800974f
 8009704:	08009763 	.word	0x08009763
 8009708:	08009727 	.word	0x08009727
 800970c:	0800971d 	.word	0x0800971d
 8009710:	08009763 	.word	0x08009763
 8009714:	0800973b 	.word	0x0800973b
 8009718:	08009731 	.word	0x08009731
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f9dc 	bl	8009adc <USBD_GetDescriptor>
          break;
 8009724:	e022      	b.n	800976c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fb3f 	bl	8009dac <USBD_SetAddress>
          break;
 800972e:	e01d      	b.n	800976c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fb7e 	bl	8009e34 <USBD_SetConfig>
          break;
 8009738:	e018      	b.n	800976c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc07 	bl	8009f50 <USBD_GetConfig>
          break;
 8009742:	e013      	b.n	800976c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fc37 	bl	8009fba <USBD_GetStatus>
          break;
 800974c:	e00e      	b.n	800976c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fc65 	bl	800a020 <USBD_SetFeature>
          break;
 8009756:	e009      	b.n	800976c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fc74 	bl	800a048 <USBD_ClrFeature>
          break;
 8009760:	e004      	b.n	800976c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fcc9 	bl	800a0fc <USBD_CtlError>
          break;
 800976a:	bf00      	nop
      }
      break;
 800976c:	e004      	b.n	8009778 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fcc3 	bl	800a0fc <USBD_CtlError>
      break;
 8009776:	bf00      	nop
  }

  return ret;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop

08009784 <USBD_StdItfReq>:
=======
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
      break;
 8009670:	e048      	b.n	8009704 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b09      	cmp	r3, #9
 8009678:	d839      	bhi.n	80096ee <USBD_StdDevReq+0xb2>
 800967a:	a201      	add	r2, pc, #4	@ (adr r2, 8009680 <USBD_StdDevReq+0x44>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	080096d1 	.word	0x080096d1
 8009684:	080096e5 	.word	0x080096e5
 8009688:	080096ef 	.word	0x080096ef
 800968c:	080096db 	.word	0x080096db
 8009690:	080096ef 	.word	0x080096ef
 8009694:	080096b3 	.word	0x080096b3
 8009698:	080096a9 	.word	0x080096a9
 800969c:	080096ef 	.word	0x080096ef
 80096a0:	080096c7 	.word	0x080096c7
 80096a4:	080096bd 	.word	0x080096bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f9dc 	bl	8009a68 <USBD_GetDescriptor>
          break;
 80096b0:	e022      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fb3f 	bl	8009d38 <USBD_SetAddress>
          break;
 80096ba:	e01d      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fb7e 	bl	8009dc0 <USBD_SetConfig>
          break;
 80096c4:	e018      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fc07 	bl	8009edc <USBD_GetConfig>
          break;
 80096ce:	e013      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fc37 	bl	8009f46 <USBD_GetStatus>
          break;
 80096d8:	e00e      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc65 	bl	8009fac <USBD_SetFeature>
          break;
 80096e2:	e009      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc74 	bl	8009fd4 <USBD_ClrFeature>
          break;
 80096ec:	e004      	b.n	80096f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fcc9 	bl	800a088 <USBD_CtlError>
          break;
 80096f6:	bf00      	nop
      }
      break;
 80096f8:	e004      	b.n	8009704 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fcc3 	bl	800a088 <USBD_CtlError>
      break;
 8009702:	bf00      	nop
  }

  return ret;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop

08009710 <USBD_StdItfReq>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800979a:	2b40      	cmp	r3, #64	@ 0x40
 800979c:	d005      	beq.n	80097aa <USBD_StdItfReq+0x26>
 800979e:	2b40      	cmp	r3, #64	@ 0x40
 80097a0:	d82e      	bhi.n	8009800 <USBD_StdItfReq+0x7c>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <USBD_StdItfReq+0x26>
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d12a      	bne.n	8009800 <USBD_StdItfReq+0x7c>
=======
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009726:	2b40      	cmp	r3, #64	@ 0x40
 8009728:	d005      	beq.n	8009736 <USBD_StdItfReq+0x26>
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d82e      	bhi.n	800978c <USBD_StdItfReq+0x7c>
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <USBD_StdItfReq+0x26>
 8009732:	2b20      	cmp	r3, #32
 8009734:	d12a      	bne.n	800978c <USBD_StdItfReq+0x7c>
>>>>>>> 2814753 (long press added)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b0:	3b01      	subs	r3, #1
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d81d      	bhi.n	80097f2 <USBD_StdItfReq+0x6e>
=======
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973c:	3b01      	subs	r3, #1
 800973e:	2b02      	cmp	r3, #2
 8009740:	d81d      	bhi.n	800977e <USBD_StdItfReq+0x6e>
>>>>>>> 2814753 (long press added)
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	889b      	ldrh	r3, [r3, #4]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d813      	bhi.n	80097e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d110      	bne.n	80097fc <USBD_StdItfReq+0x78>
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10d      	bne.n	80097fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fd35 	bl	800a250 <USBD_CtlSendStatus>
=======
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	889b      	ldrh	r3, [r3, #4]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	d813      	bhi.n	8009774 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	88db      	ldrh	r3, [r3, #6]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d110      	bne.n	8009788 <USBD_StdItfReq+0x78>
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10d      	bne.n	8009788 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fd35 	bl	800a1dc <USBD_CtlSendStatus>
>>>>>>> 2814753 (long press added)
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
 80097e6:	e009      	b.n	80097fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fc86 	bl	800a0fc <USBD_CtlError>
          break;
 80097f0:	e004      	b.n	80097fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fc81 	bl	800a0fc <USBD_CtlError>
          break;
 80097fa:	e000      	b.n	80097fe <USBD_StdItfReq+0x7a>
          break;
 80097fc:	bf00      	nop
      }
      break;
 80097fe:	e004      	b.n	800980a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc7a 	bl	800a0fc <USBD_CtlError>
      break;
 8009808:	bf00      	nop
  }

  return USBD_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_StdEPReq>:
=======
 8009772:	e009      	b.n	8009788 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fc86 	bl	800a088 <USBD_CtlError>
          break;
 800977c:	e004      	b.n	8009788 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fc81 	bl	800a088 <USBD_CtlError>
          break;
 8009786:	e000      	b.n	800978a <USBD_StdItfReq+0x7a>
          break;
 8009788:	bf00      	nop
      }
      break;
 800978a:	e004      	b.n	8009796 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fc7a 	bl	800a088 <USBD_CtlError>
      break;
 8009794:	bf00      	nop
  }

  return USBD_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_StdEPReq>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	889b      	ldrh	r3, [r3, #4]
 8009826:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009830:	2b40      	cmp	r3, #64	@ 0x40
 8009832:	d007      	beq.n	8009844 <USBD_StdEPReq+0x30>
 8009834:	2b40      	cmp	r3, #64	@ 0x40
 8009836:	f200 8146 	bhi.w	8009ac6 <USBD_StdEPReq+0x2b2>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <USBD_StdEPReq+0x40>
 800983e:	2b20      	cmp	r3, #32
 8009840:	f040 8141 	bne.w	8009ac6 <USBD_StdEPReq+0x2b2>
=======
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	889b      	ldrh	r3, [r3, #4]
 80097b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097bc:	2b40      	cmp	r3, #64	@ 0x40
 80097be:	d007      	beq.n	80097d0 <USBD_StdEPReq+0x30>
 80097c0:	2b40      	cmp	r3, #64	@ 0x40
 80097c2:	f200 8146 	bhi.w	8009a52 <USBD_StdEPReq+0x2b2>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <USBD_StdEPReq+0x40>
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	f040 8141 	bne.w	8009a52 <USBD_StdEPReq+0x2b2>
>>>>>>> 2814753 (long press added)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	4798      	blx	r3
      break;
 8009852:	e13d      	b.n	8009ad0 <USBD_StdEPReq+0x2bc>
=======
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
      break;
 80097de:	e13d      	b.n	8009a5c <USBD_StdEPReq+0x2bc>
>>>>>>> 2814753 (long press added)

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
<<<<<<< HEAD
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800985c:	2b20      	cmp	r3, #32
 800985e:	d10a      	bne.n	8009876 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	e12d      	b.n	8009ad2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	785b      	ldrb	r3, [r3, #1]
 800987a:	2b03      	cmp	r3, #3
 800987c:	d007      	beq.n	800988e <USBD_StdEPReq+0x7a>
 800987e:	2b03      	cmp	r3, #3
 8009880:	f300 811b 	bgt.w	8009aba <USBD_StdEPReq+0x2a6>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d072      	beq.n	800996e <USBD_StdEPReq+0x15a>
 8009888:	2b01      	cmp	r3, #1
 800988a:	d03a      	beq.n	8009902 <USBD_StdEPReq+0xee>
 800988c:	e115      	b.n	8009aba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009894:	2b02      	cmp	r3, #2
 8009896:	d002      	beq.n	800989e <USBD_StdEPReq+0x8a>
 8009898:	2b03      	cmp	r3, #3
 800989a:	d015      	beq.n	80098c8 <USBD_StdEPReq+0xb4>
 800989c:	e02b      	b.n	80098f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00c      	beq.n	80098be <USBD_StdEPReq+0xaa>
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b80      	cmp	r3, #128	@ 0x80
 80098a8:	d009      	beq.n	80098be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 ff92 	bl	800a7d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098b4:	2180      	movs	r1, #128	@ 0x80
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 ff8e 	bl	800a7d8 <USBD_LL_StallEP>
=======
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d10a      	bne.n	8009802 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	e12d      	b.n	8009a5e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	2b03      	cmp	r3, #3
 8009808:	d007      	beq.n	800981a <USBD_StdEPReq+0x7a>
 800980a:	2b03      	cmp	r3, #3
 800980c:	f300 811b 	bgt.w	8009a46 <USBD_StdEPReq+0x2a6>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d072      	beq.n	80098fa <USBD_StdEPReq+0x15a>
 8009814:	2b01      	cmp	r3, #1
 8009816:	d03a      	beq.n	800988e <USBD_StdEPReq+0xee>
 8009818:	e115      	b.n	8009a46 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009820:	2b02      	cmp	r3, #2
 8009822:	d002      	beq.n	800982a <USBD_StdEPReq+0x8a>
 8009824:	2b03      	cmp	r3, #3
 8009826:	d015      	beq.n	8009854 <USBD_StdEPReq+0xb4>
 8009828:	e02b      	b.n	8009882 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00c      	beq.n	800984a <USBD_StdEPReq+0xaa>
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	2b80      	cmp	r3, #128	@ 0x80
 8009834:	d009      	beq.n	800984a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 ff92 	bl	800a764 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009840:	2180      	movs	r1, #128	@ 0x80
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 ff8e 	bl	800a764 <USBD_LL_StallEP>
>>>>>>> 2814753 (long press added)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 80098bc:	e020      	b.n	8009900 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fc1b 	bl	800a0fc <USBD_CtlError>
              break;
 80098c6:	e01b      	b.n	8009900 <USBD_StdEPReq+0xec>
=======
 8009848:	e020      	b.n	800988c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fc1b 	bl	800a088 <USBD_CtlError>
              break;
 8009852:	e01b      	b.n	800988c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	885b      	ldrh	r3, [r3, #2]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10e      	bne.n	800987a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <USBD_StdEPReq+0xda>
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b80      	cmp	r3, #128	@ 0x80
 8009866:	d008      	beq.n	800987a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	88db      	ldrh	r3, [r3, #6]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 ff75 	bl	800a764 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fcae 	bl	800a1dc <USBD_CtlSendStatus>

              break;
 8009880:	e004      	b.n	800988c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fbff 	bl	800a088 <USBD_CtlError>
              break;
 800988a:	bf00      	nop
          }
          break;
 800988c:	e0e0      	b.n	8009a50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009894:	2b02      	cmp	r3, #2
 8009896:	d002      	beq.n	800989e <USBD_StdEPReq+0xfe>
 8009898:	2b03      	cmp	r3, #3
 800989a:	d015      	beq.n	80098c8 <USBD_StdEPReq+0x128>
 800989c:	e026      	b.n	80098ec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00c      	beq.n	80098be <USBD_StdEPReq+0x11e>
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b80      	cmp	r3, #128	@ 0x80
 80098a8:	d009      	beq.n	80098be <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 ff58 	bl	800a764 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098b4:	2180      	movs	r1, #128	@ 0x80
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 ff54 	bl	800a764 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098bc:	e01c      	b.n	80098f8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fbe1 	bl	800a088 <USBD_CtlError>
              break;
 80098c6:	e017      	b.n	80098f8 <USBD_StdEPReq+0x158>
>>>>>>> 2814753 (long press added)

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	885b      	ldrh	r3, [r3, #2]
 80098cc:	2b00      	cmp	r3, #0
<<<<<<< HEAD
 80098ce:	d10e      	bne.n	80098ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <USBD_StdEPReq+0xda>
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	2b80      	cmp	r3, #128	@ 0x80
 80098da:	d008      	beq.n	80098ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	88db      	ldrh	r3, [r3, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d104      	bne.n	80098ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 ff75 	bl	800a7d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fcae 	bl	800a250 <USBD_CtlSendStatus>

              break;
 80098f4:	e004      	b.n	8009900 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fbff 	bl	800a0fc <USBD_CtlError>
              break;
 80098fe:	bf00      	nop
          }
          break;
 8009900:	e0e0      	b.n	8009ac4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009908:	2b02      	cmp	r3, #2
 800990a:	d002      	beq.n	8009912 <USBD_StdEPReq+0xfe>
 800990c:	2b03      	cmp	r3, #3
 800990e:	d015      	beq.n	800993c <USBD_StdEPReq+0x128>
 8009910:	e026      	b.n	8009960 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00c      	beq.n	8009932 <USBD_StdEPReq+0x11e>
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b80      	cmp	r3, #128	@ 0x80
 800991c:	d009      	beq.n	8009932 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 ff58 	bl	800a7d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009928:	2180      	movs	r1, #128	@ 0x80
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 ff54 	bl	800a7d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009930:	e01c      	b.n	800996c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fbe1 	bl	800a0fc <USBD_CtlError>
              break;
 800993a:	e017      	b.n	800996c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	885b      	ldrh	r3, [r3, #2]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d112      	bne.n	800996a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 ff5f 	bl	800a816 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fc79 	bl	800a250 <USBD_CtlSendStatus>
              }
              break;
 800995e:	e004      	b.n	800996a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fbca 	bl	800a0fc <USBD_CtlError>
              break;
 8009968:	e000      	b.n	800996c <USBD_StdEPReq+0x158>
              break;
 800996a:	bf00      	nop
          }
          break;
 800996c:	e0aa      	b.n	8009ac4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009974:	2b02      	cmp	r3, #2
 8009976:	d002      	beq.n	800997e <USBD_StdEPReq+0x16a>
 8009978:	2b03      	cmp	r3, #3
 800997a:	d032      	beq.n	80099e2 <USBD_StdEPReq+0x1ce>
 800997c:	e097      	b.n	8009aae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <USBD_StdEPReq+0x180>
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b80      	cmp	r3, #128	@ 0x80
 8009988:	d004      	beq.n	8009994 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fbb5 	bl	800a0fc <USBD_CtlError>
                break;
 8009992:	e091      	b.n	8009ab8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009998:	2b00      	cmp	r3, #0
 800999a:	da0b      	bge.n	80099b4 <USBD_StdEPReq+0x1a0>
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	3310      	adds	r3, #16
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	4413      	add	r3, r2
 80099b0:	3304      	adds	r3, #4
 80099b2:	e00b      	b.n	80099cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	4413      	add	r3, r2
 80099ca:	3304      	adds	r3, #4
 80099cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2202      	movs	r2, #2
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fbf8 	bl	800a1d0 <USBD_CtlSendData>
              break;
 80099e0:	e06a      	b.n	8009ab8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da11      	bge.n	8009a0e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	f003 020f 	and.w	r2, r3, #15
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	3318      	adds	r3, #24
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d117      	bne.n	8009a34 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fb78 	bl	800a0fc <USBD_CtlError>
                  break;
 8009a0c:	e054      	b.n	8009ab8 <USBD_StdEPReq+0x2a4>
=======
 80098ce:	d112      	bne.n	80098f6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 ff5f 	bl	800a7a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fc79 	bl	800a1dc <USBD_CtlSendStatus>
              }
              break;
 80098ea:	e004      	b.n	80098f6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fbca 	bl	800a088 <USBD_CtlError>
              break;
 80098f4:	e000      	b.n	80098f8 <USBD_StdEPReq+0x158>
              break;
 80098f6:	bf00      	nop
          }
          break;
 80098f8:	e0aa      	b.n	8009a50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009900:	2b02      	cmp	r3, #2
 8009902:	d002      	beq.n	800990a <USBD_StdEPReq+0x16a>
 8009904:	2b03      	cmp	r3, #3
 8009906:	d032      	beq.n	800996e <USBD_StdEPReq+0x1ce>
 8009908:	e097      	b.n	8009a3a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d007      	beq.n	8009920 <USBD_StdEPReq+0x180>
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b80      	cmp	r3, #128	@ 0x80
 8009914:	d004      	beq.n	8009920 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fbb5 	bl	800a088 <USBD_CtlError>
                break;
 800991e:	e091      	b.n	8009a44 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009924:	2b00      	cmp	r3, #0
 8009926:	da0b      	bge.n	8009940 <USBD_StdEPReq+0x1a0>
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	3310      	adds	r3, #16
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	4413      	add	r3, r2
 800993c:	3304      	adds	r3, #4
 800993e:	e00b      	b.n	8009958 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	4413      	add	r3, r2
 8009956:	3304      	adds	r3, #4
 8009958:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2202      	movs	r2, #2
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fbf8 	bl	800a15c <USBD_CtlSendData>
              break;
 800996c:	e06a      	b.n	8009a44 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800996e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009972:	2b00      	cmp	r3, #0
 8009974:	da11      	bge.n	800999a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	f003 020f 	and.w	r2, r3, #15
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	3318      	adds	r3, #24
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d117      	bne.n	80099c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fb78 	bl	800a088 <USBD_CtlError>
                  break;
 8009998:	e054      	b.n	8009a44 <USBD_StdEPReq+0x2a4>
>>>>>>> 2814753 (long press added)
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	f003 020f 	and.w	r2, r3, #15
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fb65 	bl	800a0fc <USBD_CtlError>
                  break;
 8009a32:	e041      	b.n	8009ab8 <USBD_StdEPReq+0x2a4>
=======
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	f003 020f 	and.w	r2, r3, #15
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d104      	bne.n	80099c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb65 	bl	800a088 <USBD_CtlError>
                  break;
 80099be:	e041      	b.n	8009a44 <USBD_StdEPReq+0x2a4>
>>>>>>> 2814753 (long press added)
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
 8009a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	da0b      	bge.n	8009a54 <USBD_StdEPReq+0x240>
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	3310      	adds	r3, #16
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	3304      	adds	r3, #4
 8009a52:	e00b      	b.n	8009a6c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4413      	add	r3, r2
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <USBD_StdEPReq+0x266>
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	2b80      	cmp	r3, #128	@ 0x80
 8009a78:	d103      	bne.n	8009a82 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e00e      	b.n	8009aa0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fee4 	bl	800a854 <USBD_LL_IsStallEP>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e002      	b.n	8009aa0 <USBD_StdEPReq+0x28c>
=======
 80099c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da0b      	bge.n	80099e0 <USBD_StdEPReq+0x240>
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	3310      	adds	r3, #16
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	4413      	add	r3, r2
 80099dc:	3304      	adds	r3, #4
 80099de:	e00b      	b.n	80099f8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	4413      	add	r3, r2
 80099f6:	3304      	adds	r3, #4
 80099f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <USBD_StdEPReq+0x266>
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b80      	cmp	r3, #128	@ 0x80
 8009a04:	d103      	bne.n	8009a0e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e00e      	b.n	8009a2c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fee4 	bl	800a7e0 <USBD_LL_IsStallEP>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	e002      	b.n	8009a2c <USBD_StdEPReq+0x28c>
>>>>>>> 2814753 (long press added)
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fb92 	bl	800a1d0 <USBD_CtlSendData>
              break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb23 	bl	800a0fc <USBD_CtlError>
              break;
 8009ab6:	bf00      	nop
          }
          break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fb1d 	bl	800a0fc <USBD_CtlError>
          break;
 8009ac2:	bf00      	nop
      }
      break;
 8009ac4:	e004      	b.n	8009ad0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fb17 	bl	800a0fc <USBD_CtlError>
      break;
 8009ace:	bf00      	nop
  }

  return ret;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <USBD_GetDescriptor>:
=======
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fb92 	bl	800a15c <USBD_CtlSendData>
              break;
 8009a38:	e004      	b.n	8009a44 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fb23 	bl	800a088 <USBD_CtlError>
              break;
 8009a42:	bf00      	nop
          }
          break;
 8009a44:	e004      	b.n	8009a50 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fb1d 	bl	800a088 <USBD_CtlError>
          break;
 8009a4e:	bf00      	nop
      }
      break;
 8009a50:	e004      	b.n	8009a5c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb17 	bl	800a088 <USBD_CtlError>
      break;
 8009a5a:	bf00      	nop
  }

  return ret;
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <USBD_GetDescriptor>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	885b      	ldrh	r3, [r3, #2]
 8009af6:	0a1b      	lsrs	r3, r3, #8
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b01      	subs	r3, #1
 8009afc:	2b06      	cmp	r3, #6
 8009afe:	f200 8128 	bhi.w	8009d52 <USBD_GetDescriptor+0x276>
 8009b02:	a201      	add	r2, pc, #4	@ (adr r2, 8009b08 <USBD_GetDescriptor+0x2c>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b25 	.word	0x08009b25
 8009b0c:	08009b3d 	.word	0x08009b3d
 8009b10:	08009b7d 	.word	0x08009b7d
 8009b14:	08009d53 	.word	0x08009d53
 8009b18:	08009d53 	.word	0x08009d53
 8009b1c:	08009cf3 	.word	0x08009cf3
 8009b20:	08009d1f 	.word	0x08009d1f
=======
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	885b      	ldrh	r3, [r3, #2]
 8009a82:	0a1b      	lsrs	r3, r3, #8
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	f200 8128 	bhi.w	8009cde <USBD_GetDescriptor+0x276>
 8009a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a94 <USBD_GetDescriptor+0x2c>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009ab1 	.word	0x08009ab1
 8009a98:	08009ac9 	.word	0x08009ac9
 8009a9c:	08009b09 	.word	0x08009b09
 8009aa0:	08009cdf 	.word	0x08009cdf
 8009aa4:	08009cdf 	.word	0x08009cdf
 8009aa8:	08009c7f 	.word	0x08009c7f
 8009aac:	08009cab 	.word	0x08009cab
>>>>>>> 2814753 (long press added)
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
<<<<<<< HEAD
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	7c12      	ldrb	r2, [r2, #16]
 8009b30:	f107 0108 	add.w	r1, r7, #8
 8009b34:	4610      	mov	r0, r2
 8009b36:	4798      	blx	r3
 8009b38:	60f8      	str	r0, [r7, #12]
      break;
 8009b3a:	e112      	b.n	8009d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	7c1b      	ldrb	r3, [r3, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10d      	bne.n	8009b60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4c:	f107 0208 	add.w	r2, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
=======
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
      break;
 8009ac6:	e112      	b.n	8009cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	7c1b      	ldrb	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10d      	bne.n	8009aec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	f107 0208 	add.w	r2, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	701a      	strb	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
 8009b5e:	e100      	b.n	8009d62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	f107 0208 	add.w	r2, r7, #8
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	2202      	movs	r2, #2
 8009b78:	701a      	strb	r2, [r3, #0]
      break;
 8009b7a:	e0f2      	b.n	8009d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	885b      	ldrh	r3, [r3, #2]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	f200 80ac 	bhi.w	8009ce0 <USBD_GetDescriptor+0x204>
 8009b88:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <USBD_GetDescriptor+0xb4>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009ba9 	.word	0x08009ba9
 8009b94:	08009bdd 	.word	0x08009bdd
 8009b98:	08009c11 	.word	0x08009c11
 8009b9c:	08009c45 	.word	0x08009c45
 8009ba0:	08009c79 	.word	0x08009c79
 8009ba4:	08009cad 	.word	0x08009cad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7c12      	ldrb	r2, [r2, #16]
 8009bc0:	f107 0108 	add.w	r1, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
=======
 8009aea:	e100      	b.n	8009cee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	f107 0208 	add.w	r2, r7, #8
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	2202      	movs	r2, #2
 8009b04:	701a      	strb	r2, [r3, #0]
      break;
 8009b06:	e0f2      	b.n	8009cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	885b      	ldrh	r3, [r3, #2]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	f200 80ac 	bhi.w	8009c6c <USBD_GetDescriptor+0x204>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <USBD_GetDescriptor+0xb4>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b9d 	.word	0x08009b9d
 8009b28:	08009bd1 	.word	0x08009bd1
 8009b2c:	08009c05 	.word	0x08009c05
 8009b30:	08009c39 	.word	0x08009c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009bca:	e091      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa94 	bl	800a0fc <USBD_CtlError>
            err++;
 8009bd4:	7afb      	ldrb	r3, [r7, #11]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bda:	e089      	b.n	8009cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7c12      	ldrb	r2, [r2, #16]
 8009bf4:	f107 0108 	add.w	r1, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
=======
 8009b56:	e091      	b.n	8009c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa94 	bl	800a088 <USBD_CtlError>
            err++;
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	3301      	adds	r3, #1
 8009b64:	72fb      	strb	r3, [r7, #11]
          break;
 8009b66:	e089      	b.n	8009c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7c12      	ldrb	r2, [r2, #16]
 8009b80:	f107 0108 	add.w	r1, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009bfe:	e077      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa7a 	bl	800a0fc <USBD_CtlError>
            err++;
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0e:	e06f      	b.n	8009cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	7c12      	ldrb	r2, [r2, #16]
 8009c28:	f107 0108 	add.w	r1, r7, #8
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4798      	blx	r3
 8009c30:	60f8      	str	r0, [r7, #12]
=======
 8009b8a:	e077      	b.n	8009c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa7a 	bl	800a088 <USBD_CtlError>
            err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9a:	e06f      	b.n	8009c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009c32:	e05d      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa60 	bl	800a0fc <USBD_CtlError>
            err++;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	72fb      	strb	r3, [r7, #11]
          break;
 8009c42:	e055      	b.n	8009cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	7c12      	ldrb	r2, [r2, #16]
 8009c5c:	f107 0108 	add.w	r1, r7, #8
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
 8009c64:	60f8      	str	r0, [r7, #12]
=======
 8009bbe:	e05d      	b.n	8009c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa60 	bl	800a088 <USBD_CtlError>
            err++;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bce:	e055      	b.n	8009c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	7c12      	ldrb	r2, [r2, #16]
 8009be8:	f107 0108 	add.w	r1, r7, #8
 8009bec:	4610      	mov	r0, r2
 8009bee:	4798      	blx	r3
 8009bf0:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009c66:	e043      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa46 	bl	800a0fc <USBD_CtlError>
            err++;
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	3301      	adds	r3, #1
 8009c74:	72fb      	strb	r3, [r7, #11]
          break;
 8009c76:	e03b      	b.n	8009cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7c12      	ldrb	r2, [r2, #16]
 8009c90:	f107 0108 	add.w	r1, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
=======
 8009bf2:	e043      	b.n	8009c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fa46 	bl	800a088 <USBD_CtlError>
            err++;
 8009bfc:	7afb      	ldrb	r3, [r7, #11]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	72fb      	strb	r3, [r7, #11]
          break;
 8009c02:	e03b      	b.n	8009c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00b      	beq.n	8009c28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	7c12      	ldrb	r2, [r2, #16]
 8009c1c:	f107 0108 	add.w	r1, r7, #8
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009c9a:	e029      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa2c 	bl	800a0fc <USBD_CtlError>
            err++;
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8009caa:	e021      	b.n	8009cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	7c12      	ldrb	r2, [r2, #16]
 8009cc4:	f107 0108 	add.w	r1, r7, #8
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4798      	blx	r3
 8009ccc:	60f8      	str	r0, [r7, #12]
=======
 8009c26:	e029      	b.n	8009c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa2c 	bl	800a088 <USBD_CtlError>
            err++;
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	3301      	adds	r3, #1
 8009c34:	72fb      	strb	r3, [r7, #11]
          break;
 8009c36:	e021      	b.n	8009c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00b      	beq.n	8009c5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	7c12      	ldrb	r2, [r2, #16]
 8009c50:	f107 0108 	add.w	r1, r7, #8
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009cce:	e00f      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa12 	bl	800a0fc <USBD_CtlError>
            err++;
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cde:	e007      	b.n	8009cf0 <USBD_GetDescriptor+0x214>
=======
 8009c5a:	e00f      	b.n	8009c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa12 	bl	800a088 <USBD_CtlError>
            err++;
 8009c64:	7afb      	ldrb	r3, [r7, #11]
 8009c66:	3301      	adds	r3, #1
 8009c68:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6a:	e007      	b.n	8009c7c <USBD_GetDescriptor+0x214>
>>>>>>> 2814753 (long press added)
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa0a 	bl	800a0fc <USBD_CtlError>
          err++;
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	3301      	adds	r3, #1
 8009cec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009cee:	e038      	b.n	8009d62 <USBD_GetDescriptor+0x286>
 8009cf0:	e037      	b.n	8009d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7c1b      	ldrb	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d02:	f107 0208 	add.w	r2, r7, #8
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
 8009d0a:	60f8      	str	r0, [r7, #12]
=======
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa0a 	bl	800a088 <USBD_CtlError>
          err++;
 8009c74:	7afb      	ldrb	r3, [r7, #11]
 8009c76:	3301      	adds	r3, #1
 8009c78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c7a:	e038      	b.n	8009cee <USBD_GetDescriptor+0x286>
 8009c7c:	e037      	b.n	8009cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	7c1b      	ldrb	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c8e:	f107 0208 	add.w	r2, r7, #8
 8009c92:	4610      	mov	r0, r2
 8009c94:	4798      	blx	r3
 8009c96:	60f8      	str	r0, [r7, #12]
>>>>>>> 2814753 (long press added)
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 8009d0c:	e029      	b.n	8009d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9f3 	bl	800a0fc <USBD_CtlError>
        err++;
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d1c:	e021      	b.n	8009d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7c1b      	ldrb	r3, [r3, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10d      	bne.n	8009d42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2e:	f107 0208 	add.w	r2, r7, #8
 8009d32:	4610      	mov	r0, r2
 8009d34:	4798      	blx	r3
 8009d36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	2207      	movs	r2, #7
 8009d3e:	701a      	strb	r2, [r3, #0]
=======
 8009c98:	e029      	b.n	8009cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f9f3 	bl	800a088 <USBD_CtlError>
        err++;
 8009ca2:	7afb      	ldrb	r3, [r7, #11]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca8:	e021      	b.n	8009cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7c1b      	ldrb	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cba:	f107 0208 	add.w	r2, r7, #8
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4798      	blx	r3
 8009cc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	2207      	movs	r2, #7
 8009cca:	701a      	strb	r2, [r3, #0]
>>>>>>> 2814753 (long press added)
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 8009d40:	e00f      	b.n	8009d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f9d9 	bl	800a0fc <USBD_CtlError>
        err++;
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d50:	e007      	b.n	8009d62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f9d1 	bl	800a0fc <USBD_CtlError>
      err++;
 8009d5a:	7afb      	ldrb	r3, [r7, #11]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d60:	bf00      	nop
  }

  if (err != 0U)
 8009d62:	7afb      	ldrb	r3, [r7, #11]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d11c      	bne.n	8009da2 <USBD_GetDescriptor+0x2c6>
=======
 8009ccc:	e00f      	b.n	8009cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f9d9 	bl	800a088 <USBD_CtlError>
        err++;
 8009cd6:	7afb      	ldrb	r3, [r7, #11]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	72fb      	strb	r3, [r7, #11]
      break;
 8009cdc:	e007      	b.n	8009cee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f9d1 	bl	800a088 <USBD_CtlError>
      err++;
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	72fb      	strb	r3, [r7, #11]
      break;
 8009cec:	bf00      	nop
  }

  if (err != 0U)
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d11c      	bne.n	8009d2e <USBD_GetDescriptor+0x2c6>
>>>>>>> 2814753 (long press added)
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
<<<<<<< HEAD
 8009d68:	893b      	ldrh	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d011      	beq.n	8009d92 <USBD_GetDescriptor+0x2b6>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00d      	beq.n	8009d92 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	88da      	ldrh	r2, [r3, #6]
 8009d7a:	893b      	ldrh	r3, [r7, #8]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	bf28      	it	cs
 8009d80:	4613      	movcs	r3, r2
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d86:	893b      	ldrh	r3, [r7, #8]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fa1f 	bl	800a1d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d104      	bne.n	8009da4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fa58 	bl	800a250 <USBD_CtlSendStatus>
 8009da0:	e000      	b.n	8009da4 <USBD_GetDescriptor+0x2c8>
    return;
 8009da2:	bf00      	nop
    }
  }
}
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop

08009dac <USBD_SetAddress>:
=======
 8009cf4:	893b      	ldrh	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d011      	beq.n	8009d1e <USBD_GetDescriptor+0x2b6>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	88db      	ldrh	r3, [r3, #6]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00d      	beq.n	8009d1e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	88da      	ldrh	r2, [r3, #6]
 8009d06:	893b      	ldrh	r3, [r7, #8]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	bf28      	it	cs
 8009d0c:	4613      	movcs	r3, r2
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d12:	893b      	ldrh	r3, [r7, #8]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fa1f 	bl	800a15c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d104      	bne.n	8009d30 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa58 	bl	800a1dc <USBD_CtlSendStatus>
 8009d2c:	e000      	b.n	8009d30 <USBD_GetDescriptor+0x2c8>
    return;
 8009d2e:	bf00      	nop
    }
  }
}
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop

08009d38 <USBD_SetAddress>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	889b      	ldrh	r3, [r3, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d130      	bne.n	8009e20 <USBD_SetAddress+0x74>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	88db      	ldrh	r3, [r3, #6]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d12c      	bne.n	8009e20 <USBD_SetAddress+0x74>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	885b      	ldrh	r3, [r3, #2]
 8009dca:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dcc:	d828      	bhi.n	8009e20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	885b      	ldrh	r3, [r3, #2]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d104      	bne.n	8009dee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f988 	bl	800a0fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dec:	e01d      	b.n	8009e2a <USBD_SetAddress+0x7e>
=======
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	889b      	ldrh	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d130      	bne.n	8009dac <USBD_SetAddress+0x74>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	88db      	ldrh	r3, [r3, #6]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d12c      	bne.n	8009dac <USBD_SetAddress+0x74>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	885b      	ldrh	r3, [r3, #2]
 8009d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d58:	d828      	bhi.n	8009dac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d6c:	2b03      	cmp	r3, #3
 8009d6e:	d104      	bne.n	8009d7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f988 	bl	800a088 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d78:	e01d      	b.n	8009db6 <USBD_SetAddress+0x7e>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7bfa      	ldrb	r2, [r7, #15]
 8009df2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fd55 	bl	800a8aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa25 	bl	800a250 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e14:	e009      	b.n	8009e2a <USBD_SetAddress+0x7e>
=======
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7bfa      	ldrb	r2, [r7, #15]
 8009d7e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fd55 	bl	800a836 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fa25 	bl	800a1dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d004      	beq.n	8009da2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da0:	e009      	b.n	8009db6 <USBD_SetAddress+0x7e>
>>>>>>> 2814753 (long press added)
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1e:	e004      	b.n	8009e2a <USBD_SetAddress+0x7e>
=======
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009daa:	e004      	b.n	8009db6 <USBD_SetAddress+0x7e>
>>>>>>> 2814753 (long press added)
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f96a 	bl	800a0fc <USBD_CtlError>
  }
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <USBD_SetConfig>:
=======
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f96a 	bl	800a088 <USBD_CtlError>
  }
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <USBD_SetConfig>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	885b      	ldrh	r3, [r3, #2]
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	4b41      	ldr	r3, [pc, #260]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009e46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e48:	4b40      	ldr	r3, [pc, #256]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d904      	bls.n	8009e5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f952 	bl	800a0fc <USBD_CtlError>
 8009e58:	e075      	b.n	8009f46 <USBD_SetConfig+0x112>
=======
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	885b      	ldrh	r3, [r3, #2]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	4b41      	ldr	r3, [pc, #260]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009dd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dd4:	4b40      	ldr	r3, [pc, #256]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d904      	bls.n	8009de6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f952 	bl	800a088 <USBD_CtlError>
 8009de4:	e075      	b.n	8009ed2 <USBD_SetConfig+0x112>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    switch (pdev->dev_state)
<<<<<<< HEAD
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d002      	beq.n	8009e6a <USBD_SetConfig+0x36>
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d023      	beq.n	8009eb0 <USBD_SetConfig+0x7c>
 8009e68:	e062      	b.n	8009f30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e6a:	4b38      	ldr	r3, [pc, #224]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d01a      	beq.n	8009ea8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e72:	4b36      	ldr	r3, [pc, #216]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e84:	4b31      	ldr	r3, [pc, #196]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff f9e8 	bl	8009260 <USBD_SetClassConfig>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d104      	bne.n	8009ea0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f92f 	bl	800a0fc <USBD_CtlError>
            return;
 8009e9e:	e052      	b.n	8009f46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9d5 	bl	800a250 <USBD_CtlSendStatus>
=======
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d002      	beq.n	8009df6 <USBD_SetConfig+0x36>
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d023      	beq.n	8009e3c <USBD_SetConfig+0x7c>
 8009df4:	e062      	b.n	8009ebc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009df6:	4b38      	ldr	r3, [pc, #224]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d01a      	beq.n	8009e34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009dfe:	4b36      	ldr	r3, [pc, #216]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2203      	movs	r2, #3
 8009e0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e10:	4b31      	ldr	r3, [pc, #196]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff f9e8 	bl	80091ec <USBD_SetClassConfig>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d104      	bne.n	8009e2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f92f 	bl	800a088 <USBD_CtlError>
            return;
 8009e2a:	e052      	b.n	8009ed2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f9d5 	bl	800a1dc <USBD_CtlSendStatus>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
<<<<<<< HEAD
 8009ea6:	e04e      	b.n	8009f46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9d1 	bl	800a250 <USBD_CtlSendStatus>
        break;
 8009eae:	e04a      	b.n	8009f46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009eb0:	4b26      	ldr	r3, [pc, #152]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d112      	bne.n	8009ede <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009ec0:	4b22      	ldr	r3, [pc, #136]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009eca:	4b20      	ldr	r3, [pc, #128]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff f9e4 	bl	800929e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f9ba 	bl	800a250 <USBD_CtlSendStatus>
=======
 8009e32:	e04e      	b.n	8009ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f9d1 	bl	800a1dc <USBD_CtlSendStatus>
        break;
 8009e3a:	e04a      	b.n	8009ed2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e3c:	4b26      	ldr	r3, [pc, #152]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d112      	bne.n	8009e6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009e4c:	4b22      	ldr	r3, [pc, #136]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e56:	4b20      	ldr	r3, [pc, #128]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff f9e4 	bl	800922a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f9ba 	bl	800a1dc <USBD_CtlSendStatus>
>>>>>>> 2814753 (long press added)
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
<<<<<<< HEAD
 8009edc:	e033      	b.n	8009f46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009ede:	4b1b      	ldr	r3, [pc, #108]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d01d      	beq.n	8009f28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff f9d2 	bl	800929e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009efa:	4b14      	ldr	r3, [pc, #80]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f04:	4b11      	ldr	r3, [pc, #68]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff f9a8 	bl	8009260 <USBD_SetClassConfig>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d104      	bne.n	8009f20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8ef 	bl	800a0fc <USBD_CtlError>
            return;
 8009f1e:	e012      	b.n	8009f46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f995 	bl	800a250 <USBD_CtlSendStatus>
        break;
 8009f26:	e00e      	b.n	8009f46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f991 	bl	800a250 <USBD_CtlSendStatus>
        break;
 8009f2e:	e00a      	b.n	8009f46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f8e2 	bl	800a0fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f38:	4b04      	ldr	r3, [pc, #16]	@ (8009f4c <USBD_SetConfig+0x118>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff f9ad 	bl	800929e <USBD_ClrClassConfig>
        break;
 8009f44:	bf00      	nop
    }
  }
}
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000b24 	.word	0x20000b24

08009f50 <USBD_GetConfig>:
=======
 8009e68:	e033      	b.n	8009ed2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d01d      	beq.n	8009eb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff f9d2 	bl	800922a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e86:	4b14      	ldr	r3, [pc, #80]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e90:	4b11      	ldr	r3, [pc, #68]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff f9a8 	bl	80091ec <USBD_SetClassConfig>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d104      	bne.n	8009eac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f8ef 	bl	800a088 <USBD_CtlError>
            return;
 8009eaa:	e012      	b.n	8009ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f995 	bl	800a1dc <USBD_CtlSendStatus>
        break;
 8009eb2:	e00e      	b.n	8009ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f991 	bl	800a1dc <USBD_CtlSendStatus>
        break;
 8009eba:	e00a      	b.n	8009ed2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f8e2 	bl	800a088 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ec4:	4b04      	ldr	r3, [pc, #16]	@ (8009ed8 <USBD_SetConfig+0x118>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff f9ad 	bl	800922a <USBD_ClrClassConfig>
        break;
 8009ed0:	bf00      	nop
    }
  }
}
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000c2c 	.word	0x20000c2c

08009edc <USBD_GetConfig>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	88db      	ldrh	r3, [r3, #6]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d004      	beq.n	8009f6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f8c9 	bl	800a0fc <USBD_CtlError>
=======
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88db      	ldrh	r3, [r3, #6]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d004      	beq.n	8009ef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f8c9 	bl	800a088 <USBD_CtlError>
>>>>>>> 2814753 (long press added)
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
 8009f6a:	e022      	b.n	8009fb2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	dc02      	bgt.n	8009f7c <USBD_GetConfig+0x2c>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dc03      	bgt.n	8009f82 <USBD_GetConfig+0x32>
 8009f7a:	e015      	b.n	8009fa8 <USBD_GetConfig+0x58>
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d00b      	beq.n	8009f98 <USBD_GetConfig+0x48>
 8009f80:	e012      	b.n	8009fa8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f91d 	bl	800a1d0 <USBD_CtlSendData>
        break;
 8009f96:	e00c      	b.n	8009fb2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f915 	bl	800a1d0 <USBD_CtlSendData>
        break;
 8009fa6:	e004      	b.n	8009fb2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f8a6 	bl	800a0fc <USBD_CtlError>
        break;
 8009fb0:	bf00      	nop
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_GetStatus>:
=======
 8009ef6:	e022      	b.n	8009f3e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	dc02      	bgt.n	8009f08 <USBD_GetConfig+0x2c>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dc03      	bgt.n	8009f0e <USBD_GetConfig+0x32>
 8009f06:	e015      	b.n	8009f34 <USBD_GetConfig+0x58>
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d00b      	beq.n	8009f24 <USBD_GetConfig+0x48>
 8009f0c:	e012      	b.n	8009f34 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3308      	adds	r3, #8
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f91d 	bl	800a15c <USBD_CtlSendData>
        break;
 8009f22:	e00c      	b.n	8009f3e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	2201      	movs	r2, #1
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f915 	bl	800a15c <USBD_CtlSendData>
        break;
 8009f32:	e004      	b.n	8009f3e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f8a6 	bl	800a088 <USBD_CtlError>
        break;
 8009f3c:	bf00      	nop
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_GetStatus>:
>>>>>>> 2814753 (long press added)
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d81e      	bhi.n	800a00e <USBD_GetStatus+0x54>
=======
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f56:	3b01      	subs	r3, #1
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d81e      	bhi.n	8009f9a <USBD_GetStatus+0x54>
>>>>>>> 2814753 (long press added)
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	88db      	ldrh	r3, [r3, #6]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d004      	beq.n	8009fe2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f88e 	bl	800a0fc <USBD_CtlError>
        break;
 8009fe0:	e01a      	b.n	800a018 <USBD_GetStatus+0x5e>
=======
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	88db      	ldrh	r3, [r3, #6]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d004      	beq.n	8009f6e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f88e 	bl	800a088 <USBD_CtlError>
        break;
 8009f6c:	e01a      	b.n	8009fa4 <USBD_GetStatus+0x5e>
>>>>>>> 2814753 (long press added)
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	60da      	str	r2, [r3, #12]
=======
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	60da      	str	r2, [r3, #12]
>>>>>>> 2814753 (long press added)
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
<<<<<<< HEAD
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f043 0202 	orr.w	r2, r3, #2
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	330c      	adds	r3, #12
 800a002:	2202      	movs	r2, #2
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f8e2 	bl	800a1d0 <USBD_CtlSendData>
      break;
 800a00c:	e004      	b.n	800a018 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f873 	bl	800a0fc <USBD_CtlError>
      break;
 800a016:	bf00      	nop
  }
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_SetFeature>:
=======
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f043 0202 	orr.w	r2, r3, #2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	2202      	movs	r2, #2
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f8e2 	bl	800a15c <USBD_CtlSendData>
      break;
 8009f98:	e004      	b.n	8009fa4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f873 	bl	800a088 <USBD_CtlError>
      break;
 8009fa2:	bf00      	nop
  }
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_SetFeature>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d106      	bne.n	800a040 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f908 	bl	800a250 <USBD_CtlSendStatus>
  }
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_ClrFeature>:
=======
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	885b      	ldrh	r3, [r3, #2]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d106      	bne.n	8009fcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f908 	bl	800a1dc <USBD_CtlSendStatus>
  }
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_ClrFeature>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a058:	3b01      	subs	r3, #1
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d80b      	bhi.n	800a076 <USBD_ClrFeature+0x2e>
=======
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d80b      	bhi.n	800a002 <USBD_ClrFeature+0x2e>
>>>>>>> 2814753 (long press added)
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	885b      	ldrh	r3, [r3, #2]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d10c      	bne.n	800a080 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f8ee 	bl	800a250 <USBD_CtlSendStatus>
      }
      break;
 800a074:	e004      	b.n	800a080 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f83f 	bl	800a0fc <USBD_CtlError>
      break;
 800a07e:	e000      	b.n	800a082 <USBD_ClrFeature+0x3a>
      break;
 800a080:	bf00      	nop
  }
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_ParseSetupRequest>:
=======
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d10c      	bne.n	800a00c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f8ee 	bl	800a1dc <USBD_CtlSendStatus>
      }
      break;
 800a000:	e004      	b.n	800a00c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f83f 	bl	800a088 <USBD_CtlError>
      break;
 800a00a:	e000      	b.n	800a00e <USBD_ClrFeature+0x3a>
      break;
 800a00c:	bf00      	nop
  }
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_ParseSetupRequest>:
>>>>>>> 2814753 (long press added)
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	785a      	ldrb	r2, [r3, #1]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	3303      	adds	r3, #3
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	3305      	adds	r3, #5
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	3306      	adds	r3, #6
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	3307      	adds	r3, #7
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	021b      	lsls	r3, r3, #8
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	4413      	add	r3, r2
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	80da      	strh	r2, [r3, #6]

}
 800a0f2:	bf00      	nop
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bc80      	pop	{r7}
 800a0fa:	4770      	bx	lr

0800a0fc <USBD_CtlError>:
=======
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781a      	ldrb	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	785a      	ldrb	r2, [r3, #1]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	3302      	adds	r3, #2
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	3303      	adds	r3, #3
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	021b      	lsls	r3, r3, #8
 800a040:	b29b      	uxth	r3, r3
 800a042:	4413      	add	r3, r2
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	3304      	adds	r3, #4
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	461a      	mov	r2, r3
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	3305      	adds	r3, #5
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4413      	add	r3, r2
 800a05e:	b29a      	uxth	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	3306      	adds	r3, #6
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	3307      	adds	r3, #7
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	b29b      	uxth	r3, r3
 800a076:	4413      	add	r3, r2
 800a078:	b29a      	uxth	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	80da      	strh	r2, [r3, #6]

}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	bc80      	pop	{r7}
 800a086:	4770      	bx	lr

0800a088 <USBD_CtlError>:
>>>>>>> 2814753 (long press added)
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a106:	2180      	movs	r1, #128	@ 0x80
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fb65 	bl	800a7d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a10e:	2100      	movs	r1, #0
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb61 	bl	800a7d8 <USBD_LL_StallEP>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_GetString>:
=======
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a092:	2180      	movs	r1, #128	@ 0x80
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fb65 	bl	800a764 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a09a:	2100      	movs	r1, #0
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fb61 	bl	800a764 <USBD_LL_StallEP>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_GetString>:
>>>>>>> 2814753 (long press added)
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 800a11e:	b580      	push	{r7, lr}
 800a120:	b086      	sub	sp, #24
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d032      	beq.n	800a19a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 f834 	bl	800a1a2 <USBD_GetLen>
 800a13a:	4603      	mov	r3, r0
 800a13c:	3301      	adds	r3, #1
 800a13e:	b29b      	uxth	r3, r3
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	75fa      	strb	r2, [r7, #23]
 800a14e:	461a      	mov	r2, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4413      	add	r3, r2
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7812      	ldrb	r2, [r2, #0]
 800a158:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	75fa      	strb	r2, [r7, #23]
 800a160:	461a      	mov	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	4413      	add	r3, r2
 800a166:	2203      	movs	r2, #3
 800a168:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a16a:	e012      	b.n	800a192 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	60fa      	str	r2, [r7, #12]
 800a172:	7dfa      	ldrb	r2, [r7, #23]
 800a174:	1c51      	adds	r1, r2, #1
 800a176:	75f9      	strb	r1, [r7, #23]
 800a178:	4611      	mov	r1, r2
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	440a      	add	r2, r1
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	75fa      	strb	r2, [r7, #23]
 800a188:	461a      	mov	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4413      	add	r3, r2
 800a18e:	2200      	movs	r2, #0
 800a190:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e8      	bne.n	800a16c <USBD_GetString+0x4e>
    }
  }
}
 800a19a:	bf00      	nop
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_GetLen>:
=======
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d032      	beq.n	800a126 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f834 	bl	800a12e <USBD_GetLen>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	75fa      	strb	r2, [r7, #23]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	4413      	add	r3, r2
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7812      	ldrb	r2, [r2, #0]
 800a0e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	75fa      	strb	r2, [r7, #23]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a0f6:	e012      	b.n	800a11e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	60fa      	str	r2, [r7, #12]
 800a0fe:	7dfa      	ldrb	r2, [r7, #23]
 800a100:	1c51      	adds	r1, r2, #1
 800a102:	75f9      	strb	r1, [r7, #23]
 800a104:	4611      	mov	r1, r2
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	440a      	add	r2, r1
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	75fa      	strb	r2, [r7, #23]
 800a114:	461a      	mov	r2, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4413      	add	r3, r2
 800a11a:	2200      	movs	r2, #0
 800a11c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e8      	bne.n	800a0f8 <USBD_GetString+0x4e>
    }
  }
}
 800a126:	bf00      	nop
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_GetLen>:
>>>>>>> 2814753 (long press added)
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 800a1a2:	b480      	push	{r7}
 800a1a4:	b085      	sub	sp, #20
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a1ae:	e005      	b.n	800a1bc <USBD_GetLen+0x1a>
  {
    len++;
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f5      	bne.n	800a1b0 <USBD_GetLen+0xe>
  }

  return len;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_CtlSendData>:
=======
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a13a:	e005      	b.n	800a148 <USBD_GetLen+0x1a>
  {
    len++;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	3301      	adds	r3, #1
 800a140:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3301      	adds	r3, #1
 800a146:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1f5      	bne.n	800a13c <USBD_GetLen+0xe>
  }

  return len;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	bc80      	pop	{r7}
 800a15a:	4770      	bx	lr

0800a15c <USBD_CtlSendData>:
>>>>>>> 2814753 (long press added)
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a1e6:	88fa      	ldrh	r2, [r7, #6]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1f2:	88fb      	ldrh	r3, [r7, #6]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fb75 	bl	800a8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_CtlContinueSendData>:
=======
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2202      	movs	r2, #2
 800a16e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a178:	88fa      	ldrh	r2, [r7, #6]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	2100      	movs	r1, #0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 fb75 	bl	800a874 <USBD_LL_Transmit>

  return USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_CtlContinueSendData>:
>>>>>>> 2814753 (long press added)
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a216:	88fb      	ldrh	r3, [r7, #6]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	2100      	movs	r1, #0
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fb63 	bl	800a8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_CtlContinueRx>:
=======
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 fb63 	bl	800a874 <USBD_LL_Transmit>

  return USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CtlContinueRx>:
>>>>>>> 2814753 (long press added)
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	2100      	movs	r1, #0
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 fb74 	bl	800a92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <USBD_CtlSendStatus>:
=======
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1c6:	88fb      	ldrh	r3, [r7, #6]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 fb74 	bl	800a8ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_CtlSendStatus>:
>>>>>>> 2814753 (long press added)
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2204      	movs	r2, #4
 800a25c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a260:	2300      	movs	r3, #0
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb3e 	bl	800a8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <USBD_CtlReceiveStatus>:
=======
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2204      	movs	r2, #4
 800a1e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fb3e 	bl	800a874 <USBD_LL_Transmit>

  return USBD_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_CtlReceiveStatus>:
>>>>>>> 2814753 (long press added)
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2205      	movs	r2, #5
 800a282:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a286:	2300      	movs	r3, #0
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fb4e 	bl	800a92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <MX_USB_DEVICE_Init>:
=======
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2205      	movs	r2, #5
 800a20e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a212:	2300      	movs	r3, #0
 800a214:	2200      	movs	r2, #0
 800a216:	2100      	movs	r1, #0
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fb4e 	bl	800a8ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <MX_USB_DEVICE_Init>:
>>>>>>> 2814753 (long press added)
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
=======
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	490e      	ldr	r1, [pc, #56]	@ (800a2dc <MX_USB_DEVICE_Init+0x40>)
 800a2a4:	480e      	ldr	r0, [pc, #56]	@ (800a2e0 <MX_USB_DEVICE_Init+0x44>)
 800a2a6:	f7fe ff81 	bl	80091ac <USBD_Init>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2b0:	f7f6 fb4c 	bl	800094c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a2b4:	490b      	ldr	r1, [pc, #44]	@ (800a2e4 <MX_USB_DEVICE_Init+0x48>)
 800a2b6:	480a      	ldr	r0, [pc, #40]	@ (800a2e0 <MX_USB_DEVICE_Init+0x44>)
 800a2b8:	f7fe ffa3 	bl	8009202 <USBD_RegisterClass>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2c2:	f7f6 fb43 	bl	800094c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2c6:	4806      	ldr	r0, [pc, #24]	@ (800a2e0 <MX_USB_DEVICE_Init+0x44>)
 800a2c8:	f7fe ffb4 	bl	8009234 <USBD_Start>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a2d2:	f7f6 fb3b 	bl	800094c <Error_Handler>
=======
 800a22c:	2200      	movs	r2, #0
 800a22e:	490e      	ldr	r1, [pc, #56]	@ (800a268 <MX_USB_DEVICE_Init+0x40>)
 800a230:	480e      	ldr	r0, [pc, #56]	@ (800a26c <MX_USB_DEVICE_Init+0x44>)
 800a232:	f7fe ff81 	bl	8009138 <USBD_Init>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a23c:	f7f6 fb4c 	bl	80008d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a240:	490b      	ldr	r1, [pc, #44]	@ (800a270 <MX_USB_DEVICE_Init+0x48>)
 800a242:	480a      	ldr	r0, [pc, #40]	@ (800a26c <MX_USB_DEVICE_Init+0x44>)
 800a244:	f7fe ffa3 	bl	800918e <USBD_RegisterClass>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a24e:	f7f6 fb43 	bl	80008d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a252:	4806      	ldr	r0, [pc, #24]	@ (800a26c <MX_USB_DEVICE_Init+0x44>)
 800a254:	f7fe ffb4 	bl	80091c0 <USBD_Start>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a25e:	f7f6 fb3b 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 800a2d6:	bf00      	nop
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	2000011c 	.word	0x2000011c
 800a2e0:	20000b28 	.word	0x20000b28
 800a2e4:	20000020 	.word	0x20000020

0800a2e8 <USBD_FS_DeviceDescriptor>:
=======
 800a262:	bf00      	nop
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	2000011c 	.word	0x2000011c
 800a26c:	20000c30 	.word	0x20000c30
 800a270:	20000020 	.word	0x20000020

0800a274 <USBD_FS_DeviceDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2212      	movs	r2, #18
 800a2f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2fa:	4b03      	ldr	r3, [pc, #12]	@ (800a308 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	bc80      	pop	{r7}
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	20000138 	.word	0x20000138

0800a30c <USBD_FS_LangIDStrDescriptor>:
=======
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	6039      	str	r1, [r7, #0]
 800a27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2212      	movs	r2, #18
 800a284:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a286:	4b03      	ldr	r3, [pc, #12]	@ (800a294 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000138 	.word	0x20000138

0800a298 <USBD_FS_LangIDStrDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2204      	movs	r2, #4
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	@ (800a32c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	2000014c 	.word	0x2000014c

0800a330 <USBD_FS_ProductStrDescriptor>:
=======
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2204      	movs	r2, #4
 800a2a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2aa:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	2000014c 	.word	0x2000014c

0800a2bc <USBD_FS_ProductStrDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4907      	ldr	r1, [pc, #28]	@ (800a364 <USBD_FS_ProductStrDescriptor+0x34>)
 800a346:	4808      	ldr	r0, [pc, #32]	@ (800a368 <USBD_FS_ProductStrDescriptor+0x38>)
 800a348:	f7ff fee9 	bl	800a11e <USBD_GetString>
 800a34c:	e004      	b.n	800a358 <USBD_FS_ProductStrDescriptor+0x28>
=======
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d105      	bne.n	800a2da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	4907      	ldr	r1, [pc, #28]	@ (800a2f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2d2:	4808      	ldr	r0, [pc, #32]	@ (800a2f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2d4:	f7ff fee9 	bl	800a0aa <USBD_GetString>
 800a2d8:	e004      	b.n	800a2e4 <USBD_FS_ProductStrDescriptor+0x28>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	4904      	ldr	r1, [pc, #16]	@ (800a364 <USBD_FS_ProductStrDescriptor+0x34>)
 800a352:	4805      	ldr	r0, [pc, #20]	@ (800a368 <USBD_FS_ProductStrDescriptor+0x38>)
 800a354:	f7ff fee3 	bl	800a11e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a358:	4b02      	ldr	r3, [pc, #8]	@ (800a364 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000dec 	.word	0x20000dec
 800a368:	0800aa98 	.word	0x0800aa98

0800a36c <USBD_FS_ManufacturerStrDescriptor>:
=======
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4904      	ldr	r1, [pc, #16]	@ (800a2f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2de:	4805      	ldr	r0, [pc, #20]	@ (800a2f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2e0:	f7ff fee3 	bl	800a0aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2e4:	4b02      	ldr	r3, [pc, #8]	@ (800a2f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000ef4 	.word	0x20000ef4
 800a2f4:	0800aa24 	.word	0x0800aa24

0800a2f8 <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	4904      	ldr	r1, [pc, #16]	@ (800a38c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a37c:	4804      	ldr	r0, [pc, #16]	@ (800a390 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a37e:	f7ff fece 	bl	800a11e <USBD_GetString>
  return USBD_StrDesc;
 800a382:	4b02      	ldr	r3, [pc, #8]	@ (800a38c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000dec 	.word	0x20000dec
 800a390:	0800aaa4 	.word	0x0800aaa4

0800a394 <USBD_FS_SerialStrDescriptor>:
=======
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	6039      	str	r1, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	4904      	ldr	r1, [pc, #16]	@ (800a318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a308:	4804      	ldr	r0, [pc, #16]	@ (800a31c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a30a:	f7ff fece 	bl	800a0aa <USBD_GetString>
  return USBD_StrDesc;
 800a30e:	4b02      	ldr	r3, [pc, #8]	@ (800a318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000ef4 	.word	0x20000ef4
 800a31c:	0800aa30 	.word	0x0800aa30

0800a320 <USBD_FS_SerialStrDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	221a      	movs	r2, #26
 800a3a4:	801a      	strh	r2, [r3, #0]
=======
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	221a      	movs	r2, #26
 800a330:	801a      	strh	r2, [r3, #0]
>>>>>>> 2814753 (long press added)

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 800a3a6:	f000 f843 	bl	800a430 <Get_SerialNum>
=======
 800a332:	f000 f843 	bl	800a3bc <Get_SerialNum>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 800a3aa:	4b02      	ldr	r3, [pc, #8]	@ (800a3b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000150 	.word	0x20000150

0800a3b8 <USBD_FS_ConfigStrDescriptor>:
=======
 800a336:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20000150 	.word	0x20000150

0800a344 <USBD_FS_ConfigStrDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4907      	ldr	r1, [pc, #28]	@ (800a3ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3ce:	4808      	ldr	r0, [pc, #32]	@ (800a3f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3d0:	f7ff fea5 	bl	800a11e <USBD_GetString>
 800a3d4:	e004      	b.n	800a3e0 <USBD_FS_ConfigStrDescriptor+0x28>
=======
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d105      	bne.n	800a362 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	4907      	ldr	r1, [pc, #28]	@ (800a378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a35a:	4808      	ldr	r0, [pc, #32]	@ (800a37c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a35c:	f7ff fea5 	bl	800a0aa <USBD_GetString>
 800a360:	e004      	b.n	800a36c <USBD_FS_ConfigStrDescriptor+0x28>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4904      	ldr	r1, [pc, #16]	@ (800a3ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3da:	4805      	ldr	r0, [pc, #20]	@ (800a3f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3dc:	f7ff fe9f 	bl	800a11e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	@ (800a3ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000dec 	.word	0x20000dec
 800a3f0:	0800aab8 	.word	0x0800aab8

0800a3f4 <USBD_FS_InterfaceStrDescriptor>:
=======
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4904      	ldr	r1, [pc, #16]	@ (800a378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a366:	4805      	ldr	r0, [pc, #20]	@ (800a37c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a368:	f7ff fe9f 	bl	800a0aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a36c:	4b02      	ldr	r3, [pc, #8]	@ (800a378 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000ef4 	.word	0x20000ef4
 800a37c:	0800aa44 	.word	0x0800aa44

0800a380 <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> 2814753 (long press added)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	4907      	ldr	r1, [pc, #28]	@ (800a428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a40a:	4808      	ldr	r0, [pc, #32]	@ (800a42c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a40c:	f7ff fe87 	bl	800a11e <USBD_GetString>
 800a410:	e004      	b.n	800a41c <USBD_FS_InterfaceStrDescriptor+0x28>
=======
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d105      	bne.n	800a39e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4907      	ldr	r1, [pc, #28]	@ (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a396:	4808      	ldr	r0, [pc, #32]	@ (800a3b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a398:	f7ff fe87 	bl	800a0aa <USBD_GetString>
 800a39c:	e004      	b.n	800a3a8 <USBD_FS_InterfaceStrDescriptor+0x28>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4904      	ldr	r1, [pc, #16]	@ (800a428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a416:	4805      	ldr	r0, [pc, #20]	@ (800a42c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a418:	f7ff fe81 	bl	800a11e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a41c:	4b02      	ldr	r3, [pc, #8]	@ (800a428 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20000dec 	.word	0x20000dec
 800a42c:	0800aac4 	.word	0x0800aac4

0800a430 <Get_SerialNum>:
=======
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4904      	ldr	r1, [pc, #16]	@ (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3a2:	4805      	ldr	r0, [pc, #20]	@ (800a3b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3a4:	f7ff fe81 	bl	800a0aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a8:	4b02      	ldr	r3, [pc, #8]	@ (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000ef4 	.word	0x20000ef4
 800a3b8:	0800aa50 	.word	0x0800aa50

0800a3bc <Get_SerialNum>:
>>>>>>> 2814753 (long press added)
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
=======
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
>>>>>>> 2814753 (long press added)
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
<<<<<<< HEAD
 800a436:	4b0f      	ldr	r3, [pc, #60]	@ (800a474 <Get_SerialNum+0x44>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a43c:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <Get_SerialNum+0x48>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a442:	4b0e      	ldr	r3, [pc, #56]	@ (800a47c <Get_SerialNum+0x4c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a456:	2208      	movs	r2, #8
 800a458:	4909      	ldr	r1, [pc, #36]	@ (800a480 <Get_SerialNum+0x50>)
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f814 	bl	800a488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a460:	2204      	movs	r2, #4
 800a462:	4908      	ldr	r1, [pc, #32]	@ (800a484 <Get_SerialNum+0x54>)
 800a464:	68b8      	ldr	r0, [r7, #8]
 800a466:	f000 f80f 	bl	800a488 <IntToUnicode>
  }
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	1ffff7e8 	.word	0x1ffff7e8
 800a478:	1ffff7ec 	.word	0x1ffff7ec
 800a47c:	1ffff7f0 	.word	0x1ffff7f0
 800a480:	20000152 	.word	0x20000152
 800a484:	20000162 	.word	0x20000162

0800a488 <IntToUnicode>:
=======
 800a3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a400 <Get_SerialNum+0x44>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a404 <Get_SerialNum+0x48>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a408 <Get_SerialNum+0x4c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	4909      	ldr	r1, [pc, #36]	@ (800a40c <Get_SerialNum+0x50>)
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 f814 	bl	800a414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	4908      	ldr	r1, [pc, #32]	@ (800a410 <Get_SerialNum+0x54>)
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f000 f80f 	bl	800a414 <IntToUnicode>
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	1ffff7e8 	.word	0x1ffff7e8
 800a404:	1ffff7ec 	.word	0x1ffff7ec
 800a408:	1ffff7f0 	.word	0x1ffff7f0
 800a40c:	20000152 	.word	0x20000152
 800a410:	20000162 	.word	0x20000162

0800a414 <IntToUnicode>:
>>>>>>> 2814753 (long press added)
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
 800a49e:	e027      	b.n	800a4f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	0f1b      	lsrs	r3, r3, #28
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d80b      	bhi.n	800a4c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3230      	adds	r2, #48	@ 0x30
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e00a      	b.n	800a4d6 <IntToUnicode+0x4e>
=======
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a426:	2300      	movs	r3, #0
 800a428:	75fb      	strb	r3, [r7, #23]
 800a42a:	e027      	b.n	800a47c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	0f1b      	lsrs	r3, r3, #28
 800a430:	2b09      	cmp	r3, #9
 800a432:	d80b      	bhi.n	800a44c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	0f1b      	lsrs	r3, r3, #28
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4619      	mov	r1, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	440b      	add	r3, r1
 800a444:	3230      	adds	r2, #48	@ 0x30
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e00a      	b.n	800a462 <IntToUnicode+0x4e>
>>>>>>> 2814753 (long press added)
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	0f1b      	lsrs	r3, r3, #28
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	440b      	add	r3, r1
 800a4d0:	3237      	adds	r2, #55	@ 0x37
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	75fb      	strb	r3, [r7, #23]
 800a4f0:	7dfa      	ldrb	r2, [r7, #23]
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d3d3      	bcc.n	800a4a0 <IntToUnicode+0x18>
  }
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <HAL_PCD_MspInit>:
=======
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	0f1b      	lsrs	r3, r3, #28
 800a450:	b2da      	uxtb	r2, r3
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	4619      	mov	r1, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	440b      	add	r3, r1
 800a45c:	3237      	adds	r2, #55	@ 0x37
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	011b      	lsls	r3, r3, #4
 800a466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	3301      	adds	r3, #1
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	3301      	adds	r3, #1
 800a47a:	75fb      	strb	r3, [r7, #23]
 800a47c:	7dfa      	ldrb	r2, [r7, #23]
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	429a      	cmp	r2, r3
 800a482:	d3d3      	bcc.n	800a42c <IntToUnicode+0x18>
  }
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr

0800a490 <HAL_PCD_MspInit>:
>>>>>>> 2814753 (long press added)
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a0d      	ldr	r2, [pc, #52]	@ (800a548 <HAL_PCD_MspInit+0x44>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d113      	bne.n	800a53e <HAL_PCD_MspInit+0x3a>
=======
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d4 <HAL_PCD_MspInit+0x44>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d113      	bne.n	800a4ca <HAL_PCD_MspInit+0x3a>
>>>>>>> 2814753 (long press added)
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
<<<<<<< HEAD
 800a516:	4b0d      	ldr	r3, [pc, #52]	@ (800a54c <HAL_PCD_MspInit+0x48>)
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	4a0c      	ldr	r2, [pc, #48]	@ (800a54c <HAL_PCD_MspInit+0x48>)
 800a51c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a520:	61d3      	str	r3, [r2, #28]
 800a522:	4b0a      	ldr	r3, [pc, #40]	@ (800a54c <HAL_PCD_MspInit+0x48>)
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	2014      	movs	r0, #20
 800a534:	f7f7 fa4b 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a538:	2014      	movs	r0, #20
 800a53a:	f7f7 fa64 	bl	8001a06 <HAL_NVIC_EnableIRQ>
=======
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d8 <HAL_PCD_MspInit+0x48>)
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d8 <HAL_PCD_MspInit+0x48>)
 800a4a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4ac:	61d3      	str	r3, [r2, #28]
 800a4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d8 <HAL_PCD_MspInit+0x48>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	2014      	movs	r0, #20
 800a4c0:	f7f7 fa4b 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a4c4:	2014      	movs	r0, #20
 800a4c6:	f7f7 fa64 	bl	8001992 <HAL_NVIC_EnableIRQ>
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< HEAD
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40005c00 	.word	0x40005c00
 800a54c:	40021000 	.word	0x40021000

0800a550 <HAL_PCD_SetupStageCallback>:
=======
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40005c00 	.word	0x40005c00
 800a4d8:	40021000 	.word	0x40021000

0800a4dc <HAL_PCD_SetupStageCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7fe feac 	bl	80092c4 <USBD_LL_SetupStage>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_PCD_DataOutStageCallback>:
=======
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7fe feac 	bl	8009250 <USBD_LL_SetupStage>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_PCD_DataOutStageCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	440b      	add	r3, r1
 800a594:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	4619      	mov	r1, r3
 800a59e:	f7fe fede 	bl	800935e <USBD_LL_DataOutStage>
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_PCD_DataInStageCallback>:
=======
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	4619      	mov	r1, r3
 800a52a:	f7fe fede 	bl	80092ea <USBD_LL_DataOutStage>
}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_PCD_DataInStageCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	440b      	add	r3, r1
 800a5ca:	3324      	adds	r3, #36	@ 0x24
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	f7fe ff35 	bl	8009440 <USBD_LL_DataInStage>
}
 800a5d6:	bf00      	nop
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <HAL_PCD_SOFCallback>:
=======
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	440b      	add	r3, r1
 800a556:	3324      	adds	r3, #36	@ 0x24
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	4619      	mov	r1, r3
 800a55e:	f7fe ff35 	bl	80093cc <USBD_LL_DataInStage>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_PCD_SOFCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff f845 	bl	800967c <USBD_LL_SOF>
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_PCD_ResetCallback>:
=======
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff f845 	bl	8009608 <USBD_LL_SOF>
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <HAL_PCD_ResetCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a602:	2301      	movs	r3, #1
 800a604:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	799b      	ldrb	r3, [r3, #6]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d001      	beq.n	800a612 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a60e:	f7f6 f99d 	bl	800094c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a618:	7bfa      	ldrb	r2, [r7, #15]
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fff5 	bl	800960c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe ffae 	bl	800958a <USBD_LL_Reset>
}
 800a62e:	bf00      	nop
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <HAL_PCD_SuspendCallback>:
=======
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	799b      	ldrb	r3, [r3, #6]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d001      	beq.n	800a59e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a59a:	f7f6 f99d 	bl	80008d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5a4:	7bfa      	ldrb	r2, [r7, #15]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fff5 	bl	8009598 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe ffae 	bl	8009516 <USBD_LL_Reset>
}
 800a5ba:	bf00      	nop
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <HAL_PCD_SuspendCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe ffef 	bl	800962a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7a9b      	ldrb	r3, [r3, #10]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a654:	4b04      	ldr	r3, [pc, #16]	@ (800a668 <HAL_PCD_SuspendCallback+0x30>)
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	4a03      	ldr	r2, [pc, #12]	@ (800a668 <HAL_PCD_SuspendCallback+0x30>)
 800a65a:	f043 0306 	orr.w	r3, r3, #6
 800a65e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	e000ed00 	.word	0xe000ed00

0800a66c <HAL_PCD_ResumeCallback>:
=======
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe ffef 	bl	80095b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7a9b      	ldrb	r3, [r3, #10]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e0:	4b04      	ldr	r3, [pc, #16]	@ (800a5f4 <HAL_PCD_SuspendCallback+0x30>)
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	4a03      	ldr	r2, [pc, #12]	@ (800a5f4 <HAL_PCD_SuspendCallback+0x30>)
 800a5e6:	f043 0306 	orr.w	r3, r3, #6
 800a5ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	e000ed00 	.word	0xe000ed00

0800a5f8 <HAL_PCD_ResumeCallback>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
=======
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
>>>>>>> 2814753 (long press added)
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< HEAD
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe ffe9 	bl	8009652 <USBD_LL_Resume>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_LL_Init>:
=======
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe ffe9 	bl	80095de <USBD_LL_Resume>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_LL_Init>:
>>>>>>> 2814753 (long press added)
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a690:	4a1f      	ldr	r2, [pc, #124]	@ (800a710 <USBD_LL_Init+0x88>)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a1d      	ldr	r2, [pc, #116]	@ (800a710 <USBD_LL_Init+0x88>)
 800a69c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a714 <USBD_LL_Init+0x8c>)
 800a6a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6ac:	4b18      	ldr	r3, [pc, #96]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a6b2:	4b17      	ldr	r3, [pc, #92]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a6b8:	4b15      	ldr	r3, [pc, #84]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a6be:	4b14      	ldr	r3, [pc, #80]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a6c4:	4812      	ldr	r0, [pc, #72]	@ (800a710 <USBD_LL_Init+0x88>)
 800a6c6:	f7f8 fa91 	bl	8002bec <HAL_PCD_Init>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a6d0:	f7f6 f93c 	bl	800094c <Error_Handler>
=======
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a61c:	4a1f      	ldr	r2, [pc, #124]	@ (800a69c <USBD_LL_Init+0x88>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a1d      	ldr	r2, [pc, #116]	@ (800a69c <USBD_LL_Init+0x88>)
 800a628:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a62c:	4b1b      	ldr	r3, [pc, #108]	@ (800a69c <USBD_LL_Init+0x88>)
 800a62e:	4a1c      	ldr	r2, [pc, #112]	@ (800a6a0 <USBD_LL_Init+0x8c>)
 800a630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a632:	4b1a      	ldr	r3, [pc, #104]	@ (800a69c <USBD_LL_Init+0x88>)
 800a634:	2208      	movs	r2, #8
 800a636:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a638:	4b18      	ldr	r3, [pc, #96]	@ (800a69c <USBD_LL_Init+0x88>)
 800a63a:	2202      	movs	r2, #2
 800a63c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a63e:	4b17      	ldr	r3, [pc, #92]	@ (800a69c <USBD_LL_Init+0x88>)
 800a640:	2200      	movs	r2, #0
 800a642:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a644:	4b15      	ldr	r3, [pc, #84]	@ (800a69c <USBD_LL_Init+0x88>)
 800a646:	2200      	movs	r2, #0
 800a648:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a64a:	4b14      	ldr	r3, [pc, #80]	@ (800a69c <USBD_LL_Init+0x88>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a650:	4812      	ldr	r0, [pc, #72]	@ (800a69c <USBD_LL_Init+0x88>)
 800a652:	f7f8 fa91 	bl	8002b78 <HAL_PCD_Init>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a65c:	f7f6 f93c 	bl	80008d8 <Error_Handler>
>>>>>>> 2814753 (long press added)
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
<<<<<<< HEAD
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6da:	2318      	movs	r3, #24
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2100      	movs	r1, #0
 800a6e0:	f7f9 ff8b 	bl	80045fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6ea:	2358      	movs	r3, #88	@ 0x58
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2180      	movs	r1, #128	@ 0x80
 800a6f0:	f7f9 ff83 	bl	80045fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6fe:	2200      	movs	r2, #0
 800a700:	2181      	movs	r1, #129	@ 0x81
 800a702:	f7f9 ff7a 	bl	80045fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	20000fec 	.word	0x20000fec
 800a714:	40005c00 	.word	0x40005c00

0800a718 <USBD_LL_Start>:
=======
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a666:	2318      	movs	r3, #24
 800a668:	2200      	movs	r2, #0
 800a66a:	2100      	movs	r1, #0
 800a66c:	f7f9 ff8b 	bl	8004586 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a676:	2358      	movs	r3, #88	@ 0x58
 800a678:	2200      	movs	r2, #0
 800a67a:	2180      	movs	r1, #128	@ 0x80
 800a67c:	f7f9 ff83 	bl	8004586 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a68a:	2200      	movs	r2, #0
 800a68c:	2181      	movs	r1, #129	@ 0x81
 800a68e:	f7f9 ff7a 	bl	8004586 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	200010f4 	.word	0x200010f4
 800a6a0:	40005c00 	.word	0x40005c00

0800a6a4 <USBD_LL_Start>:
>>>>>>> 2814753 (long press added)
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f8 fb52 	bl	8002dd8 <HAL_PCD_Start>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f93a 	bl	800a9b4 <USBD_Get_USB_Status>
 800a740:	4603      	mov	r3, r0
 800a742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a744:	7bbb      	ldrb	r3, [r7, #14]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_LL_OpenEP>:
=======
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7f8 fb52 	bl	8002d64 <HAL_PCD_Start>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f93a 	bl	800a940 <USBD_Get_USB_Status>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_LL_OpenEP>:
>>>>>>> 2814753 (long press added)
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	4608      	mov	r0, r1
 800a758:	4611      	mov	r1, r2
 800a75a:	461a      	mov	r2, r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	70fb      	strb	r3, [r7, #3]
 800a760:	460b      	mov	r3, r1
 800a762:	70bb      	strb	r3, [r7, #2]
 800a764:	4613      	mov	r3, r2
 800a766:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a776:	78bb      	ldrb	r3, [r7, #2]
 800a778:	883a      	ldrh	r2, [r7, #0]
 800a77a:	78f9      	ldrb	r1, [r7, #3]
 800a77c:	f7f8 fca6 	bl	80030cc <HAL_PCD_EP_Open>
 800a780:	4603      	mov	r3, r0
 800a782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f914 	bl	800a9b4 <USBD_Get_USB_Status>
 800a78c:	4603      	mov	r3, r0
 800a78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a790:	7bbb      	ldrb	r3, [r7, #14]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_LL_CloseEP>:
=======
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	70fb      	strb	r3, [r7, #3]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70bb      	strb	r3, [r7, #2]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a702:	78bb      	ldrb	r3, [r7, #2]
 800a704:	883a      	ldrh	r2, [r7, #0]
 800a706:	78f9      	ldrb	r1, [r7, #3]
 800a708:	f7f8 fca6 	bl	8003058 <HAL_PCD_EP_Open>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f914 	bl	800a940 <USBD_Get_USB_Status>
 800a718:	4603      	mov	r3, r0
 800a71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_LL_CloseEP>:
>>>>>>> 2814753 (long press added)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7f8 fce4 	bl	8003186 <HAL_PCD_EP_Close>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f8f5 	bl	800a9b4 <USBD_Get_USB_Status>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_LL_StallEP>:
=======
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	460b      	mov	r3, r1
 800a730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a740:	78fa      	ldrb	r2, [r7, #3]
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f7f8 fce4 	bl	8003112 <HAL_PCD_EP_Close>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f8f5 	bl	800a940 <USBD_Get_USB_Status>
 800a756:	4603      	mov	r3, r0
 800a758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_LL_StallEP>:
>>>>>>> 2814753 (long press added)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7f2:	78fa      	ldrb	r2, [r7, #3]
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7f8 fd75 	bl	80032e6 <HAL_PCD_EP_SetStall>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f8d6 	bl	800a9b4 <USBD_Get_USB_Status>
 800a808:	4603      	mov	r3, r0
 800a80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_LL_ClearStallEP>:
=======
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a77e:	78fa      	ldrb	r2, [r7, #3]
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f7f8 fd75 	bl	8003272 <HAL_PCD_EP_SetStall>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 f8d6 	bl	800a940 <USBD_Get_USB_Status>
 800a794:	4603      	mov	r3, r0
 800a796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a798:	7bbb      	ldrb	r3, [r7, #14]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <USBD_LL_ClearStallEP>:
>>>>>>> 2814753 (long press added)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7f8 fdb6 	bl	80033a6 <HAL_PCD_EP_ClrStall>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f8b7 	bl	800a9b4 <USBD_Get_USB_Status>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_IsStallEP>:
=======
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f8 fdb6 	bl	8003332 <HAL_PCD_EP_ClrStall>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f8b7 	bl	800a940 <USBD_Get_USB_Status>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_LL_IsStallEP>:
>>>>>>> 2814753 (long press added)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a866:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	da0b      	bge.n	800a888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a876:	68f9      	ldr	r1, [r7, #12]
 800a878:	4613      	mov	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	440b      	add	r3, r1
 800a882:	3312      	adds	r3, #18
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	e00b      	b.n	800a8a0 <USBD_LL_IsStallEP+0x4c>
=======
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da0b      	bge.n	800a814 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	440b      	add	r3, r1
 800a80e:	3312      	adds	r3, #18
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	e00b      	b.n	800a82c <USBD_LL_IsStallEP+0x4c>
>>>>>>> 2814753 (long press added)
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	4613      	mov	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	00db      	lsls	r3, r3, #3
 800a898:	440b      	add	r3, r1
 800a89a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a89e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bc80      	pop	{r7}
 800a8a8:	4770      	bx	lr

0800a8aa <USBD_LL_SetUSBAddress>:
=======
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a81a:	68f9      	ldr	r1, [r7, #12]
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	440b      	add	r3, r1
 800a826:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a82a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	bc80      	pop	{r7}
 800a834:	4770      	bx	lr

0800a836 <USBD_LL_SetUSBAddress>:
>>>>>>> 2814753 (long press added)
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8c4:	78fa      	ldrb	r2, [r7, #3]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f8 fbdb 	bl	8003084 <HAL_PCD_SetAddress>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 f86d 	bl	800a9b4 <USBD_Get_USB_Status>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_LL_Transmit>:
=======
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	4611      	mov	r1, r2
 800a854:	4618      	mov	r0, r3
 800a856:	f7f8 fbdb 	bl	8003010 <HAL_PCD_SetAddress>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 f86d 	bl	800a940 <USBD_Get_USB_Status>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_LL_Transmit>:
>>>>>>> 2814753 (long press added)
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	607a      	str	r2, [r7, #4]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	72fb      	strb	r3, [r7, #11]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	7af9      	ldrb	r1, [r7, #11]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	f7f8 fcb2 	bl	8003278 <HAL_PCD_EP_Transmit>
 800a914:	4603      	mov	r3, r0
 800a916:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f84a 	bl	800a9b4 <USBD_Get_USB_Status>
 800a920:	4603      	mov	r3, r0
 800a922:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a924:	7dbb      	ldrb	r3, [r7, #22]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_PrepareReceive>:
=======
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	607a      	str	r2, [r7, #4]
 800a87e:	461a      	mov	r2, r3
 800a880:	460b      	mov	r3, r1
 800a882:	72fb      	strb	r3, [r7, #11]
 800a884:	4613      	mov	r3, r2
 800a886:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a896:	893b      	ldrh	r3, [r7, #8]
 800a898:	7af9      	ldrb	r1, [r7, #11]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f7f8 fcb2 	bl	8003204 <HAL_PCD_EP_Transmit>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f84a 	bl	800a940 <USBD_Get_USB_Status>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_PrepareReceive>:
>>>>>>> 2814753 (long press added)
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 800a92e:	b580      	push	{r7, lr}
 800a930:	b086      	sub	sp, #24
 800a932:	af00      	add	r7, sp, #0
 800a934:	60f8      	str	r0, [r7, #12]
 800a936:	607a      	str	r2, [r7, #4]
 800a938:	461a      	mov	r2, r3
 800a93a:	460b      	mov	r3, r1
 800a93c:	72fb      	strb	r3, [r7, #11]
 800a93e:	4613      	mov	r3, r2
 800a940:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a950:	893b      	ldrh	r3, [r7, #8]
 800a952:	7af9      	ldrb	r1, [r7, #11]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	f7f8 fc5e 	bl	8003216 <HAL_PCD_EP_Receive>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 f827 	bl	800a9b4 <USBD_Get_USB_Status>
 800a966:	4603      	mov	r3, r0
 800a968:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a96a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBD_static_malloc>:
=======
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	72fb      	strb	r3, [r7, #11]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8dc:	893b      	ldrh	r3, [r7, #8]
 800a8de:	7af9      	ldrb	r1, [r7, #11]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f7f8 fc5e 	bl	80031a2 <HAL_PCD_EP_Receive>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f827 	bl	800a940 <USBD_Get_USB_Status>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_static_malloc>:
>>>>>>> 2814753 (long press added)
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a97c:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <USBD_static_malloc+0x14>)
}
 800a97e:	4618      	mov	r0, r3
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	bc80      	pop	{r7}
 800a986:	4770      	bx	lr
 800a988:	200012c4 	.word	0x200012c4

0800a98c <USBD_static_free>:
=======
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a908:	4b02      	ldr	r3, [pc, #8]	@ (800a914 <USBD_static_malloc+0x14>)
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	bc80      	pop	{r7}
 800a912:	4770      	bx	lr
 800a914:	200013cc 	.word	0x200013cc

0800a918 <USBD_static_free>:
>>>>>>> 2814753 (long press added)
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]

}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	bc80      	pop	{r7}
 800a99c:	4770      	bx	lr

0800a99e <HAL_PCDEx_SetConnectionState>:
=======
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	bc80      	pop	{r7}
 800a928:	4770      	bx	lr

0800a92a <HAL_PCDEx_SetConnectionState>:
>>>>>>> 2814753 (long press added)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
=======
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
>>>>>>> 2814753 (long press added)
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
<<<<<<< HEAD
 800a9aa:	bf00      	nop
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bc80      	pop	{r7}
 800a9b2:	4770      	bx	lr

0800a9b4 <USBD_Get_USB_Status>:
=======
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bc80      	pop	{r7}
 800a93e:	4770      	bx	lr

0800a940 <USBD_Get_USB_Status>:
>>>>>>> 2814753 (long press added)
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d817      	bhi.n	800a9f8 <USBD_Get_USB_Status+0x44>
 800a9c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d0 <USBD_Get_USB_Status+0x1c>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9e1 	.word	0x0800a9e1
 800a9d4:	0800a9e7 	.word	0x0800a9e7
 800a9d8:	0800a9ed 	.word	0x0800a9ed
 800a9dc:	0800a9f3 	.word	0x0800a9f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e4:	e00b      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ea:	e008      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f0:	e005      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f6:	e002      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9fc:	bf00      	nop
  }
  return usb_status;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop

0800aa0c <memset>:
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	4402      	add	r2, r0
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d100      	bne.n	800aa16 <memset+0xa>
 800aa14:	4770      	bx	lr
 800aa16:	f803 1b01 	strb.w	r1, [r3], #1
 800aa1a:	e7f9      	b.n	800aa10 <memset+0x4>

0800aa1c <__libc_init_array>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	2600      	movs	r6, #0
 800aa20:	4d0c      	ldr	r5, [pc, #48]	@ (800aa54 <__libc_init_array+0x38>)
 800aa22:	4c0d      	ldr	r4, [pc, #52]	@ (800aa58 <__libc_init_array+0x3c>)
 800aa24:	1b64      	subs	r4, r4, r5
 800aa26:	10a4      	asrs	r4, r4, #2
 800aa28:	42a6      	cmp	r6, r4
 800aa2a:	d109      	bne.n	800aa40 <__libc_init_array+0x24>
 800aa2c:	f000 f828 	bl	800aa80 <_init>
 800aa30:	2600      	movs	r6, #0
 800aa32:	4d0a      	ldr	r5, [pc, #40]	@ (800aa5c <__libc_init_array+0x40>)
 800aa34:	4c0a      	ldr	r4, [pc, #40]	@ (800aa60 <__libc_init_array+0x44>)
 800aa36:	1b64      	subs	r4, r4, r5
 800aa38:	10a4      	asrs	r4, r4, #2
 800aa3a:	42a6      	cmp	r6, r4
 800aa3c:	d105      	bne.n	800aa4a <__libc_init_array+0x2e>
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa44:	4798      	blx	r3
 800aa46:	3601      	adds	r6, #1
 800aa48:	e7ee      	b.n	800aa28 <__libc_init_array+0xc>
 800aa4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa4e:	4798      	blx	r3
 800aa50:	3601      	adds	r6, #1
 800aa52:	e7f2      	b.n	800aa3a <__libc_init_array+0x1e>
 800aa54:	0800b310 	.word	0x0800b310
 800aa58:	0800b310 	.word	0x0800b310
 800aa5c:	0800b310 	.word	0x0800b310
 800aa60:	0800b314 	.word	0x0800b314

0800aa64 <memcpy>:
 800aa64:	440a      	add	r2, r1
 800aa66:	4291      	cmp	r1, r2
 800aa68:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa6c:	d100      	bne.n	800aa70 <memcpy+0xc>
 800aa6e:	4770      	bx	lr
 800aa70:	b510      	push	{r4, lr}
 800aa72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa76:	4291      	cmp	r1, r2
 800aa78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa7c:	d1f9      	bne.n	800aa72 <memcpy+0xe>
 800aa7e:	bd10      	pop	{r4, pc}

0800aa80 <_init>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr

0800aa8c <_fini>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr
=======
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	2b03      	cmp	r3, #3
 800a952:	d817      	bhi.n	800a984 <USBD_Get_USB_Status+0x44>
 800a954:	a201      	add	r2, pc, #4	@ (adr r2, 800a95c <USBD_Get_USB_Status+0x1c>)
 800a956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95a:	bf00      	nop
 800a95c:	0800a96d 	.word	0x0800a96d
 800a960:	0800a973 	.word	0x0800a973
 800a964:	0800a979 	.word	0x0800a979
 800a968:	0800a97f 	.word	0x0800a97f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]
    break;
 800a970:	e00b      	b.n	800a98a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a972:	2302      	movs	r3, #2
 800a974:	73fb      	strb	r3, [r7, #15]
    break;
 800a976:	e008      	b.n	800a98a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a978:	2301      	movs	r3, #1
 800a97a:	73fb      	strb	r3, [r7, #15]
    break;
 800a97c:	e005      	b.n	800a98a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a97e:	2302      	movs	r3, #2
 800a980:	73fb      	strb	r3, [r7, #15]
    break;
 800a982:	e002      	b.n	800a98a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a984:	2302      	movs	r3, #2
 800a986:	73fb      	strb	r3, [r7, #15]
    break;
 800a988:	bf00      	nop
  }
  return usb_status;
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop

0800a998 <memset>:
 800a998:	4603      	mov	r3, r0
 800a99a:	4402      	add	r2, r0
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d100      	bne.n	800a9a2 <memset+0xa>
 800a9a0:	4770      	bx	lr
 800a9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a6:	e7f9      	b.n	800a99c <memset+0x4>

0800a9a8 <__libc_init_array>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	2600      	movs	r6, #0
 800a9ac:	4d0c      	ldr	r5, [pc, #48]	@ (800a9e0 <__libc_init_array+0x38>)
 800a9ae:	4c0d      	ldr	r4, [pc, #52]	@ (800a9e4 <__libc_init_array+0x3c>)
 800a9b0:	1b64      	subs	r4, r4, r5
 800a9b2:	10a4      	asrs	r4, r4, #2
 800a9b4:	42a6      	cmp	r6, r4
 800a9b6:	d109      	bne.n	800a9cc <__libc_init_array+0x24>
 800a9b8:	f000 f828 	bl	800aa0c <_init>
 800a9bc:	2600      	movs	r6, #0
 800a9be:	4d0a      	ldr	r5, [pc, #40]	@ (800a9e8 <__libc_init_array+0x40>)
 800a9c0:	4c0a      	ldr	r4, [pc, #40]	@ (800a9ec <__libc_init_array+0x44>)
 800a9c2:	1b64      	subs	r4, r4, r5
 800a9c4:	10a4      	asrs	r4, r4, #2
 800a9c6:	42a6      	cmp	r6, r4
 800a9c8:	d105      	bne.n	800a9d6 <__libc_init_array+0x2e>
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d0:	4798      	blx	r3
 800a9d2:	3601      	adds	r6, #1
 800a9d4:	e7ee      	b.n	800a9b4 <__libc_init_array+0xc>
 800a9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9da:	4798      	blx	r3
 800a9dc:	3601      	adds	r6, #1
 800a9de:	e7f2      	b.n	800a9c6 <__libc_init_array+0x1e>
 800a9e0:	0800b29c 	.word	0x0800b29c
 800a9e4:	0800b29c 	.word	0x0800b29c
 800a9e8:	0800b29c 	.word	0x0800b29c
 800a9ec:	0800b2a0 	.word	0x0800b2a0

0800a9f0 <memcpy>:
 800a9f0:	440a      	add	r2, r1
 800a9f2:	4291      	cmp	r1, r2
 800a9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f8:	d100      	bne.n	800a9fc <memcpy+0xc>
 800a9fa:	4770      	bx	lr
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa08:	d1f9      	bne.n	800a9fe <memcpy+0xe>
 800aa0a:	bd10      	pop	{r4, pc}

0800aa0c <_init>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	bf00      	nop
 800aa10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa12:	bc08      	pop	{r3}
 800aa14:	469e      	mov	lr, r3
 800aa16:	4770      	bx	lr

0800aa18 <_fini>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	bf00      	nop
 800aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1e:	bc08      	pop	{r3}
 800aa20:	469e      	mov	lr, r3
 800aa22:	4770      	bx	lr
>>>>>>> 2814753 (long press added)
